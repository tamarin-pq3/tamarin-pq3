theory iMessagePQ3 begin

// Function signature and definition of the equational theory E

builtins: diffie-hellman, natural-numbers
functions: Just/1, None/0, concat/2, decap/2, default/2, encap/2, fst/1,
           h/1, hkdf/2, pair/2, pk/1, pqpk/1, prefix/1, sdec/2, senc/2, sign/2,
           snd/1, suffix/1, true/0, unjust/1, verify/3
equations:
    concat(prefix(x), suffix(x)) = x,
    decap(encap(k, pqpk(sk)), sk) = k,
    default(Just(v), t) = v,
    default(None, v) = v,
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2,
    unjust(Just(t)) = t,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true



/* looping facts with injective instances: Session/15 */





restriction Eq:
  "∀ a b #t. (Eq( a, b ) @ #t) ⇒ (a = b)"
  // safety formula

restriction Neq:
  "∀ a b #t. (Neq( a, b ) @ #t) ⇒ (¬(a = b))"
  // safety formula

restriction OnlyOnce:
  "∀ t #a #b. ((OnlyOnce( t ) @ #a) ∧ (OnlyOnce( t ) @ #b)) ⇒ (#a = #b)"
  // safety formula

rule (modulo E) PQAttackerStart[color=#ff6961]:
   [ ] --[ PQAttack( ), SomeCompromise( ) ]-> [ !PQAttacker( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) PQAttacker[color=#ff6961]:
   [ !PQAttacker( ), !NonPQSecKey( k ) ] --> [ Out( k ) ]

  /* has exactly the trivial AC variant */

restriction PQAttacker:
  "∀ #compr #t.
    ((PQAttack( ) @ #compr) ∧ (PrePQAttack( ) @ #t)) ⇒ (#t < #compr)"
  // safety formula

rule (modulo E) UserKeyGen[color=#fdfd96]:
   [ Fr( ~idKey ), Fr( ~preKey ), Fr( ~kemPreKey ) ]
  --[
  PrePQAttack( ), OnlyOnce( <'setup', $A> ),
  ECDHPreKeyGen( $A, 'g'^~preKey ), KemPreKeyGen( $A, pqpk(~kemPreKey) )
  ]->
   [
   !IdentityKey( $A, ~idKey ), !ECDHPreKey( $A, ~preKey ),
   !KemPreKey( $A, ~kemPreKey ), Out( pk(~idKey) ), Out( 'g'^~preKey ),
   Out( pqpk(~kemPreKey) ),
   Out( sign(<'nf_reg', pqpk(~kemPreKey), 'g'^~preKey>, ~idKey) ),
   !IDSIdentityData( $A, pk(~idKey) ),
   !IDSClientData( $A, 'g'^~preKey, pqpk(~kemPreKey),
                   sign(<'nf_reg', pqpk(~kemPreKey), 'g'^~preKey>, ~idKey)
   ),
   !NonPQSecKey( ~idKey ), !NonPQSecKey( ~preKey )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) IdentityKeyLeak[color=#ff6961]:
   [ !IdentityKey( $A, ~idKey ) ]
  --[ SomeCompromise( ), RevealIdentityKey( $A ) ]->
   [ Out( ~idKey ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ECDHPreKeyLeak[color=#ff6961]:
   [ !ECDHPreKey( $A, ~preKey ) ]
  --[ SomeCompromise( ), RevealECDHPreKey( $A, 'g'^~preKey ) ]->
   [ Out( ~preKey ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ECDHKeyLeak[color=#ff6961]:
   [ !ECDHKey( ~id, $A, ~ecdhSk ) ]
  --[ SomeCompromise( ), RevealECDHKey( ~id, $A, 'g'^~ecdhSk ) ]->
   [ Out( ~ecdhSk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) KemPreKeyLeak[color=#ff6961]:
   [ !KemPreKey( $A, ~sk ) ]
  --[ SomeCompromise( ), RevealKemPreKey( $A, pqpk(~sk) ) ]->
   [ Out( ~sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) KemKeyLeak[color=#ff6961]:
   [ !KemKey( $A, ~kemKey ) ]
  --[ SomeCompromise( ), RevealKemKey( $A, pqpk(~kemKey) ) ]->
   [ Out( ~kemKey ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) RootKeyLeak[color=#ff6961]:
   [ !RootKey( ~id, i, $A, kemSS, rk ) ]
  --[ SomeCompromise( ), RevealRootKey( $A, kemSS, rk ) ]->
   [ Out( rk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ChainKeyLeak[color=#ff6961]:
   [ !ChainKey( ~id, i, $A, ck ) ]
  --[ SomeCompromise( ), RevealChainKey( $A, ck ) ]->
   [ Out( ck ) ]

  /* has exactly the trivial AC variant */

lemma Auto_ChainKeySources [sources]:
  all-traces
  "∀ p t #x.
    (RevealChainKey( p, t ) @ #x) ⇒
    ((∃ t1 t2. (t = hkdf(t1, t2)) ∧ (t2 = 'chain_key')) ∨
     (∃ t1 t2 t3. t = suffix(hkdf(hkdf(t1, t2), t3))))"
/*
guarded formula characterizing all counter-examples:
"∃ p t #x.
  (RevealChainKey( p, t ) @ #x)
 ∧
  (∀ t1 t2. (t = hkdf(t1, t2)) ∧ (t2 = 'chain_key') ⇒ ⊥) ∧
  (∀ t1 t2 t3. (t = suffix(hkdf(hkdf(t1, t2), t3))) ⇒ ⊥)"
*/
by sorry

rule (modulo E) MessageKeyLeak[color=#ff6961]:
   [ !MessageKey( ~id, i, $A, mk ) ]
  --[ SomeCompromise( ), RevealMessageKey( $A, mk ) ]->
   [ Out( mk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) QueryIDS[color=#fdfd96]:
   [
   !IDSIdentityData( $A, idPk ),
   !IDSClientData( $A, prePk, kemPrePk, preKeySig )
   ]
  --[
  PrePQAttack( ),
  Eq( verify(preKeySig, <'nf_reg', kemPrePk, prePk>, idPk), true )
  ]->
   [ IDSQuery( $A, idPk, prePk, kemPrePk, preKeySig ) ]

  /*
  rule (modulo AC) QueryIDS[color=#fdfd96]:
     [
     !IDSIdentityData( $A, idPk ),
     !IDSClientData( $A, prePk, kemPrePk, preKeySig )
     ]
    --[ PrePQAttack( ), Eq( z, true ) ]->
     [ IDSQuery( $A, idPk, prePk, kemPrePk, preKeySig ) ]
    variants (modulo AC)
    1. idPk  = idPk.7
       kemPrePk
             = kemPrePk.7
       preKeySig
             = preKeySig.7
       prePk = prePk.7
       z     = verify(preKeySig.7, <'nf_reg', kemPrePk.7, prePk.7>, idPk.7)
    
    2. idPk  = pk(x.7)
       kemPrePk
             = x.8
       preKeySig
             = sign(<'nf_reg', x.8, x.9>, x.7)
       prePk = x.9
       z     = true
  */

rule (modulo E) SessionStartAsASender[color=#b4d9ef]:
   [
   Fr( ~id ), !IdentityKey( $Me, ~idKey ), !KemPreKey( $Me, ~kemSk ),
   IDSQuery( $Them, theirIdPk, theirEcdhPk, theirKemPk, preKeySig ),
   Fr( ~msg ), Fr( ~ecdhSk ), Fr( ~kemSS )
   ]
  --[
  PrePQAttack( ), SessionInfo( ~id, %1, $Me, $Them ),
  IdentityKeyQueried( ~id, $Them, theirIdPk ), SessionStart( theirIdPk ),
  PublicKeyRatchet( theirIdPk, 'g'^~ecdhSk, theirEcdhPk,
                    theirEcdhPk^~ecdhSk, pqpk(~kemSk), Just(theirKemPk), None, ~kemSS,
                    theirKemPk,
                    prefix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, '0'), ~kemSS),
                                <$Me, pk(~idKey), $Them, theirIdPk>))
  ),
  PKRatchet( ), ToSender( ), MessageSent( ~id, %1, $Me, $Them, ~msg, $AD ),
  SessionSecrets( 'g'^~ecdhSk, theirEcdhPk, ~kemSS, theirKemPk,
                  prefix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, '0'), ~kemSS),
                              <$Me, pk(~idKey), $Them, theirIdPk>)),
                  suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, '0'), ~kemSS),
                              <$Me, pk(~idKey), $Them, theirIdPk>)),
                  hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, '0'), ~kemSS),
                                   <$Me, pk(~idKey), $Them, theirIdPk>)),
                       'msg_key')
  ),
  KeysUsed( theirIdPk, 'g'^~ecdhSk, theirEcdhPk, theirEcdhPk^~ecdhSk,
            pqpk(~kemSk), Just(theirKemPk), None, ~kemSS, theirKemPk,
            prefix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, '0'), ~kemSS),
                        <$Me, pk(~idKey), $Them, theirIdPk>)),
            suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, '0'), ~kemSS),
                        <$Me, pk(~idKey), $Them, theirIdPk>)),
            hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, '0'), ~kemSS),
                             <$Me, pk(~idKey), $Them, theirIdPk>)),
                 'msg_key')
  ),
  ECDHKeyGen( ~id, $Me, $Them, 'g'^~ecdhSk ),
  NewKemSS( ~id, $Me, $Them, ~kemSS, theirKemPk ),
  NewKemPublicKey( ~id, $Me, $Them, Just(theirKemPk) )
  ]->
   [
   Out( <
         senc(~msg,
              hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, '0'), ~kemSS),
                               <$Me, pk(~idKey), $Them, theirIdPk>)),
                   'msg_key')), 
         $AD, 
         sign(<'msg_sig', 
               senc(~msg,
                    hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, '0'), ~kemSS),
                                     <$Me, pk(~idKey), $Them, theirIdPk>)),
                         'msg_key')), 
               $AD, 
               hkdf(hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, '0'), ~kemSS),
                                     <$Me, pk(~idKey), $Them, theirIdPk>)),
                         'msg_key'),
                    'msg_key_ind'), 
               'g'^~ecdhSk, %1, <$Me, pk(~idKey), $Them, theirIdPk>, None, 
               Just(encap(~kemSS, theirKemPk)), 
               Just(h(<theirEcdhPk, theirKemPk, preKeySig>))>,
              ~idKey), 
         'g'^~ecdhSk, %1, 
         hkdf(hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, '0'), ~kemSS),
                               <$Me, pk(~idKey), $Them, theirIdPk>)),
                   'msg_key'),
              'msg_key_ind'), 
         None, Just(encap(~kemSS, theirKemPk)), 
         Just(h(<theirEcdhPk, theirKemPk, preKeySig>))>
   ),
   Session( ~id, %1, 'S', $Me, ~ecdhSk, ~kemSk, $Them, theirIdPk,
            theirEcdhPk, Just(theirKemPk), None, ~kemSS, theirKemPk,
            prefix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, '0'), ~kemSS),
                        <$Me, pk(~idKey), $Them, theirIdPk>)),
            hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, '0'), ~kemSS),
                             <$Me, pk(~idKey), $Them, theirIdPk>)),
                 'chain_key')
   ),
   Out( 'g'^~ecdhSk ), !NonPQSecKey( ~ecdhSk ),
   !RootKey( ~id, %1, $Me, ~kemSS,
             prefix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, '0'), ~kemSS),
                         <$Me, pk(~idKey), $Them, theirIdPk>))
   ),
   !ChainKey( ~id, %1, $Me,
              suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, '0'), ~kemSS),
                          <$Me, pk(~idKey), $Them, theirIdPk>))
   ),
   !MessageKey( ~id, %1, $Me,
                hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, '0'), ~kemSS),
                                 <$Me, pk(~idKey), $Them, theirIdPk>)),
                     'msg_key')
   ),
   !ECDHKey( ~id, $Me, ~ecdhSk )
   ]

  /*
  rule (modulo AC) SessionStartAsASender[color=#b4d9ef]:
     [
     Fr( ~id ), !IdentityKey( $Me, ~idKey ), !KemPreKey( $Me, ~kemSk ),
     IDSQuery( $Them, theirIdPk, theirEcdhPk, theirKemPk, preKeySig ),
     Fr( ~msg ), Fr( ~ecdhSk ), Fr( ~kemSS )
     ]
    --[
    PrePQAttack( ), SessionInfo( ~id, %1, $Me, $Them ),
    IdentityKeyQueried( ~id, $Them, theirIdPk ), SessionStart( theirIdPk ),
    PublicKeyRatchet( theirIdPk, 'g'^~ecdhSk, theirEcdhPk, z, pqpk(~kemSk),
                      Just(theirKemPk), None, ~kemSS, theirKemPk,
                      prefix(hkdf(hkdf(hkdf(z, '0'), ~kemSS),
                                  <$Me, pk(~idKey), $Them, theirIdPk>))
    ),
    PKRatchet( ), ToSender( ), MessageSent( ~id, %1, $Me, $Them, ~msg, $AD ),
    SessionSecrets( 'g'^~ecdhSk, theirEcdhPk, ~kemSS, theirKemPk,
                    prefix(hkdf(hkdf(hkdf(z, '0'), ~kemSS),
                                <$Me, pk(~idKey), $Them, theirIdPk>)),
                    suffix(hkdf(hkdf(hkdf(z, '0'), ~kemSS),
                                <$Me, pk(~idKey), $Them, theirIdPk>)),
                    hkdf(suffix(hkdf(hkdf(hkdf(z, '0'), ~kemSS),
                                     <$Me, pk(~idKey), $Them, theirIdPk>)),
                         'msg_key')
    ),
    KeysUsed( theirIdPk, 'g'^~ecdhSk, theirEcdhPk, z, pqpk(~kemSk),
              Just(theirKemPk), None, ~kemSS, theirKemPk,
              prefix(hkdf(hkdf(hkdf(z, '0'), ~kemSS),
                          <$Me, pk(~idKey), $Them, theirIdPk>)),
              suffix(hkdf(hkdf(hkdf(z, '0'), ~kemSS),
                          <$Me, pk(~idKey), $Them, theirIdPk>)),
              hkdf(suffix(hkdf(hkdf(hkdf(z, '0'), ~kemSS),
                               <$Me, pk(~idKey), $Them, theirIdPk>)),
                   'msg_key')
    ),
    ECDHKeyGen( ~id, $Me, $Them, 'g'^~ecdhSk ),
    NewKemSS( ~id, $Me, $Them, ~kemSS, theirKemPk ),
    NewKemPublicKey( ~id, $Me, $Them, Just(theirKemPk) )
    ]->
     [
     Out( <
           senc(~msg,
                hkdf(suffix(hkdf(hkdf(hkdf(z, '0'), ~kemSS),
                                 <$Me, pk(~idKey), $Them, theirIdPk>)),
                     'msg_key')), 
           $AD, 
           sign(<'msg_sig', 
                 senc(~msg,
                      hkdf(suffix(hkdf(hkdf(hkdf(z, '0'), ~kemSS),
                                       <$Me, pk(~idKey), $Them, theirIdPk>)),
                           'msg_key')), 
                 $AD, 
                 hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z, '0'), ~kemSS),
                                       <$Me, pk(~idKey), $Them, theirIdPk>)),
                           'msg_key'),
                      'msg_key_ind'), 
                 'g'^~ecdhSk, %1, <$Me, pk(~idKey), $Them, theirIdPk>, None, 
                 Just(encap(~kemSS, theirKemPk)), 
                 Just(h(<theirEcdhPk, theirKemPk, preKeySig>))>,
                ~idKey), 
           'g'^~ecdhSk, %1, 
           hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z, '0'), ~kemSS),
                                 <$Me, pk(~idKey), $Them, theirIdPk>)),
                     'msg_key'),
                'msg_key_ind'), 
           None, Just(encap(~kemSS, theirKemPk)), 
           Just(h(<theirEcdhPk, theirKemPk, preKeySig>))>
     ),
     Session( ~id, %1, 'S', $Me, ~ecdhSk, ~kemSk, $Them, theirIdPk,
              theirEcdhPk, Just(theirKemPk), None, ~kemSS, theirKemPk,
              prefix(hkdf(hkdf(hkdf(z, '0'), ~kemSS),
                          <$Me, pk(~idKey), $Them, theirIdPk>)),
              hkdf(suffix(hkdf(hkdf(hkdf(z, '0'), ~kemSS),
                               <$Me, pk(~idKey), $Them, theirIdPk>)),
                   'chain_key')
     ),
     Out( 'g'^~ecdhSk ), !NonPQSecKey( ~ecdhSk ),
     !RootKey( ~id, %1, $Me, ~kemSS,
               prefix(hkdf(hkdf(hkdf(z, '0'), ~kemSS),
                           <$Me, pk(~idKey), $Them, theirIdPk>))
     ),
     !ChainKey( ~id, %1, $Me,
                suffix(hkdf(hkdf(hkdf(z, '0'), ~kemSS),
                            <$Me, pk(~idKey), $Them, theirIdPk>))
     ),
     !MessageKey( ~id, %1, $Me,
                  hkdf(suffix(hkdf(hkdf(hkdf(z, '0'), ~kemSS),
                                   <$Me, pk(~idKey), $Them, theirIdPk>)),
                       'msg_key')
     ),
     !ECDHKey( ~id, $Me, ~ecdhSk )
     ]
    variants (modulo AC)
    1. ~ecdhSk
             = ~ecdhSk.23
       theirEcdhPk
             = theirEcdhPk.30
       z     = theirEcdhPk.30^~ecdhSk.23
    
    2. ~ecdhSk
             = ~ecdhSk.26
       theirEcdhPk
             = z.36^inv(~ecdhSk.26)
       z     = z.36
    
    3. ~ecdhSk
             = ~ecdhSk.194
       theirEcdhPk
             = x.382^x.383
       z     = x.382^(~ecdhSk.194*x.383)
    
    4. ~ecdhSk
             = ~ecdhSk.201
       theirEcdhPk
             = x.396^inv((~ecdhSk.201*x.397))
       z     = x.396^inv(x.397)
    
    5. ~ecdhSk
             = ~ecdhSk.201
       theirEcdhPk
             = x.396^(x.397*inv(~ecdhSk.201))
       z     = x.396^x.397
    
    6. ~ecdhSk
             = ~ecdhSk.202
       theirEcdhPk
             = x.397^(x.398*inv((~ecdhSk.202*x.399)))
       z     = x.397^(x.398*inv(x.399))
    
    7. theirEcdhPk
             = DH_neutral
       z     = DH_neutral
  */

rule (modulo E) SendSymmetricRatchet[color=#ff7f50]:
   [
   !IdentityKey( $Me, ~idKey ), Fr( ~msg ),
   Session( ~id, %i, 'S', $Me, ~ecdhSk, ~kemSk, $Them, theirIdPk,
            theirEcdhPk, maybeTheirKemPk, maybeTheirNewKemPk, kemSS, encapPk,
            rootKey, chainKey
   )
   ]
  --[
  PrePQAttack( ), SessionInfo( ~id, (%i%+%1), $Me, $Them ),
  MessageSent( ~id, (%i%+%1), $Me, $Them, ~msg, $AD ),
  SessionSecrets( 'g'^~ecdhSk, theirEcdhPk, kemSS, encapPk, rootKey,
                  chainKey, hkdf(chainKey, 'msg_key')
  ),
  SymmetricRatchet( ),
  KeysUsed( theirIdPk, 'g'^~ecdhSk, theirEcdhPk, theirEcdhPk^~ecdhSk,
            pqpk(~kemSk), maybeTheirKemPk, maybeTheirNewKemPk, kemSS, encapPk,
            rootKey, chainKey, hkdf(chainKey, 'msg_key')
  )
  ]->
   [
   Out( <senc(~msg, hkdf(chainKey, 'msg_key')), $AD, 
         sign(<'msg_sig', senc(~msg, hkdf(chainKey, 'msg_key')), $AD, 
               hkdf(hkdf(chainKey, 'msg_key'), 'msg_key_ind'), 'g'^~ecdhSk, (%i%+%1), 
               <$Me, pk(~idKey), $Them, theirIdPk>, None, None, None>,
              ~idKey), 
         'g'^~ecdhSk, (%i%+%1), hkdf(hkdf(chainKey, 'msg_key'), 'msg_key_ind'), 
         None, None, None>
   ),
   Session( ~id, (%i%+%1), 'S', $Me, ~ecdhSk, ~kemSk, $Them, theirIdPk,
            theirEcdhPk, maybeTheirKemPk, maybeTheirNewKemPk, kemSS, encapPk,
            rootKey, hkdf(chainKey, 'chain_key')
   ),
   !ChainKey( ~id, (%i%+%1), $Me, chainKey ),
   !MessageKey( ~id, (%i%+%1), $Me, hkdf(chainKey, 'msg_key') )
   ]

  // loop breaker: [2]
  /*
  rule (modulo AC) SendSymmetricRatchet[color=#ff7f50]:
     [
     !IdentityKey( $Me, ~idKey ), Fr( ~msg ),
     Session( ~id, %i, 'S', $Me, ~ecdhSk, ~kemSk, $Them, theirIdPk,
              theirEcdhPk, maybeTheirKemPk, maybeTheirNewKemPk, kemSS, encapPk,
              rootKey, chainKey
     )
     ]
    --[
    PrePQAttack( ), SessionInfo( ~id, (%i%+%1), $Me, $Them ),
    MessageSent( ~id, (%i%+%1), $Me, $Them, ~msg, $AD ),
    SessionSecrets( 'g'^~ecdhSk, theirEcdhPk, kemSS, encapPk, rootKey,
                    chainKey, hkdf(chainKey, 'msg_key')
    ),
    SymmetricRatchet( ),
    KeysUsed( theirIdPk, 'g'^~ecdhSk, theirEcdhPk, z, pqpk(~kemSk),
              maybeTheirKemPk, maybeTheirNewKemPk, kemSS, encapPk, rootKey, chainKey,
              hkdf(chainKey, 'msg_key')
    )
    ]->
     [
     Out( <senc(~msg, hkdf(chainKey, 'msg_key')), $AD, 
           sign(<'msg_sig', senc(~msg, hkdf(chainKey, 'msg_key')), $AD, 
                 hkdf(hkdf(chainKey, 'msg_key'), 'msg_key_ind'), 'g'^~ecdhSk, (%i%+%1), 
                 <$Me, pk(~idKey), $Them, theirIdPk>, None, None, None>,
                ~idKey), 
           'g'^~ecdhSk, (%i%+%1), hkdf(hkdf(chainKey, 'msg_key'), 'msg_key_ind'), 
           None, None, None>
     ),
     Session( ~id, (%i%+%1), 'S', $Me, ~ecdhSk, ~kemSk, $Them, theirIdPk,
              theirEcdhPk, maybeTheirKemPk, maybeTheirNewKemPk, kemSS, encapPk,
              rootKey, hkdf(chainKey, 'chain_key')
     ),
     !ChainKey( ~id, (%i%+%1), $Me, chainKey ),
     !MessageKey( ~id, (%i%+%1), $Me, hkdf(chainKey, 'msg_key') )
     ]
    variants (modulo AC)
    1. ~ecdhSk
             = ~ecdhSk.37
       theirEcdhPk
             = theirEcdhPk.48
       z     = theirEcdhPk.48^~ecdhSk.37
    
    2. ~ecdhSk
             = ~ecdhSk.46
       theirEcdhPk
             = z.66^inv(~ecdhSk.46)
       z     = z.66
    
    3. ~ecdhSk
             = ~ecdhSk.209
       theirEcdhPk
             = x.412^x.413
       z     = x.412^(~ecdhSk.209*x.413)
    
    4. ~ecdhSk
             = ~ecdhSk.220
       theirEcdhPk
             = x.434^inv((~ecdhSk.220*x.435))
       z     = x.434^inv(x.435)
    
    5. ~ecdhSk
             = ~ecdhSk.220
       theirEcdhPk
             = x.434^(x.435*inv(~ecdhSk.220))
       z     = x.434^x.435
    
    6. ~ecdhSk
             = ~ecdhSk.221
       theirEcdhPk
             = x.435^(x.436*inv((~ecdhSk.221*x.437)))
       z     = x.435^(x.436*inv(x.437))
    
    7. theirEcdhPk
             = DH_neutral
       z     = DH_neutral
    // loop breaker: [2]
  */

rule (modulo E) ReceiverStart[color=#b4d9ef]:
   [
   Fr( ~id ),
   In( <ciphertext, $AD, signature, theirEcdhPk, %1, msgKeyIndicator, None, 
        Just(kemEncap), Just(preKeyHash)>
   ),
   !IdentityKey( $Me, ~idKey ), !ECDHPreKey( $Me, ~ecdhSk ),
   !KemPreKey( $Me, ~kemSk ),
   IDSQuery( $Them, theirIdPk, sprePk, skemPrePk, preKeySig )
   ]
  --[
  PrePQAttack( ), Neq( theirEcdhPk, DH_neutral ), Neq( theirEcdhPk, 'g' ),
  Neq( decap(kemEncap, ~kemSk), '0' ),
  Eq( verify(signature,
             <'msg_sig', ciphertext, $AD, msgKeyIndicator, theirEcdhPk, %1, 
              <$Them, theirIdPk, $Me, pk(~idKey)>, None, Just(kemEncap), 
              Just(preKeyHash)>,
             theirIdPk),
      true
  ),
  Eq( preKeyHash,
      h(<'g'^~ecdhSk, pqpk(~kemSk), 
         sign(<'nf_reg', pqpk(~kemSk), 'g'^~ecdhSk>, ~idKey)>)
  ),
  Eq( msgKeyIndicator,
      hkdf(hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, '0'),
                                 decap(kemEncap, ~kemSk)),
                            <$Them, theirIdPk, $Me, pk(~idKey)>)),
                'msg_key'),
           'msg_key_ind')
  ),
  SessionInfo( ~id, %1, $Me, $Them ),
  IdentityKeyQueried( ~id, $Them, theirIdPk ), SessionStart( theirIdPk ),
  PublicKeyRatchet( theirIdPk, 'g'^~ecdhSk, theirEcdhPk,
                    theirEcdhPk^~ecdhSk, pqpk(~kemSk), None, None, decap(kemEncap, ~kemSk),
                    pqpk(~kemSk),
                    prefix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, '0'),
                                     decap(kemEncap, ~kemSk)),
                                <$Them, theirIdPk, $Me, pk(~idKey)>))
  ),
  PKRatchet( ), ToReceiver( ),
  MessageReceived( ~id, %1, $Them, $Me,
                   sdec(ciphertext,
                        hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, '0'),
                                              decap(kemEncap, ~kemSk)),
                                         <$Them, theirIdPk, $Me, pk(~idKey)>)),
                             'msg_key')),
                   $AD
  ),
  SessionSecrets( 'g'^~ecdhSk, theirEcdhPk, decap(kemEncap, ~kemSk),
                  pqpk(~kemSk),
                  prefix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, '0'),
                                   decap(kemEncap, ~kemSk)),
                              <$Them, theirIdPk, $Me, pk(~idKey)>)),
                  suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, '0'),
                                   decap(kemEncap, ~kemSk)),
                              <$Them, theirIdPk, $Me, pk(~idKey)>)),
                  hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, '0'),
                                        decap(kemEncap, ~kemSk)),
                                   <$Them, theirIdPk, $Me, pk(~idKey)>)),
                       'msg_key')
  ),
  DecapKemSS( ~id, $Me, $Them, decap(kemEncap, ~kemSk), pqpk(~kemSk) ),
  KeysUsed( theirIdPk, 'g'^~ecdhSk, theirEcdhPk, theirEcdhPk^~ecdhSk,
            pqpk(~kemSk), None, None, decap(kemEncap, ~kemSk), pqpk(~kemSk),
            prefix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, '0'),
                             decap(kemEncap, ~kemSk)),
                        <$Them, theirIdPk, $Me, pk(~idKey)>)),
            suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, '0'),
                             decap(kemEncap, ~kemSk)),
                        <$Them, theirIdPk, $Me, pk(~idKey)>)),
            hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, '0'),
                                  decap(kemEncap, ~kemSk)),
                             <$Them, theirIdPk, $Me, pk(~idKey)>)),
                 'msg_key')
  )
  ]->
   [
   Session( ~id, %1, 'R', $Me, ~ecdhSk, ~kemSk, $Them, theirIdPk,
            theirEcdhPk, None, None, decap(kemEncap, ~kemSk), pqpk(~kemSk),
            prefix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, '0'),
                             decap(kemEncap, ~kemSk)),
                        <$Them, theirIdPk, $Me, pk(~idKey)>)),
            hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, '0'),
                                  decap(kemEncap, ~kemSk)),
                             <$Them, theirIdPk, $Me, pk(~idKey)>)),
                 'chain_key')
   ),
   !RootKey( ~id, %1, $Me, decap(kemEncap, ~kemSk),
             prefix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, '0'),
                              decap(kemEncap, ~kemSk)),
                         <$Them, theirIdPk, $Me, pk(~idKey)>))
   ),
   !ChainKey( ~id, %1, $Me,
              suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, '0'),
                               decap(kemEncap, ~kemSk)),
                          <$Them, theirIdPk, $Me, pk(~idKey)>))
   ),
   !MessageKey( ~id, %1, $Me,
                hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, '0'),
                                      decap(kemEncap, ~kemSk)),
                                 <$Them, theirIdPk, $Me, pk(~idKey)>)),
                     'msg_key')
   )
   ]

  /*
  rule (modulo AC) ReceiverStart[color=#b4d9ef]:
     [
     Fr( ~id ),
     In( <ciphertext, $AD, signature, theirEcdhPk, %1, msgKeyIndicator, None, 
          Just(kemEncap), Just(preKeyHash)>
     ),
     !IdentityKey( $Me, ~idKey ), !ECDHPreKey( $Me, ~ecdhSk ),
     !KemPreKey( $Me, ~kemSk ),
     IDSQuery( $Them, theirIdPk, sprePk, skemPrePk, preKeySig )
     ]
    --[
    PrePQAttack( ), Neq( theirEcdhPk, DH_neutral ), Neq( theirEcdhPk, 'g' ),
    Neq( z, '0' ), Eq( z.2, true ),
    Eq( preKeyHash,
        h(<'g'^~ecdhSk, pqpk(~kemSk), 
           sign(<'nf_reg', pqpk(~kemSk), 'g'^~ecdhSk>, ~idKey)>)
    ),
    Eq( msgKeyIndicator,
        hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.1, '0'), z),
                              <$Them, theirIdPk, $Me, pk(~idKey)>)),
                  'msg_key'),
             'msg_key_ind')
    ),
    SessionInfo( ~id, %1, $Me, $Them ),
    IdentityKeyQueried( ~id, $Them, theirIdPk ), SessionStart( theirIdPk ),
    PublicKeyRatchet( theirIdPk, 'g'^~ecdhSk, theirEcdhPk, z.1, pqpk(~kemSk),
                      None, None, z, pqpk(~kemSk),
                      prefix(hkdf(hkdf(hkdf(z.1, '0'), z),
                                  <$Them, theirIdPk, $Me, pk(~idKey)>))
    ),
    PKRatchet( ), ToReceiver( ),
    MessageReceived( ~id, %1, $Them, $Me, z.3, $AD ),
    SessionSecrets( 'g'^~ecdhSk, theirEcdhPk, z, pqpk(~kemSk),
                    prefix(hkdf(hkdf(hkdf(z.1, '0'), z),
                                <$Them, theirIdPk, $Me, pk(~idKey)>)),
                    suffix(hkdf(hkdf(hkdf(z.1, '0'), z),
                                <$Them, theirIdPk, $Me, pk(~idKey)>)),
                    hkdf(suffix(hkdf(hkdf(hkdf(z.1, '0'), z),
                                     <$Them, theirIdPk, $Me, pk(~idKey)>)),
                         'msg_key')
    ),
    DecapKemSS( ~id, $Me, $Them, z, pqpk(~kemSk) ),
    KeysUsed( theirIdPk, 'g'^~ecdhSk, theirEcdhPk, z.1, pqpk(~kemSk), None,
              None, z, pqpk(~kemSk),
              prefix(hkdf(hkdf(hkdf(z.1, '0'), z),
                          <$Them, theirIdPk, $Me, pk(~idKey)>)),
              suffix(hkdf(hkdf(hkdf(z.1, '0'), z),
                          <$Them, theirIdPk, $Me, pk(~idKey)>)),
              hkdf(suffix(hkdf(hkdf(hkdf(z.1, '0'), z),
                               <$Them, theirIdPk, $Me, pk(~idKey)>)),
                   'msg_key')
    )
    ]->
     [
     Session( ~id, %1, 'R', $Me, ~ecdhSk, ~kemSk, $Them, theirIdPk,
              theirEcdhPk, None, None, z, pqpk(~kemSk),
              prefix(hkdf(hkdf(hkdf(z.1, '0'), z),
                          <$Them, theirIdPk, $Me, pk(~idKey)>)),
              hkdf(suffix(hkdf(hkdf(hkdf(z.1, '0'), z),
                               <$Them, theirIdPk, $Me, pk(~idKey)>)),
                   'chain_key')
     ),
     !RootKey( ~id, %1, $Me, z,
               prefix(hkdf(hkdf(hkdf(z.1, '0'), z),
                           <$Them, theirIdPk, $Me, pk(~idKey)>))
     ),
     !ChainKey( ~id, %1, $Me,
                suffix(hkdf(hkdf(hkdf(z.1, '0'), z),
                            <$Them, theirIdPk, $Me, pk(~idKey)>))
     ),
     !MessageKey( ~id, %1, $Me,
                  hkdf(suffix(hkdf(hkdf(hkdf(z.1, '0'), z),
                                   <$Them, theirIdPk, $Me, pk(~idKey)>)),
                       'msg_key')
     )
     ]
    variants (modulo AC)
     1. $AD   = $AD.47
        $Me   = $Me.48
        $Them = $Them.49
        ~ecdhSk
              = ~ecdhSk.50
        ~idKey
              = ~idKey.52
        ~kemSk
              = ~kemSk.53
        ciphertext
              = ciphertext.54
        kemEncap
              = kemEncap.55
        msgKeyIndicator
              = msgKeyIndicator.56
        preKeyHash
              = preKeyHash.57
        signature
              = signature.59
        theirEcdhPk
              = theirEcdhPk.62
        theirIdPk
              = theirIdPk.63
        z     = decap(kemEncap.55, ~kemSk.53)
        z.1   = theirEcdhPk.62^~ecdhSk.50
        z.2   = verify(signature.59,
                       <'msg_sig', ciphertext.54, $AD.47, msgKeyIndicator.56, theirEcdhPk.62, 
                        %1, <$Them.49, theirIdPk.63, $Me.48, pk(~idKey.52)>, None, 
                        Just(kemEncap.55), Just(preKeyHash.57)>,
                       theirIdPk.63)
        z.3   = sdec(ciphertext.54,
                     hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk.62^~ecdhSk.50, '0'),
                                           decap(kemEncap.55, ~kemSk.53)),
                                      <$Them.49, theirIdPk.63, $Me.48, pk(~idKey.52)>)),
                          'msg_key'))
    
     2. $AD   = $AD.47
        $Me   = $Me.48
        $Them = $Them.49
        ~idKey
              = ~idKey.52
        ~kemSk
              = ~kemSk.53
        ciphertext
              = ciphertext.54
        kemEncap
              = kemEncap.55
        msgKeyIndicator
              = msgKeyIndicator.56
        preKeyHash
              = preKeyHash.57
        signature
              = signature.59
        theirEcdhPk
              = DH_neutral
        theirIdPk
              = theirIdPk.63
        z     = decap(kemEncap.55, ~kemSk.53)
        z.1   = DH_neutral
        z.2   = verify(signature.59,
                       <'msg_sig', ciphertext.54, $AD.47, msgKeyIndicator.56, DH_neutral, %1, 
                        <$Them.49, theirIdPk.63, $Me.48, pk(~idKey.52)>, None, 
                        Just(kemEncap.55), Just(preKeyHash.57)>,
                       theirIdPk.63)
        z.3   = sdec(ciphertext.54,
                     hkdf(suffix(hkdf(hkdf(hkdf(DH_neutral, '0'),
                                           decap(kemEncap.55, ~kemSk.53)),
                                      <$Them.49, theirIdPk.63, $Me.48, pk(~idKey.52)>)),
                          'msg_key'))
    
     3. $AD   = $AD.49
        $Me   = $Me.50
        $Them = $Them.51
        ~ecdhSk
              = ~ecdhSk.52
        ~idKey
              = ~idKey.54
        ~kemSk
              = ~kemSk.55
        ciphertext
              = ciphertext.56
        kemEncap
              = encap(z.67, pqpk(~kemSk.55))
        msgKeyIndicator
              = msgKeyIndicator.58
        preKeyHash
              = preKeyHash.59
        signature
              = signature.61
        theirEcdhPk
              = theirEcdhPk.64
        theirIdPk
              = theirIdPk.65
        z     = z.67
        z.1   = theirEcdhPk.64^~ecdhSk.52
        z.2   = verify(signature.61,
                       <'msg_sig', ciphertext.56, $AD.49, msgKeyIndicator.58, theirEcdhPk.64, 
                        %1, <$Them.51, theirIdPk.65, $Me.50, pk(~idKey.54)>, None, 
                        Just(encap(z.67, pqpk(~kemSk.55))), Just(preKeyHash.59)>,
                       theirIdPk.65)
        z.3   = sdec(ciphertext.56,
                     hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk.64^~ecdhSk.52, '0'), z.67),
                                      <$Them.51, theirIdPk.65, $Me.50, pk(~idKey.54)>)),
                          'msg_key'))
    
     4. $AD   = $AD.49
        $Me   = $Me.50
        $Them = $Them.51
        ~idKey
              = ~idKey.54
        ~kemSk
              = ~kemSk.55
        ciphertext
              = ciphertext.56
        kemEncap
              = encap(z.67, pqpk(~kemSk.55))
        msgKeyIndicator
              = msgKeyIndicator.58
        preKeyHash
              = preKeyHash.59
        signature
              = signature.61
        theirEcdhPk
              = DH_neutral
        theirIdPk
              = theirIdPk.65
        z     = z.67
        z.1   = DH_neutral
        z.2   = verify(signature.61,
                       <'msg_sig', ciphertext.56, $AD.49, msgKeyIndicator.58, DH_neutral, %1, 
                        <$Them.51, theirIdPk.65, $Me.50, pk(~idKey.54)>, None, 
                        Just(encap(z.67, pqpk(~kemSk.55))), Just(preKeyHash.59)>,
                       theirIdPk.65)
        z.3   = sdec(ciphertext.56,
                     hkdf(suffix(hkdf(hkdf(hkdf(DH_neutral, '0'), z.67),
                                      <$Them.51, theirIdPk.65, $Me.50, pk(~idKey.54)>)),
                          'msg_key'))
    
     5. $AD   = $AD.50
        $Me   = $Me.51
        $Them = $Them.52
        ~ecdhSk
              = ~ecdhSk.53
        ~idKey
              = ~idKey.55
        ~kemSk
              = ~kemSk.56
        ciphertext
              = ciphertext.57
        kemEncap
              = kemEncap.58
        msgKeyIndicator
              = msgKeyIndicator.59
        preKeyHash
              = preKeyHash.60
        signature
              = signature.62
        theirEcdhPk
              = z.69^inv(~ecdhSk.53)
        theirIdPk
              = theirIdPk.66
        z     = decap(kemEncap.58, ~kemSk.56)
        z.1   = z.69
        z.2   = verify(signature.62,
                       <'msg_sig', ciphertext.57, $AD.50, msgKeyIndicator.59, 
                        z.69^inv(~ecdhSk.53), %1, 
                        <$Them.52, theirIdPk.66, $Me.51, pk(~idKey.55)>, None, 
                        Just(kemEncap.58), Just(preKeyHash.60)>,
                       theirIdPk.66)
        z.3   = sdec(ciphertext.57,
                     hkdf(suffix(hkdf(hkdf(hkdf(z.69, '0'), decap(kemEncap.58, ~kemSk.56)),
                                      <$Them.52, theirIdPk.66, $Me.51, pk(~idKey.55)>)),
                          'msg_key'))
    
     6. $AD   = $AD.50
        $Me   = $Me.51
        $Them = $Them.52
        ~ecdhSk
              = ~ecdhSk.53
        ~idKey
              = ~idKey.55
        ~kemSk
              = ~kemSk.56
        ciphertext
              = ciphertext.57
        kemEncap
              = encap(z.68, pqpk(~kemSk.56))
        msgKeyIndicator
              = msgKeyIndicator.59
        preKeyHash
              = preKeyHash.60
        signature
              = signature.62
        theirEcdhPk
              = z.69^inv(~ecdhSk.53)
        theirIdPk
              = theirIdPk.66
        z     = z.68
        z.1   = z.69
        z.2   = verify(signature.62,
                       <'msg_sig', ciphertext.57, $AD.50, msgKeyIndicator.59, 
                        z.69^inv(~ecdhSk.53), %1, 
                        <$Them.52, theirIdPk.66, $Me.51, pk(~idKey.55)>, None, 
                        Just(encap(z.68, pqpk(~kemSk.56))), Just(preKeyHash.60)>,
                       theirIdPk.66)
        z.3   = sdec(ciphertext.57,
                     hkdf(suffix(hkdf(hkdf(hkdf(z.69, '0'), z.68),
                                      <$Them.52, theirIdPk.66, $Me.51, pk(~idKey.55)>)),
                          'msg_key'))
    
     7. $AD   = $AD.59
        $Me   = $Me.60
        $Them = $Them.61
        ~ecdhSk
              = ~ecdhSk.62
        ~idKey
              = ~idKey.64
        ~kemSk
              = ~kemSk.65
        ciphertext
              = senc(z.87,
                     hkdf(suffix(hkdf(hkdf(hkdf(z.78, '0'), z.77),
                                      <$Them.61, theirIdPk.75, $Me.60, pk(~idKey.64)>)),
                          'msg_key'))
        kemEncap
              = encap(z.77, pqpk(~kemSk.65))
        msgKeyIndicator
              = msgKeyIndicator.68
        preKeyHash
              = preKeyHash.69
        signature
              = signature.71
        theirEcdhPk
              = z.78^inv(~ecdhSk.62)
        theirIdPk
              = theirIdPk.75
        z     = z.77
        z.1   = z.78
        z.2   = verify(signature.71,
                       <'msg_sig', 
                        senc(z.87,
                             hkdf(suffix(hkdf(hkdf(hkdf(z.78, '0'), z.77),
                                              <$Them.61, theirIdPk.75, $Me.60, pk(~idKey.64)>)),
                                  'msg_key')), 
                        $AD.59, msgKeyIndicator.68, z.78^inv(~ecdhSk.62), %1, 
                        <$Them.61, theirIdPk.75, $Me.60, pk(~idKey.64)>, None, 
                        Just(encap(z.77, pqpk(~kemSk.65))), Just(preKeyHash.69)>,
                       theirIdPk.75)
        z.3   = z.87
    
     8. $AD   = $AD.59
        $Me   = $Me.60
        $Them = $Them.61
        ~ecdhSk
              = ~ecdhSk.62
        ~idKey
              = ~idKey.64
        ~kemSk
              = ~kemSk.65
        ciphertext
              = senc(z.87,
                     hkdf(suffix(hkdf(hkdf(hkdf(z.78, '0'), decap(kemEncap.67, ~kemSk.65)),
                                      <$Them.61, theirIdPk.75, $Me.60, pk(~idKey.64)>)),
                          'msg_key'))
        kemEncap
              = kemEncap.67
        msgKeyIndicator
              = msgKeyIndicator.68
        preKeyHash
              = preKeyHash.69
        signature
              = signature.71
        theirEcdhPk
              = z.78^inv(~ecdhSk.62)
        theirIdPk
              = theirIdPk.75
        z     = decap(kemEncap.67, ~kemSk.65)
        z.1   = z.78
        z.2   = verify(signature.71,
                       <'msg_sig', 
                        senc(z.87,
                             hkdf(suffix(hkdf(hkdf(hkdf(z.78, '0'), decap(kemEncap.67, ~kemSk.65)),
                                              <$Them.61, theirIdPk.75, $Me.60, pk(~idKey.64)>)),
                                  'msg_key')), 
                        $AD.59, msgKeyIndicator.68, z.78^inv(~ecdhSk.62), %1, 
                        <$Them.61, theirIdPk.75, $Me.60, pk(~idKey.64)>, None, 
                        Just(kemEncap.67), Just(preKeyHash.69)>,
                       theirIdPk.75)
        z.3   = z.87
    
     9. $AD   = $AD.59
        $Me   = $Me.60
        $Them = $Them.61
        ~ecdhSk
              = ~ecdhSk.62
        ~idKey
              = ~idKey.64
        ~kemSk
              = ~kemSk.65
        ciphertext
              = senc(z.87,
                     hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk.74^~ecdhSk.62, '0'), z.77),
                                      <$Them.61, theirIdPk.75, $Me.60, pk(~idKey.64)>)),
                          'msg_key'))
        kemEncap
              = encap(z.77, pqpk(~kemSk.65))
        msgKeyIndicator
              = msgKeyIndicator.68
        preKeyHash
              = preKeyHash.69
        signature
              = signature.71
        theirEcdhPk
              = theirEcdhPk.74
        theirIdPk
              = theirIdPk.75
        z     = z.77
        z.1   = theirEcdhPk.74^~ecdhSk.62
        z.2   = verify(signature.71,
                       <'msg_sig', 
                        senc(z.87,
                             hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk.74^~ecdhSk.62, '0'), z.77),
                                              <$Them.61, theirIdPk.75, $Me.60, pk(~idKey.64)>)),
                                  'msg_key')), 
                        $AD.59, msgKeyIndicator.68, theirEcdhPk.74, %1, 
                        <$Them.61, theirIdPk.75, $Me.60, pk(~idKey.64)>, None, 
                        Just(encap(z.77, pqpk(~kemSk.65))), Just(preKeyHash.69)>,
                       theirIdPk.75)
        z.3   = z.87
    
    10. $AD   = $AD.59
        $Me   = $Me.60
        $Them = $Them.61
        ~ecdhSk
              = ~ecdhSk.62
        ~idKey
              = ~idKey.64
        ~kemSk
              = ~kemSk.65
        ciphertext
              = senc(z.87,
                     hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk.74^~ecdhSk.62, '0'),
                                           decap(kemEncap.67, ~kemSk.65)),
                                      <$Them.61, theirIdPk.75, $Me.60, pk(~idKey.64)>)),
                          'msg_key'))
        kemEncap
              = kemEncap.67
        msgKeyIndicator
              = msgKeyIndicator.68
        preKeyHash
              = preKeyHash.69
        signature
              = signature.71
        theirEcdhPk
              = theirEcdhPk.74
        theirIdPk
              = theirIdPk.75
        z     = decap(kemEncap.67, ~kemSk.65)
        z.1   = theirEcdhPk.74^~ecdhSk.62
        z.2   = verify(signature.71,
                       <'msg_sig', 
                        senc(z.87,
                             hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk.74^~ecdhSk.62, '0'),
                                                   decap(kemEncap.67, ~kemSk.65)),
                                              <$Them.61, theirIdPk.75, $Me.60, pk(~idKey.64)>)),
                                  'msg_key')), 
                        $AD.59, msgKeyIndicator.68, theirEcdhPk.74, %1, 
                        <$Them.61, theirIdPk.75, $Me.60, pk(~idKey.64)>, None, 
                        Just(kemEncap.67), Just(preKeyHash.69)>,
                       theirIdPk.75)
        z.3   = z.87
    
    11. $AD   = $AD.59
        $Me   = $Me.60
        $Them = $Them.61
        ~idKey
              = ~idKey.64
        ~kemSk
              = ~kemSk.65
        ciphertext
              = senc(z.87,
                     hkdf(suffix(hkdf(hkdf(hkdf(DH_neutral, '0'), z.77),
                                      <$Them.61, theirIdPk.75, $Me.60, pk(~idKey.64)>)),
                          'msg_key'))
        kemEncap
              = encap(z.77, pqpk(~kemSk.65))
        msgKeyIndicator
              = msgKeyIndicator.68
        preKeyHash
              = preKeyHash.69
        signature
              = signature.71
        theirEcdhPk
              = DH_neutral
        theirIdPk
              = theirIdPk.75
        z     = z.77
        z.1   = DH_neutral
        z.2   = verify(signature.71,
                       <'msg_sig', 
                        senc(z.87,
                             hkdf(suffix(hkdf(hkdf(hkdf(DH_neutral, '0'), z.77),
                                              <$Them.61, theirIdPk.75, $Me.60, pk(~idKey.64)>)),
                                  'msg_key')), 
                        $AD.59, msgKeyIndicator.68, DH_neutral, %1, 
                        <$Them.61, theirIdPk.75, $Me.60, pk(~idKey.64)>, None, 
                        Just(encap(z.77, pqpk(~kemSk.65))), Just(preKeyHash.69)>,
                       theirIdPk.75)
        z.3   = z.87
    
    12. $AD   = $AD.59
        $Me   = $Me.60
        $Them = $Them.61
        ~idKey
              = ~idKey.64
        ~kemSk
              = ~kemSk.65
        ciphertext
              = senc(z.87,
                     hkdf(suffix(hkdf(hkdf(hkdf(DH_neutral, '0'),
                                           decap(kemEncap.67, ~kemSk.65)),
                                      <$Them.61, theirIdPk.75, $Me.60, pk(~idKey.64)>)),
                          'msg_key'))
        kemEncap
              = kemEncap.67
        msgKeyIndicator
              = msgKeyIndicator.68
        preKeyHash
              = preKeyHash.69
        signature
              = signature.71
        theirEcdhPk
              = DH_neutral
        theirIdPk
              = theirIdPk.75
        z     = decap(kemEncap.67, ~kemSk.65)
        z.1   = DH_neutral
        z.2   = verify(signature.71,
                       <'msg_sig', 
                        senc(z.87,
                             hkdf(suffix(hkdf(hkdf(hkdf(DH_neutral, '0'),
                                                   decap(kemEncap.67, ~kemSk.65)),
                                              <$Them.61, theirIdPk.75, $Me.60, pk(~idKey.64)>)),
                                  'msg_key')), 
                        $AD.59, msgKeyIndicator.68, DH_neutral, %1, 
                        <$Them.61, theirIdPk.75, $Me.60, pk(~idKey.64)>, None, 
                        Just(kemEncap.67), Just(preKeyHash.69)>,
                       theirIdPk.75)
        z.3   = z.87
    
    13. $AD   = $AD.334
        $Me   = $Me.335
        $Them = $Them.336
        ~ecdhSk
              = ~ecdhSk.337
        ~idKey
              = ~idKey.339
        ~kemSk
              = ~kemSk.340
        ciphertext
              = ciphertext.341
        kemEncap
              = kemEncap.342
        msgKeyIndicator
              = msgKeyIndicator.343
        preKeyHash
              = preKeyHash.344
        signature
              = signature.346
        theirEcdhPk
              = x.665^x.666
        theirIdPk
              = theirIdPk.350
        z     = decap(kemEncap.342, ~kemSk.340)
        z.1   = x.665^(~ecdhSk.337*x.666)
        z.2   = verify(signature.346,
                       <'msg_sig', ciphertext.341, $AD.334, msgKeyIndicator.343, x.665^x.666, 
                        %1, <$Them.336, theirIdPk.350, $Me.335, pk(~idKey.339)>, None, 
                        Just(kemEncap.342), Just(preKeyHash.344)>,
                       theirIdPk.350)
        z.3   = sdec(ciphertext.341,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.665^(~ecdhSk.337*x.666), '0'),
                                           decap(kemEncap.342, ~kemSk.340)),
                                      <$Them.336, theirIdPk.350, $Me.335, pk(~idKey.339)>)),
                          'msg_key'))
    
    14. $AD   = $AD.341
        $Me   = $Me.342
        $Them = $Them.343
        ~ecdhSk
              = ~ecdhSk.344
        ~idKey
              = ~idKey.346
        ~kemSk
              = ~kemSk.347
        ciphertext
              = senc(z.369,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.679^x.680, '0'), z.359),
                                      <$Them.343, theirIdPk.357, $Me.342, pk(~idKey.346)>)),
                          'msg_key'))
        kemEncap
              = encap(z.359, pqpk(~kemSk.347))
        msgKeyIndicator
              = msgKeyIndicator.350
        preKeyHash
              = preKeyHash.351
        signature
              = signature.353
        theirEcdhPk
              = x.679^(x.680*inv(~ecdhSk.344))
        theirIdPk
              = theirIdPk.357
        z     = z.359
        z.1   = x.679^x.680
        z.2   = verify(signature.353,
                       <'msg_sig', 
                        senc(z.369,
                             hkdf(suffix(hkdf(hkdf(hkdf(x.679^x.680, '0'), z.359),
                                              <$Them.343, theirIdPk.357, $Me.342, pk(~idKey.346)>)),
                                  'msg_key')), 
                        $AD.341, msgKeyIndicator.350, x.679^(x.680*inv(~ecdhSk.344)), %1, 
                        <$Them.343, theirIdPk.357, $Me.342, pk(~idKey.346)>, None, 
                        Just(encap(z.359, pqpk(~kemSk.347))), Just(preKeyHash.351)>,
                       theirIdPk.357)
        z.3   = z.369
    
    15. $AD   = $AD.341
        $Me   = $Me.342
        $Them = $Them.343
        ~ecdhSk
              = ~ecdhSk.344
        ~idKey
              = ~idKey.346
        ~kemSk
              = ~kemSk.347
        ciphertext
              = senc(z.369,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.679^x.680, '0'),
                                           decap(kemEncap.349, ~kemSk.347)),
                                      <$Them.343, theirIdPk.357, $Me.342, pk(~idKey.346)>)),
                          'msg_key'))
        kemEncap
              = kemEncap.349
        msgKeyIndicator
              = msgKeyIndicator.350
        preKeyHash
              = preKeyHash.351
        signature
              = signature.353
        theirEcdhPk
              = x.679^(x.680*inv(~ecdhSk.344))
        theirIdPk
              = theirIdPk.357
        z     = decap(kemEncap.349, ~kemSk.347)
        z.1   = x.679^x.680
        z.2   = verify(signature.353,
                       <'msg_sig', 
                        senc(z.369,
                             hkdf(suffix(hkdf(hkdf(hkdf(x.679^x.680, '0'),
                                                   decap(kemEncap.349, ~kemSk.347)),
                                              <$Them.343, theirIdPk.357, $Me.342, pk(~idKey.346)>)),
                                  'msg_key')), 
                        $AD.341, msgKeyIndicator.350, x.679^(x.680*inv(~ecdhSk.344)), %1, 
                        <$Them.343, theirIdPk.357, $Me.342, pk(~idKey.346)>, None, 
                        Just(kemEncap.349), Just(preKeyHash.351)>,
                       theirIdPk.357)
        z.3   = z.369
    
    16. $AD   = $AD.341
        $Me   = $Me.342
        $Them = $Them.343
        ~ecdhSk
              = ~ecdhSk.344
        ~idKey
              = ~idKey.346
        ~kemSk
              = ~kemSk.347
        ciphertext
              = senc(z.369,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.679^inv(x.680), '0'), z.359),
                                      <$Them.343, theirIdPk.357, $Me.342, pk(~idKey.346)>)),
                          'msg_key'))
        kemEncap
              = encap(z.359, pqpk(~kemSk.347))
        msgKeyIndicator
              = msgKeyIndicator.350
        preKeyHash
              = preKeyHash.351
        signature
              = signature.353
        theirEcdhPk
              = x.679^inv((~ecdhSk.344*x.680))
        theirIdPk
              = theirIdPk.357
        z     = z.359
        z.1   = x.679^inv(x.680)
        z.2   = verify(signature.353,
                       <'msg_sig', 
                        senc(z.369,
                             hkdf(suffix(hkdf(hkdf(hkdf(x.679^inv(x.680), '0'), z.359),
                                              <$Them.343, theirIdPk.357, $Me.342, pk(~idKey.346)>)),
                                  'msg_key')), 
                        $AD.341, msgKeyIndicator.350, x.679^inv((~ecdhSk.344*x.680)), %1, 
                        <$Them.343, theirIdPk.357, $Me.342, pk(~idKey.346)>, None, 
                        Just(encap(z.359, pqpk(~kemSk.347))), Just(preKeyHash.351)>,
                       theirIdPk.357)
        z.3   = z.369
    
    17. $AD   = $AD.341
        $Me   = $Me.342
        $Them = $Them.343
        ~ecdhSk
              = ~ecdhSk.344
        ~idKey
              = ~idKey.346
        ~kemSk
              = ~kemSk.347
        ciphertext
              = senc(z.369,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.679^inv(x.680), '0'),
                                           decap(kemEncap.349, ~kemSk.347)),
                                      <$Them.343, theirIdPk.357, $Me.342, pk(~idKey.346)>)),
                          'msg_key'))
        kemEncap
              = kemEncap.349
        msgKeyIndicator
              = msgKeyIndicator.350
        preKeyHash
              = preKeyHash.351
        signature
              = signature.353
        theirEcdhPk
              = x.679^inv((~ecdhSk.344*x.680))
        theirIdPk
              = theirIdPk.357
        z     = decap(kemEncap.349, ~kemSk.347)
        z.1   = x.679^inv(x.680)
        z.2   = verify(signature.353,
                       <'msg_sig', 
                        senc(z.369,
                             hkdf(suffix(hkdf(hkdf(hkdf(x.679^inv(x.680), '0'),
                                                   decap(kemEncap.349, ~kemSk.347)),
                                              <$Them.343, theirIdPk.357, $Me.342, pk(~idKey.346)>)),
                                  'msg_key')), 
                        $AD.341, msgKeyIndicator.350, x.679^inv((~ecdhSk.344*x.680)), %1, 
                        <$Them.343, theirIdPk.357, $Me.342, pk(~idKey.346)>, None, 
                        Just(kemEncap.349), Just(preKeyHash.351)>,
                       theirIdPk.357)
        z.3   = z.369
    
    18. $AD   = $AD.341
        $Me   = $Me.342
        $Them = $Them.343
        ~ecdhSk
              = ~ecdhSk.344
        ~idKey
              = ~idKey.346
        ~kemSk
              = ~kemSk.347
        ciphertext
              = senc(z.369,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.679^(~ecdhSk.344*x.680), '0'), z.359),
                                      <$Them.343, theirIdPk.357, $Me.342, pk(~idKey.346)>)),
                          'msg_key'))
        kemEncap
              = encap(z.359, pqpk(~kemSk.347))
        msgKeyIndicator
              = msgKeyIndicator.350
        preKeyHash
              = preKeyHash.351
        signature
              = signature.353
        theirEcdhPk
              = x.679^x.680
        theirIdPk
              = theirIdPk.357
        z     = z.359
        z.1   = x.679^(~ecdhSk.344*x.680)
        z.2   = verify(signature.353,
                       <'msg_sig', 
                        senc(z.369,
                             hkdf(suffix(hkdf(hkdf(hkdf(x.679^(~ecdhSk.344*x.680), '0'), z.359),
                                              <$Them.343, theirIdPk.357, $Me.342, pk(~idKey.346)>)),
                                  'msg_key')), 
                        $AD.341, msgKeyIndicator.350, x.679^x.680, %1, 
                        <$Them.343, theirIdPk.357, $Me.342, pk(~idKey.346)>, None, 
                        Just(encap(z.359, pqpk(~kemSk.347))), Just(preKeyHash.351)>,
                       theirIdPk.357)
        z.3   = z.369
    
    19. $AD   = $AD.341
        $Me   = $Me.342
        $Them = $Them.343
        ~ecdhSk
              = ~ecdhSk.344
        ~idKey
              = ~idKey.346
        ~kemSk
              = ~kemSk.347
        ciphertext
              = senc(z.369,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.679^(~ecdhSk.344*x.680), '0'),
                                           decap(kemEncap.349, ~kemSk.347)),
                                      <$Them.343, theirIdPk.357, $Me.342, pk(~idKey.346)>)),
                          'msg_key'))
        kemEncap
              = kemEncap.349
        msgKeyIndicator
              = msgKeyIndicator.350
        preKeyHash
              = preKeyHash.351
        signature
              = signature.353
        theirEcdhPk
              = x.679^x.680
        theirIdPk
              = theirIdPk.357
        z     = decap(kemEncap.349, ~kemSk.347)
        z.1   = x.679^(~ecdhSk.344*x.680)
        z.2   = verify(signature.353,
                       <'msg_sig', 
                        senc(z.369,
                             hkdf(suffix(hkdf(hkdf(hkdf(x.679^(~ecdhSk.344*x.680), '0'),
                                                   decap(kemEncap.349, ~kemSk.347)),
                                              <$Them.343, theirIdPk.357, $Me.342, pk(~idKey.346)>)),
                                  'msg_key')), 
                        $AD.341, msgKeyIndicator.350, x.679^x.680, %1, 
                        <$Them.343, theirIdPk.357, $Me.342, pk(~idKey.346)>, None, 
                        Just(kemEncap.349), Just(preKeyHash.351)>,
                       theirIdPk.357)
        z.3   = z.369
    
    20. $AD   = $AD.342
        $Me   = $Me.343
        $Them = $Them.344
        ~ecdhSk
              = ~ecdhSk.345
        ~idKey
              = ~idKey.347
        ~kemSk
              = ~kemSk.348
        ciphertext
              = senc(z.370,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.680^(x.681*inv(x.682)), '0'), z.360),
                                      <$Them.344, theirIdPk.358, $Me.343, pk(~idKey.347)>)),
                          'msg_key'))
        kemEncap
              = encap(z.360, pqpk(~kemSk.348))
        msgKeyIndicator
              = msgKeyIndicator.351
        preKeyHash
              = preKeyHash.352
        signature
              = signature.354
        theirEcdhPk
              = x.680^(x.681*inv((~ecdhSk.345*x.682)))
        theirIdPk
              = theirIdPk.358
        z     = z.360
        z.1   = x.680^(x.681*inv(x.682))
        z.2   = verify(signature.354,
                       <'msg_sig', 
                        senc(z.370,
                             hkdf(suffix(hkdf(hkdf(hkdf(x.680^(x.681*inv(x.682)), '0'), z.360),
                                              <$Them.344, theirIdPk.358, $Me.343, pk(~idKey.347)>)),
                                  'msg_key')), 
                        $AD.342, msgKeyIndicator.351, x.680^(x.681*inv((~ecdhSk.345*x.682))), 
                        %1, <$Them.344, theirIdPk.358, $Me.343, pk(~idKey.347)>, None, 
                        Just(encap(z.360, pqpk(~kemSk.348))), Just(preKeyHash.352)>,
                       theirIdPk.358)
        z.3   = z.370
    
    21. $AD   = $AD.342
        $Me   = $Me.343
        $Them = $Them.344
        ~ecdhSk
              = ~ecdhSk.345
        ~idKey
              = ~idKey.347
        ~kemSk
              = ~kemSk.348
        ciphertext
              = senc(z.370,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.680^(x.681*inv(x.682)), '0'),
                                           decap(kemEncap.350, ~kemSk.348)),
                                      <$Them.344, theirIdPk.358, $Me.343, pk(~idKey.347)>)),
                          'msg_key'))
        kemEncap
              = kemEncap.350
        msgKeyIndicator
              = msgKeyIndicator.351
        preKeyHash
              = preKeyHash.352
        signature
              = signature.354
        theirEcdhPk
              = x.680^(x.681*inv((~ecdhSk.345*x.682)))
        theirIdPk
              = theirIdPk.358
        z     = decap(kemEncap.350, ~kemSk.348)
        z.1   = x.680^(x.681*inv(x.682))
        z.2   = verify(signature.354,
                       <'msg_sig', 
                        senc(z.370,
                             hkdf(suffix(hkdf(hkdf(hkdf(x.680^(x.681*inv(x.682)), '0'),
                                                   decap(kemEncap.350, ~kemSk.348)),
                                              <$Them.344, theirIdPk.358, $Me.343, pk(~idKey.347)>)),
                                  'msg_key')), 
                        $AD.342, msgKeyIndicator.351, x.680^(x.681*inv((~ecdhSk.345*x.682))), 
                        %1, <$Them.344, theirIdPk.358, $Me.343, pk(~idKey.347)>, None, 
                        Just(kemEncap.350), Just(preKeyHash.352)>,
                       theirIdPk.358)
        z.3   = z.370
    
    22. $AD   = $AD.342
        $Me   = $Me.343
        $Them = $Them.344
        ~idKey
              = ~idKey.347
        ~kemSk
              = ~kemSk.348
        ciphertext
              = senc(z.370,
                     hkdf(suffix(hkdf(hkdf(hkdf(DH_neutral, '0'), z.360),
                                      <$Them.344, pk(x.682), $Me.343, pk(~idKey.347)>)),
                          'msg_key'))
        kemEncap
              = encap(z.360, pqpk(~kemSk.348))
        msgKeyIndicator
              = msgKeyIndicator.351
        preKeyHash
              = preKeyHash.352
        signature
              = sign(<'msg_sig', 
                      senc(z.370,
                           hkdf(suffix(hkdf(hkdf(hkdf(DH_neutral, '0'), z.360),
                                            <$Them.344, pk(x.682), $Me.343, pk(~idKey.347)>)),
                                'msg_key')), 
                      $AD.342, msgKeyIndicator.351, DH_neutral, %1, 
                      <$Them.344, pk(x.682), $Me.343, pk(~idKey.347)>, None, 
                      Just(encap(z.360, pqpk(~kemSk.348))), Just(preKeyHash.352)>,
                     x.682)
        theirEcdhPk
              = DH_neutral
        theirIdPk
              = pk(x.682)
        z     = z.360
        z.1   = DH_neutral
        z.2   = true
        z.3   = z.370
    
    23. $AD   = $AD.342
        $Me   = $Me.343
        $Them = $Them.344
        ~idKey
              = ~idKey.347
        ~kemSk
              = ~kemSk.348
        ciphertext
              = senc(z.370,
                     hkdf(suffix(hkdf(hkdf(hkdf(DH_neutral, '0'),
                                           decap(kemEncap.350, ~kemSk.348)),
                                      <$Them.344, pk(x.682), $Me.343, pk(~idKey.347)>)),
                          'msg_key'))
        kemEncap
              = kemEncap.350
        msgKeyIndicator
              = msgKeyIndicator.351
        preKeyHash
              = preKeyHash.352
        signature
              = sign(<'msg_sig', 
                      senc(z.370,
                           hkdf(suffix(hkdf(hkdf(hkdf(DH_neutral, '0'),
                                                 decap(kemEncap.350, ~kemSk.348)),
                                            <$Them.344, pk(x.682), $Me.343, pk(~idKey.347)>)),
                                'msg_key')), 
                      $AD.342, msgKeyIndicator.351, DH_neutral, %1, 
                      <$Them.344, pk(x.682), $Me.343, pk(~idKey.347)>, None, 
                      Just(kemEncap.350), Just(preKeyHash.352)>,
                     x.682)
        theirEcdhPk
              = DH_neutral
        theirIdPk
              = pk(x.682)
        z     = decap(kemEncap.350, ~kemSk.348)
        z.1   = DH_neutral
        z.2   = true
        z.3   = z.370
    
    24. $AD   = $AD.343
        $Me   = $Me.344
        $Them = $Them.345
        ~ecdhSk
              = ~ecdhSk.346
        ~idKey
              = ~idKey.348
        ~kemSk
              = ~kemSk.349
        ciphertext
              = ciphertext.350
        kemEncap
              = encap(z.361, pqpk(~kemSk.349))
        msgKeyIndicator
              = msgKeyIndicator.352
        preKeyHash
              = preKeyHash.353
        signature
              = signature.355
        theirEcdhPk
              = x.683^x.684
        theirIdPk
              = theirIdPk.359
        z     = z.361
        z.1   = x.683^(~ecdhSk.346*x.684)
        z.2   = verify(signature.355,
                       <'msg_sig', ciphertext.350, $AD.343, msgKeyIndicator.352, x.683^x.684, 
                        %1, <$Them.345, theirIdPk.359, $Me.344, pk(~idKey.348)>, None, 
                        Just(encap(z.361, pqpk(~kemSk.349))), Just(preKeyHash.353)>,
                       theirIdPk.359)
        z.3   = sdec(ciphertext.350,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.683^(~ecdhSk.346*x.684), '0'), z.361),
                                      <$Them.345, theirIdPk.359, $Me.344, pk(~idKey.348)>)),
                          'msg_key'))
    
    25. $AD   = $AD.343
        $Me   = $Me.344
        $Them = $Them.345
        ~ecdhSk
              = ~ecdhSk.346
        ~idKey
              = ~idKey.348
        ~kemSk
              = ~kemSk.349
        ciphertext
              = senc(z.371,
                     hkdf(suffix(hkdf(hkdf(hkdf(z.362, '0'), z.361),
                                      <$Them.345, pk(x.684), $Me.344, pk(~idKey.348)>)),
                          'msg_key'))
        kemEncap
              = encap(z.361, pqpk(~kemSk.349))
        msgKeyIndicator
              = msgKeyIndicator.352
        preKeyHash
              = preKeyHash.353
        signature
              = sign(<'msg_sig', 
                      senc(z.371,
                           hkdf(suffix(hkdf(hkdf(hkdf(z.362, '0'), z.361),
                                            <$Them.345, pk(x.684), $Me.344, pk(~idKey.348)>)),
                                'msg_key')), 
                      $AD.343, msgKeyIndicator.352, z.362^inv(~ecdhSk.346), %1, 
                      <$Them.345, pk(x.684), $Me.344, pk(~idKey.348)>, None, 
                      Just(encap(z.361, pqpk(~kemSk.349))), Just(preKeyHash.353)>,
                     x.684)
        theirEcdhPk
              = z.362^inv(~ecdhSk.346)
        theirIdPk
              = pk(x.684)
        z     = z.361
        z.1   = z.362
        z.2   = true
        z.3   = z.371
    
    26. $AD   = $AD.343
        $Me   = $Me.344
        $Them = $Them.345
        ~ecdhSk
              = ~ecdhSk.346
        ~idKey
              = ~idKey.348
        ~kemSk
              = ~kemSk.349
        ciphertext
              = senc(z.371,
                     hkdf(suffix(hkdf(hkdf(hkdf(z.362, '0'), decap(kemEncap.351, ~kemSk.349)),
                                      <$Them.345, pk(x.684), $Me.344, pk(~idKey.348)>)),
                          'msg_key'))
        kemEncap
              = kemEncap.351
        msgKeyIndicator
              = msgKeyIndicator.352
        preKeyHash
              = preKeyHash.353
        signature
              = sign(<'msg_sig', 
                      senc(z.371,
                           hkdf(suffix(hkdf(hkdf(hkdf(z.362, '0'), decap(kemEncap.351, ~kemSk.349)),
                                            <$Them.345, pk(x.684), $Me.344, pk(~idKey.348)>)),
                                'msg_key')), 
                      $AD.343, msgKeyIndicator.352, z.362^inv(~ecdhSk.346), %1, 
                      <$Them.345, pk(x.684), $Me.344, pk(~idKey.348)>, None, 
                      Just(kemEncap.351), Just(preKeyHash.353)>,
                     x.684)
        theirEcdhPk
              = z.362^inv(~ecdhSk.346)
        theirIdPk
              = pk(x.684)
        z     = decap(kemEncap.351, ~kemSk.349)
        z.1   = z.362
        z.2   = true
        z.3   = z.371
    
    27. $AD   = $AD.343
        $Me   = $Me.344
        $Them = $Them.345
        ~ecdhSk
              = ~ecdhSk.346
        ~idKey
              = ~idKey.348
        ~kemSk
              = ~kemSk.349
        ciphertext
              = senc(z.371,
                     hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk.358^~ecdhSk.346, '0'), z.361),
                                      <$Them.345, pk(x.684), $Me.344, pk(~idKey.348)>)),
                          'msg_key'))
        kemEncap
              = encap(z.361, pqpk(~kemSk.349))
        msgKeyIndicator
              = msgKeyIndicator.352
        preKeyHash
              = preKeyHash.353
        signature
              = sign(<'msg_sig', 
                      senc(z.371,
                           hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk.358^~ecdhSk.346, '0'), z.361),
                                            <$Them.345, pk(x.684), $Me.344, pk(~idKey.348)>)),
                                'msg_key')), 
                      $AD.343, msgKeyIndicator.352, theirEcdhPk.358, %1, 
                      <$Them.345, pk(x.684), $Me.344, pk(~idKey.348)>, None, 
                      Just(encap(z.361, pqpk(~kemSk.349))), Just(preKeyHash.353)>,
                     x.684)
        theirEcdhPk
              = theirEcdhPk.358
        theirIdPk
              = pk(x.684)
        z     = z.361
        z.1   = theirEcdhPk.358^~ecdhSk.346
        z.2   = true
        z.3   = z.371
    
    28. $AD   = $AD.343
        $Me   = $Me.344
        $Them = $Them.345
        ~ecdhSk
              = ~ecdhSk.346
        ~idKey
              = ~idKey.348
        ~kemSk
              = ~kemSk.349
        ciphertext
              = senc(z.371,
                     hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk.358^~ecdhSk.346, '0'),
                                           decap(kemEncap.351, ~kemSk.349)),
                                      <$Them.345, pk(x.684), $Me.344, pk(~idKey.348)>)),
                          'msg_key'))
        kemEncap
              = kemEncap.351
        msgKeyIndicator
              = msgKeyIndicator.352
        preKeyHash
              = preKeyHash.353
        signature
              = sign(<'msg_sig', 
                      senc(z.371,
                           hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk.358^~ecdhSk.346, '0'),
                                                 decap(kemEncap.351, ~kemSk.349)),
                                            <$Them.345, pk(x.684), $Me.344, pk(~idKey.348)>)),
                                'msg_key')), 
                      $AD.343, msgKeyIndicator.352, theirEcdhPk.358, %1, 
                      <$Them.345, pk(x.684), $Me.344, pk(~idKey.348)>, None, 
                      Just(kemEncap.351), Just(preKeyHash.353)>,
                     x.684)
        theirEcdhPk
              = theirEcdhPk.358
        theirIdPk
              = pk(x.684)
        z     = decap(kemEncap.351, ~kemSk.349)
        z.1   = theirEcdhPk.358^~ecdhSk.346
        z.2   = true
        z.3   = z.371
    
    29. $AD   = $AD.344
        $Me   = $Me.345
        $Them = $Them.346
        ~ecdhSk
              = ~ecdhSk.347
        ~idKey
              = ~idKey.349
        ~kemSk
              = ~kemSk.350
        ciphertext
              = senc(z.372,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.683^x.684, '0'), z.362),
                                      <$Them.346, pk(x.686), $Me.345, pk(~idKey.349)>)),
                          'msg_key'))
        kemEncap
              = encap(z.362, pqpk(~kemSk.350))
        msgKeyIndicator
              = msgKeyIndicator.353
        preKeyHash
              = preKeyHash.354
        signature
              = sign(<'msg_sig', 
                      senc(z.372,
                           hkdf(suffix(hkdf(hkdf(hkdf(x.683^x.684, '0'), z.362),
                                            <$Them.346, pk(x.686), $Me.345, pk(~idKey.349)>)),
                                'msg_key')), 
                      $AD.344, msgKeyIndicator.353, x.683^(x.684*inv(~ecdhSk.347)), %1, 
                      <$Them.346, pk(x.686), $Me.345, pk(~idKey.349)>, None, 
                      Just(encap(z.362, pqpk(~kemSk.350))), Just(preKeyHash.354)>,
                     x.686)
        theirEcdhPk
              = x.683^(x.684*inv(~ecdhSk.347))
        theirIdPk
              = pk(x.686)
        z     = z.362
        z.1   = x.683^x.684
        z.2   = true
        z.3   = z.372
    
    30. $AD   = $AD.344
        $Me   = $Me.345
        $Them = $Them.346
        ~ecdhSk
              = ~ecdhSk.347
        ~idKey
              = ~idKey.349
        ~kemSk
              = ~kemSk.350
        ciphertext
              = senc(z.372,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.683^x.684, '0'),
                                           decap(kemEncap.352, ~kemSk.350)),
                                      <$Them.346, pk(x.686), $Me.345, pk(~idKey.349)>)),
                          'msg_key'))
        kemEncap
              = kemEncap.352
        msgKeyIndicator
              = msgKeyIndicator.353
        preKeyHash
              = preKeyHash.354
        signature
              = sign(<'msg_sig', 
                      senc(z.372,
                           hkdf(suffix(hkdf(hkdf(hkdf(x.683^x.684, '0'),
                                                 decap(kemEncap.352, ~kemSk.350)),
                                            <$Them.346, pk(x.686), $Me.345, pk(~idKey.349)>)),
                                'msg_key')), 
                      $AD.344, msgKeyIndicator.353, x.683^(x.684*inv(~ecdhSk.347)), %1, 
                      <$Them.346, pk(x.686), $Me.345, pk(~idKey.349)>, None, 
                      Just(kemEncap.352), Just(preKeyHash.354)>,
                     x.686)
        theirEcdhPk
              = x.683^(x.684*inv(~ecdhSk.347))
        theirIdPk
              = pk(x.686)
        z     = decap(kemEncap.352, ~kemSk.350)
        z.1   = x.683^x.684
        z.2   = true
        z.3   = z.372
    
    31. $AD   = $AD.344
        $Me   = $Me.345
        $Them = $Them.346
        ~ecdhSk
              = ~ecdhSk.347
        ~idKey
              = ~idKey.349
        ~kemSk
              = ~kemSk.350
        ciphertext
              = senc(z.372,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.683^inv(x.684), '0'), z.362),
                                      <$Them.346, pk(x.686), $Me.345, pk(~idKey.349)>)),
                          'msg_key'))
        kemEncap
              = encap(z.362, pqpk(~kemSk.350))
        msgKeyIndicator
              = msgKeyIndicator.353
        preKeyHash
              = preKeyHash.354
        signature
              = sign(<'msg_sig', 
                      senc(z.372,
                           hkdf(suffix(hkdf(hkdf(hkdf(x.683^inv(x.684), '0'), z.362),
                                            <$Them.346, pk(x.686), $Me.345, pk(~idKey.349)>)),
                                'msg_key')), 
                      $AD.344, msgKeyIndicator.353, x.683^inv((~ecdhSk.347*x.684)), %1, 
                      <$Them.346, pk(x.686), $Me.345, pk(~idKey.349)>, None, 
                      Just(encap(z.362, pqpk(~kemSk.350))), Just(preKeyHash.354)>,
                     x.686)
        theirEcdhPk
              = x.683^inv((~ecdhSk.347*x.684))
        theirIdPk
              = pk(x.686)
        z     = z.362
        z.1   = x.683^inv(x.684)
        z.2   = true
        z.3   = z.372
    
    32. $AD   = $AD.344
        $Me   = $Me.345
        $Them = $Them.346
        ~ecdhSk
              = ~ecdhSk.347
        ~idKey
              = ~idKey.349
        ~kemSk
              = ~kemSk.350
        ciphertext
              = senc(z.372,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.683^inv(x.684), '0'),
                                           decap(kemEncap.352, ~kemSk.350)),
                                      <$Them.346, pk(x.686), $Me.345, pk(~idKey.349)>)),
                          'msg_key'))
        kemEncap
              = kemEncap.352
        msgKeyIndicator
              = msgKeyIndicator.353
        preKeyHash
              = preKeyHash.354
        signature
              = sign(<'msg_sig', 
                      senc(z.372,
                           hkdf(suffix(hkdf(hkdf(hkdf(x.683^inv(x.684), '0'),
                                                 decap(kemEncap.352, ~kemSk.350)),
                                            <$Them.346, pk(x.686), $Me.345, pk(~idKey.349)>)),
                                'msg_key')), 
                      $AD.344, msgKeyIndicator.353, x.683^inv((~ecdhSk.347*x.684)), %1, 
                      <$Them.346, pk(x.686), $Me.345, pk(~idKey.349)>, None, 
                      Just(kemEncap.352), Just(preKeyHash.354)>,
                     x.686)
        theirEcdhPk
              = x.683^inv((~ecdhSk.347*x.684))
        theirIdPk
              = pk(x.686)
        z     = decap(kemEncap.352, ~kemSk.350)
        z.1   = x.683^inv(x.684)
        z.2   = true
        z.3   = z.372
    
    33. $AD   = $AD.344
        $Me   = $Me.345
        $Them = $Them.346
        ~ecdhSk
              = ~ecdhSk.347
        ~idKey
              = ~idKey.349
        ~kemSk
              = ~kemSk.350
        ciphertext
              = senc(z.372,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.683^(~ecdhSk.347*x.684), '0'), z.362),
                                      <$Them.346, pk(x.686), $Me.345, pk(~idKey.349)>)),
                          'msg_key'))
        kemEncap
              = encap(z.362, pqpk(~kemSk.350))
        msgKeyIndicator
              = msgKeyIndicator.353
        preKeyHash
              = preKeyHash.354
        signature
              = sign(<'msg_sig', 
                      senc(z.372,
                           hkdf(suffix(hkdf(hkdf(hkdf(x.683^(~ecdhSk.347*x.684), '0'), z.362),
                                            <$Them.346, pk(x.686), $Me.345, pk(~idKey.349)>)),
                                'msg_key')), 
                      $AD.344, msgKeyIndicator.353, x.683^x.684, %1, 
                      <$Them.346, pk(x.686), $Me.345, pk(~idKey.349)>, None, 
                      Just(encap(z.362, pqpk(~kemSk.350))), Just(preKeyHash.354)>,
                     x.686)
        theirEcdhPk
              = x.683^x.684
        theirIdPk
              = pk(x.686)
        z     = z.362
        z.1   = x.683^(~ecdhSk.347*x.684)
        z.2   = true
        z.3   = z.372
    
    34. $AD   = $AD.344
        $Me   = $Me.345
        $Them = $Them.346
        ~ecdhSk
              = ~ecdhSk.347
        ~idKey
              = ~idKey.349
        ~kemSk
              = ~kemSk.350
        ciphertext
              = senc(z.372,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.683^(~ecdhSk.347*x.684), '0'),
                                           decap(kemEncap.352, ~kemSk.350)),
                                      <$Them.346, pk(x.686), $Me.345, pk(~idKey.349)>)),
                          'msg_key'))
        kemEncap
              = kemEncap.352
        msgKeyIndicator
              = msgKeyIndicator.353
        preKeyHash
              = preKeyHash.354
        signature
              = sign(<'msg_sig', 
                      senc(z.372,
                           hkdf(suffix(hkdf(hkdf(hkdf(x.683^(~ecdhSk.347*x.684), '0'),
                                                 decap(kemEncap.352, ~kemSk.350)),
                                            <$Them.346, pk(x.686), $Me.345, pk(~idKey.349)>)),
                                'msg_key')), 
                      $AD.344, msgKeyIndicator.353, x.683^x.684, %1, 
                      <$Them.346, pk(x.686), $Me.345, pk(~idKey.349)>, None, 
                      Just(kemEncap.352), Just(preKeyHash.354)>,
                     x.686)
        theirEcdhPk
              = x.683^x.684
        theirIdPk
              = pk(x.686)
        z     = decap(kemEncap.352, ~kemSk.350)
        z.1   = x.683^(~ecdhSk.347*x.684)
        z.2   = true
        z.3   = z.372
    
    35. $AD   = $AD.345
        $Me   = $Me.346
        $Them = $Them.347
        ~ecdhSk
              = ~ecdhSk.348
        ~idKey
              = ~idKey.350
        ~kemSk
              = ~kemSk.351
        ciphertext
              = senc(z.373,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.684^(x.685*inv(x.686)), '0'), z.363),
                                      <$Them.347, pk(x.688), $Me.346, pk(~idKey.350)>)),
                          'msg_key'))
        kemEncap
              = encap(z.363, pqpk(~kemSk.351))
        msgKeyIndicator
              = msgKeyIndicator.354
        preKeyHash
              = preKeyHash.355
        signature
              = sign(<'msg_sig', 
                      senc(z.373,
                           hkdf(suffix(hkdf(hkdf(hkdf(x.684^(x.685*inv(x.686)), '0'), z.363),
                                            <$Them.347, pk(x.688), $Me.346, pk(~idKey.350)>)),
                                'msg_key')), 
                      $AD.345, msgKeyIndicator.354, x.684^(x.685*inv((~ecdhSk.348*x.686))), 
                      %1, <$Them.347, pk(x.688), $Me.346, pk(~idKey.350)>, None, 
                      Just(encap(z.363, pqpk(~kemSk.351))), Just(preKeyHash.355)>,
                     x.688)
        theirEcdhPk
              = x.684^(x.685*inv((~ecdhSk.348*x.686)))
        theirIdPk
              = pk(x.688)
        z     = z.363
        z.1   = x.684^(x.685*inv(x.686))
        z.2   = true
        z.3   = z.373
    
    36. $AD   = $AD.345
        $Me   = $Me.346
        $Them = $Them.347
        ~ecdhSk
              = ~ecdhSk.348
        ~idKey
              = ~idKey.350
        ~kemSk
              = ~kemSk.351
        ciphertext
              = senc(z.373,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.684^(x.685*inv(x.686)), '0'),
                                           decap(kemEncap.353, ~kemSk.351)),
                                      <$Them.347, pk(x.688), $Me.346, pk(~idKey.350)>)),
                          'msg_key'))
        kemEncap
              = kemEncap.353
        msgKeyIndicator
              = msgKeyIndicator.354
        preKeyHash
              = preKeyHash.355
        signature
              = sign(<'msg_sig', 
                      senc(z.373,
                           hkdf(suffix(hkdf(hkdf(hkdf(x.684^(x.685*inv(x.686)), '0'),
                                                 decap(kemEncap.353, ~kemSk.351)),
                                            <$Them.347, pk(x.688), $Me.346, pk(~idKey.350)>)),
                                'msg_key')), 
                      $AD.345, msgKeyIndicator.354, x.684^(x.685*inv((~ecdhSk.348*x.686))), 
                      %1, <$Them.347, pk(x.688), $Me.346, pk(~idKey.350)>, None, 
                      Just(kemEncap.353), Just(preKeyHash.355)>,
                     x.688)
        theirEcdhPk
              = x.684^(x.685*inv((~ecdhSk.348*x.686)))
        theirIdPk
              = pk(x.688)
        z     = decap(kemEncap.353, ~kemSk.351)
        z.1   = x.684^(x.685*inv(x.686))
        z.2   = true
        z.3   = z.373
    
    37. $AD   = $AD.345
        $Me   = $Me.346
        $Them = $Them.347
        ~idKey
              = ~idKey.350
        ~kemSk
              = ~kemSk.351
        ciphertext
              = ciphertext.352
        kemEncap
              = kemEncap.353
        msgKeyIndicator
              = msgKeyIndicator.354
        preKeyHash
              = preKeyHash.355
        signature
              = sign(<'msg_sig', ciphertext.352, $AD.345, msgKeyIndicator.354, 
                      DH_neutral, %1, <$Them.347, pk(x.688), $Me.346, pk(~idKey.350)>, None, 
                      Just(kemEncap.353), Just(preKeyHash.355)>,
                     x.688)
        theirEcdhPk
              = DH_neutral
        theirIdPk
              = pk(x.688)
        z     = decap(kemEncap.353, ~kemSk.351)
        z.1   = DH_neutral
        z.2   = true
        z.3   = sdec(ciphertext.352,
                     hkdf(suffix(hkdf(hkdf(hkdf(DH_neutral, '0'),
                                           decap(kemEncap.353, ~kemSk.351)),
                                      <$Them.347, pk(x.688), $Me.346, pk(~idKey.350)>)),
                          'msg_key'))
    
    38. $AD   = $AD.345
        $Me   = $Me.346
        $Them = $Them.347
        ~idKey
              = ~idKey.350
        ~kemSk
              = ~kemSk.351
        ciphertext
              = ciphertext.352
        kemEncap
              = encap(z.363, pqpk(~kemSk.351))
        msgKeyIndicator
              = msgKeyIndicator.354
        preKeyHash
              = preKeyHash.355
        signature
              = sign(<'msg_sig', ciphertext.352, $AD.345, msgKeyIndicator.354, 
                      DH_neutral, %1, <$Them.347, pk(x.688), $Me.346, pk(~idKey.350)>, None, 
                      Just(encap(z.363, pqpk(~kemSk.351))), Just(preKeyHash.355)>,
                     x.688)
        theirEcdhPk
              = DH_neutral
        theirIdPk
              = pk(x.688)
        z     = z.363
        z.1   = DH_neutral
        z.2   = true
        z.3   = sdec(ciphertext.352,
                     hkdf(suffix(hkdf(hkdf(hkdf(DH_neutral, '0'), z.363),
                                      <$Them.347, pk(x.688), $Me.346, pk(~idKey.350)>)),
                          'msg_key'))
    
    39. $AD   = $AD.346
        $Me   = $Me.347
        $Them = $Them.348
        ~ecdhSk
              = ~ecdhSk.349
        ~idKey
              = ~idKey.351
        ~kemSk
              = ~kemSk.352
        ciphertext
              = ciphertext.353
        kemEncap
              = kemEncap.354
        msgKeyIndicator
              = msgKeyIndicator.355
        preKeyHash
              = preKeyHash.356
        signature
              = signature.358
        theirEcdhPk
              = x.689^inv((~ecdhSk.349*x.690))
        theirIdPk
              = theirIdPk.362
        z     = decap(kemEncap.354, ~kemSk.352)
        z.1   = x.689^inv(x.690)
        z.2   = verify(signature.358,
                       <'msg_sig', ciphertext.353, $AD.346, msgKeyIndicator.355, 
                        x.689^inv((~ecdhSk.349*x.690)), %1, 
                        <$Them.348, theirIdPk.362, $Me.347, pk(~idKey.351)>, None, 
                        Just(kemEncap.354), Just(preKeyHash.356)>,
                       theirIdPk.362)
        z.3   = sdec(ciphertext.353,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.689^inv(x.690), '0'),
                                           decap(kemEncap.354, ~kemSk.352)),
                                      <$Them.348, theirIdPk.362, $Me.347, pk(~idKey.351)>)),
                          'msg_key'))
    
    40. $AD   = $AD.346
        $Me   = $Me.347
        $Them = $Them.348
        ~ecdhSk
              = ~ecdhSk.349
        ~idKey
              = ~idKey.351
        ~kemSk
              = ~kemSk.352
        ciphertext
              = ciphertext.353
        kemEncap
              = kemEncap.354
        msgKeyIndicator
              = msgKeyIndicator.355
        preKeyHash
              = preKeyHash.356
        signature
              = signature.358
        theirEcdhPk
              = x.689^(x.690*inv(~ecdhSk.349))
        theirIdPk
              = theirIdPk.362
        z     = decap(kemEncap.354, ~kemSk.352)
        z.1   = x.689^x.690
        z.2   = verify(signature.358,
                       <'msg_sig', ciphertext.353, $AD.346, msgKeyIndicator.355, 
                        x.689^(x.690*inv(~ecdhSk.349)), %1, 
                        <$Them.348, theirIdPk.362, $Me.347, pk(~idKey.351)>, None, 
                        Just(kemEncap.354), Just(preKeyHash.356)>,
                       theirIdPk.362)
        z.3   = sdec(ciphertext.353,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.689^x.690, '0'),
                                           decap(kemEncap.354, ~kemSk.352)),
                                      <$Them.348, theirIdPk.362, $Me.347, pk(~idKey.351)>)),
                          'msg_key'))
    
    41. $AD   = $AD.346
        $Me   = $Me.347
        $Them = $Them.348
        ~ecdhSk
              = ~ecdhSk.349
        ~idKey
              = ~idKey.351
        ~kemSk
              = ~kemSk.352
        ciphertext
              = ciphertext.353
        kemEncap
              = kemEncap.354
        msgKeyIndicator
              = msgKeyIndicator.355
        preKeyHash
              = preKeyHash.356
        signature
              = sign(<'msg_sig', ciphertext.353, $AD.346, msgKeyIndicator.355, 
                      theirEcdhPk.361, %1, <$Them.348, pk(x.690), $Me.347, pk(~idKey.351)>, 
                      None, Just(kemEncap.354), Just(preKeyHash.356)>,
                     x.690)
        theirEcdhPk
              = theirEcdhPk.361
        theirIdPk
              = pk(x.690)
        z     = decap(kemEncap.354, ~kemSk.352)
        z.1   = theirEcdhPk.361^~ecdhSk.349
        z.2   = true
        z.3   = sdec(ciphertext.353,
                     hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk.361^~ecdhSk.349, '0'),
                                           decap(kemEncap.354, ~kemSk.352)),
                                      <$Them.348, pk(x.690), $Me.347, pk(~idKey.351)>)),
                          'msg_key'))
    
    42. $AD   = $AD.346
        $Me   = $Me.347
        $Them = $Them.348
        ~ecdhSk
              = ~ecdhSk.349
        ~idKey
              = ~idKey.351
        ~kemSk
              = ~kemSk.352
        ciphertext
              = ciphertext.353
        kemEncap
              = kemEncap.354
        msgKeyIndicator
              = msgKeyIndicator.355
        preKeyHash
              = preKeyHash.356
        signature
              = sign(<'msg_sig', ciphertext.353, $AD.346, msgKeyIndicator.355, 
                      z.365^inv(~ecdhSk.349), %1, 
                      <$Them.348, pk(x.690), $Me.347, pk(~idKey.351)>, None, 
                      Just(kemEncap.354), Just(preKeyHash.356)>,
                     x.690)
        theirEcdhPk
              = z.365^inv(~ecdhSk.349)
        theirIdPk
              = pk(x.690)
        z     = decap(kemEncap.354, ~kemSk.352)
        z.1   = z.365
        z.2   = true
        z.3   = sdec(ciphertext.353,
                     hkdf(suffix(hkdf(hkdf(hkdf(z.365, '0'), decap(kemEncap.354, ~kemSk.352)),
                                      <$Them.348, pk(x.690), $Me.347, pk(~idKey.351)>)),
                          'msg_key'))
    
    43. $AD   = $AD.346
        $Me   = $Me.347
        $Them = $Them.348
        ~ecdhSk
              = ~ecdhSk.349
        ~idKey
              = ~idKey.351
        ~kemSk
              = ~kemSk.352
        ciphertext
              = ciphertext.353
        kemEncap
              = encap(z.364, pqpk(~kemSk.352))
        msgKeyIndicator
              = msgKeyIndicator.355
        preKeyHash
              = preKeyHash.356
        signature
              = signature.358
        theirEcdhPk
              = x.689^inv((~ecdhSk.349*x.690))
        theirIdPk
              = theirIdPk.362
        z     = z.364
        z.1   = x.689^inv(x.690)
        z.2   = verify(signature.358,
                       <'msg_sig', ciphertext.353, $AD.346, msgKeyIndicator.355, 
                        x.689^inv((~ecdhSk.349*x.690)), %1, 
                        <$Them.348, theirIdPk.362, $Me.347, pk(~idKey.351)>, None, 
                        Just(encap(z.364, pqpk(~kemSk.352))), Just(preKeyHash.356)>,
                       theirIdPk.362)
        z.3   = sdec(ciphertext.353,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.689^inv(x.690), '0'), z.364),
                                      <$Them.348, theirIdPk.362, $Me.347, pk(~idKey.351)>)),
                          'msg_key'))
    
    44. $AD   = $AD.346
        $Me   = $Me.347
        $Them = $Them.348
        ~ecdhSk
              = ~ecdhSk.349
        ~idKey
              = ~idKey.351
        ~kemSk
              = ~kemSk.352
        ciphertext
              = ciphertext.353
        kemEncap
              = encap(z.364, pqpk(~kemSk.352))
        msgKeyIndicator
              = msgKeyIndicator.355
        preKeyHash
              = preKeyHash.356
        signature
              = signature.358
        theirEcdhPk
              = x.689^(x.690*inv(~ecdhSk.349))
        theirIdPk
              = theirIdPk.362
        z     = z.364
        z.1   = x.689^x.690
        z.2   = verify(signature.358,
                       <'msg_sig', ciphertext.353, $AD.346, msgKeyIndicator.355, 
                        x.689^(x.690*inv(~ecdhSk.349)), %1, 
                        <$Them.348, theirIdPk.362, $Me.347, pk(~idKey.351)>, None, 
                        Just(encap(z.364, pqpk(~kemSk.352))), Just(preKeyHash.356)>,
                       theirIdPk.362)
        z.3   = sdec(ciphertext.353,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.689^x.690, '0'), z.364),
                                      <$Them.348, theirIdPk.362, $Me.347, pk(~idKey.351)>)),
                          'msg_key'))
    
    45. $AD   = $AD.346
        $Me   = $Me.347
        $Them = $Them.348
        ~ecdhSk
              = ~ecdhSk.349
        ~idKey
              = ~idKey.351
        ~kemSk
              = ~kemSk.352
        ciphertext
              = ciphertext.353
        kemEncap
              = encap(z.364, pqpk(~kemSk.352))
        msgKeyIndicator
              = msgKeyIndicator.355
        preKeyHash
              = preKeyHash.356
        signature
              = sign(<'msg_sig', ciphertext.353, $AD.346, msgKeyIndicator.355, 
                      theirEcdhPk.361, %1, <$Them.348, pk(x.690), $Me.347, pk(~idKey.351)>, 
                      None, Just(encap(z.364, pqpk(~kemSk.352))), Just(preKeyHash.356)>,
                     x.690)
        theirEcdhPk
              = theirEcdhPk.361
        theirIdPk
              = pk(x.690)
        z     = z.364
        z.1   = theirEcdhPk.361^~ecdhSk.349
        z.2   = true
        z.3   = sdec(ciphertext.353,
                     hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk.361^~ecdhSk.349, '0'), z.364),
                                      <$Them.348, pk(x.690), $Me.347, pk(~idKey.351)>)),
                          'msg_key'))
    
    46. $AD   = $AD.346
        $Me   = $Me.347
        $Them = $Them.348
        ~ecdhSk
              = ~ecdhSk.349
        ~idKey
              = ~idKey.351
        ~kemSk
              = ~kemSk.352
        ciphertext
              = ciphertext.353
        kemEncap
              = encap(z.364, pqpk(~kemSk.352))
        msgKeyIndicator
              = msgKeyIndicator.355
        preKeyHash
              = preKeyHash.356
        signature
              = sign(<'msg_sig', ciphertext.353, $AD.346, msgKeyIndicator.355, 
                      z.365^inv(~ecdhSk.349), %1, 
                      <$Them.348, pk(x.690), $Me.347, pk(~idKey.351)>, None, 
                      Just(encap(z.364, pqpk(~kemSk.352))), Just(preKeyHash.356)>,
                     x.690)
        theirEcdhPk
              = z.365^inv(~ecdhSk.349)
        theirIdPk
              = pk(x.690)
        z     = z.364
        z.1   = z.365
        z.2   = true
        z.3   = sdec(ciphertext.353,
                     hkdf(suffix(hkdf(hkdf(hkdf(z.365, '0'), z.364),
                                      <$Them.348, pk(x.690), $Me.347, pk(~idKey.351)>)),
                          'msg_key'))
    
    47. $AD   = $AD.347
        $Me   = $Me.348
        $Them = $Them.349
        ~ecdhSk
              = ~ecdhSk.350
        ~idKey
              = ~idKey.352
        ~kemSk
              = ~kemSk.353
        ciphertext
              = ciphertext.354
        kemEncap
              = kemEncap.355
        msgKeyIndicator
              = msgKeyIndicator.356
        preKeyHash
              = preKeyHash.357
        signature
              = signature.359
        theirEcdhPk
              = x.690^(x.691*inv((~ecdhSk.350*x.692)))
        theirIdPk
              = theirIdPk.363
        z     = decap(kemEncap.355, ~kemSk.353)
        z.1   = x.690^(x.691*inv(x.692))
        z.2   = verify(signature.359,
                       <'msg_sig', ciphertext.354, $AD.347, msgKeyIndicator.356, 
                        x.690^(x.691*inv((~ecdhSk.350*x.692))), %1, 
                        <$Them.349, theirIdPk.363, $Me.348, pk(~idKey.352)>, None, 
                        Just(kemEncap.355), Just(preKeyHash.357)>,
                       theirIdPk.363)
        z.3   = sdec(ciphertext.354,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.690^(x.691*inv(x.692)), '0'),
                                           decap(kemEncap.355, ~kemSk.353)),
                                      <$Them.349, theirIdPk.363, $Me.348, pk(~idKey.352)>)),
                          'msg_key'))
    
    48. $AD   = $AD.347
        $Me   = $Me.348
        $Them = $Them.349
        ~ecdhSk
              = ~ecdhSk.350
        ~idKey
              = ~idKey.352
        ~kemSk
              = ~kemSk.353
        ciphertext
              = ciphertext.354
        kemEncap
              = kemEncap.355
        msgKeyIndicator
              = msgKeyIndicator.356
        preKeyHash
              = preKeyHash.357
        signature
              = sign(<'msg_sig', ciphertext.354, $AD.347, msgKeyIndicator.356, 
                      x.690^x.691, %1, <$Them.349, pk(x.692), $Me.348, pk(~idKey.352)>, None, 
                      Just(kemEncap.355), Just(preKeyHash.357)>,
                     x.692)
        theirEcdhPk
              = x.690^x.691
        theirIdPk
              = pk(x.692)
        z     = decap(kemEncap.355, ~kemSk.353)
        z.1   = x.690^(~ecdhSk.350*x.691)
        z.2   = true
        z.3   = sdec(ciphertext.354,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.690^(~ecdhSk.350*x.691), '0'),
                                           decap(kemEncap.355, ~kemSk.353)),
                                      <$Them.349, pk(x.692), $Me.348, pk(~idKey.352)>)),
                          'msg_key'))
    
    49. $AD   = $AD.347
        $Me   = $Me.348
        $Them = $Them.349
        ~ecdhSk
              = ~ecdhSk.350
        ~idKey
              = ~idKey.352
        ~kemSk
              = ~kemSk.353
        ciphertext
              = ciphertext.354
        kemEncap
              = kemEncap.355
        msgKeyIndicator
              = msgKeyIndicator.356
        preKeyHash
              = preKeyHash.357
        signature
              = sign(<'msg_sig', ciphertext.354, $AD.347, msgKeyIndicator.356, 
                      x.690^inv((~ecdhSk.350*x.691)), %1, 
                      <$Them.349, pk(x.692), $Me.348, pk(~idKey.352)>, None, 
                      Just(kemEncap.355), Just(preKeyHash.357)>,
                     x.692)
        theirEcdhPk
              = x.690^inv((~ecdhSk.350*x.691))
        theirIdPk
              = pk(x.692)
        z     = decap(kemEncap.355, ~kemSk.353)
        z.1   = x.690^inv(x.691)
        z.2   = true
        z.3   = sdec(ciphertext.354,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.690^inv(x.691), '0'),
                                           decap(kemEncap.355, ~kemSk.353)),
                                      <$Them.349, pk(x.692), $Me.348, pk(~idKey.352)>)),
                          'msg_key'))
    
    50. $AD   = $AD.347
        $Me   = $Me.348
        $Them = $Them.349
        ~ecdhSk
              = ~ecdhSk.350
        ~idKey
              = ~idKey.352
        ~kemSk
              = ~kemSk.353
        ciphertext
              = ciphertext.354
        kemEncap
              = kemEncap.355
        msgKeyIndicator
              = msgKeyIndicator.356
        preKeyHash
              = preKeyHash.357
        signature
              = sign(<'msg_sig', ciphertext.354, $AD.347, msgKeyIndicator.356, 
                      x.690^(x.691*inv(~ecdhSk.350)), %1, 
                      <$Them.349, pk(x.692), $Me.348, pk(~idKey.352)>, None, 
                      Just(kemEncap.355), Just(preKeyHash.357)>,
                     x.692)
        theirEcdhPk
              = x.690^(x.691*inv(~ecdhSk.350))
        theirIdPk
              = pk(x.692)
        z     = decap(kemEncap.355, ~kemSk.353)
        z.1   = x.690^x.691
        z.2   = true
        z.3   = sdec(ciphertext.354,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.690^x.691, '0'),
                                           decap(kemEncap.355, ~kemSk.353)),
                                      <$Them.349, pk(x.692), $Me.348, pk(~idKey.352)>)),
                          'msg_key'))
    
    51. $AD   = $AD.347
        $Me   = $Me.348
        $Them = $Them.349
        ~ecdhSk
              = ~ecdhSk.350
        ~idKey
              = ~idKey.352
        ~kemSk
              = ~kemSk.353
        ciphertext
              = ciphertext.354
        kemEncap
              = encap(z.365, pqpk(~kemSk.353))
        msgKeyIndicator
              = msgKeyIndicator.356
        preKeyHash
              = preKeyHash.357
        signature
              = signature.359
        theirEcdhPk
              = x.690^(x.691*inv((~ecdhSk.350*x.692)))
        theirIdPk
              = theirIdPk.363
        z     = z.365
        z.1   = x.690^(x.691*inv(x.692))
        z.2   = verify(signature.359,
                       <'msg_sig', ciphertext.354, $AD.347, msgKeyIndicator.356, 
                        x.690^(x.691*inv((~ecdhSk.350*x.692))), %1, 
                        <$Them.349, theirIdPk.363, $Me.348, pk(~idKey.352)>, None, 
                        Just(encap(z.365, pqpk(~kemSk.353))), Just(preKeyHash.357)>,
                       theirIdPk.363)
        z.3   = sdec(ciphertext.354,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.690^(x.691*inv(x.692)), '0'), z.365),
                                      <$Them.349, theirIdPk.363, $Me.348, pk(~idKey.352)>)),
                          'msg_key'))
    
    52. $AD   = $AD.347
        $Me   = $Me.348
        $Them = $Them.349
        ~ecdhSk
              = ~ecdhSk.350
        ~idKey
              = ~idKey.352
        ~kemSk
              = ~kemSk.353
        ciphertext
              = ciphertext.354
        kemEncap
              = encap(z.365, pqpk(~kemSk.353))
        msgKeyIndicator
              = msgKeyIndicator.356
        preKeyHash
              = preKeyHash.357
        signature
              = sign(<'msg_sig', ciphertext.354, $AD.347, msgKeyIndicator.356, 
                      x.690^x.691, %1, <$Them.349, pk(x.692), $Me.348, pk(~idKey.352)>, None, 
                      Just(encap(z.365, pqpk(~kemSk.353))), Just(preKeyHash.357)>,
                     x.692)
        theirEcdhPk
              = x.690^x.691
        theirIdPk
              = pk(x.692)
        z     = z.365
        z.1   = x.690^(~ecdhSk.350*x.691)
        z.2   = true
        z.3   = sdec(ciphertext.354,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.690^(~ecdhSk.350*x.691), '0'), z.365),
                                      <$Them.349, pk(x.692), $Me.348, pk(~idKey.352)>)),
                          'msg_key'))
    
    53. $AD   = $AD.347
        $Me   = $Me.348
        $Them = $Them.349
        ~ecdhSk
              = ~ecdhSk.350
        ~idKey
              = ~idKey.352
        ~kemSk
              = ~kemSk.353
        ciphertext
              = ciphertext.354
        kemEncap
              = encap(z.365, pqpk(~kemSk.353))
        msgKeyIndicator
              = msgKeyIndicator.356
        preKeyHash
              = preKeyHash.357
        signature
              = sign(<'msg_sig', ciphertext.354, $AD.347, msgKeyIndicator.356, 
                      x.690^inv((~ecdhSk.350*x.691)), %1, 
                      <$Them.349, pk(x.692), $Me.348, pk(~idKey.352)>, None, 
                      Just(encap(z.365, pqpk(~kemSk.353))), Just(preKeyHash.357)>,
                     x.692)
        theirEcdhPk
              = x.690^inv((~ecdhSk.350*x.691))
        theirIdPk
              = pk(x.692)
        z     = z.365
        z.1   = x.690^inv(x.691)
        z.2   = true
        z.3   = sdec(ciphertext.354,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.690^inv(x.691), '0'), z.365),
                                      <$Them.349, pk(x.692), $Me.348, pk(~idKey.352)>)),
                          'msg_key'))
    
    54. $AD   = $AD.347
        $Me   = $Me.348
        $Them = $Them.349
        ~ecdhSk
              = ~ecdhSk.350
        ~idKey
              = ~idKey.352
        ~kemSk
              = ~kemSk.353
        ciphertext
              = ciphertext.354
        kemEncap
              = encap(z.365, pqpk(~kemSk.353))
        msgKeyIndicator
              = msgKeyIndicator.356
        preKeyHash
              = preKeyHash.357
        signature
              = sign(<'msg_sig', ciphertext.354, $AD.347, msgKeyIndicator.356, 
                      x.690^(x.691*inv(~ecdhSk.350)), %1, 
                      <$Them.349, pk(x.692), $Me.348, pk(~idKey.352)>, None, 
                      Just(encap(z.365, pqpk(~kemSk.353))), Just(preKeyHash.357)>,
                     x.692)
        theirEcdhPk
              = x.690^(x.691*inv(~ecdhSk.350))
        theirIdPk
              = pk(x.692)
        z     = z.365
        z.1   = x.690^x.691
        z.2   = true
        z.3   = sdec(ciphertext.354,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.690^x.691, '0'), z.365),
                                      <$Them.349, pk(x.692), $Me.348, pk(~idKey.352)>)),
                          'msg_key'))
    
    55. $AD   = $AD.348
        $Me   = $Me.349
        $Them = $Them.350
        ~ecdhSk
              = ~ecdhSk.351
        ~idKey
              = ~idKey.353
        ~kemSk
              = ~kemSk.354
        ciphertext
              = ciphertext.355
        kemEncap
              = kemEncap.356
        msgKeyIndicator
              = msgKeyIndicator.357
        preKeyHash
              = preKeyHash.358
        signature
              = sign(<'msg_sig', ciphertext.355, $AD.348, msgKeyIndicator.357, 
                      x.691^(x.692*inv((~ecdhSk.351*x.693))), %1, 
                      <$Them.350, pk(x.694), $Me.349, pk(~idKey.353)>, None, 
                      Just(kemEncap.356), Just(preKeyHash.358)>,
                     x.694)
        theirEcdhPk
              = x.691^(x.692*inv((~ecdhSk.351*x.693)))
        theirIdPk
              = pk(x.694)
        z     = decap(kemEncap.356, ~kemSk.354)
        z.1   = x.691^(x.692*inv(x.693))
        z.2   = true
        z.3   = sdec(ciphertext.355,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.691^(x.692*inv(x.693)), '0'),
                                           decap(kemEncap.356, ~kemSk.354)),
                                      <$Them.350, pk(x.694), $Me.349, pk(~idKey.353)>)),
                          'msg_key'))
    
    56. $AD   = $AD.348
        $Me   = $Me.349
        $Them = $Them.350
        ~ecdhSk
              = ~ecdhSk.351
        ~idKey
              = ~idKey.353
        ~kemSk
              = ~kemSk.354
        ciphertext
              = ciphertext.355
        kemEncap
              = encap(z.366, pqpk(~kemSk.354))
        msgKeyIndicator
              = msgKeyIndicator.357
        preKeyHash
              = preKeyHash.358
        signature
              = sign(<'msg_sig', ciphertext.355, $AD.348, msgKeyIndicator.357, 
                      x.691^(x.692*inv((~ecdhSk.351*x.693))), %1, 
                      <$Them.350, pk(x.694), $Me.349, pk(~idKey.353)>, None, 
                      Just(encap(z.366, pqpk(~kemSk.354))), Just(preKeyHash.358)>,
                     x.694)
        theirEcdhPk
              = x.691^(x.692*inv((~ecdhSk.351*x.693)))
        theirIdPk
              = pk(x.694)
        z     = z.366
        z.1   = x.691^(x.692*inv(x.693))
        z.2   = true
        z.3   = sdec(ciphertext.355,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.691^(x.692*inv(x.693)), '0'), z.366),
                                      <$Them.350, pk(x.694), $Me.349, pk(~idKey.353)>)),
                          'msg_key'))
  */

rule (modulo E) ReceiveSymmetricRatchet[color=#ff7f50]:
   [
   !IdentityKey( $Me, ~idKey ),
   Session( ~id, %i, 'R', $Me, ~ecdhSk, ~kemSk, $Them, theirIdPk,
            theirEcdhPk, maybeTheirKemPk, maybeTheirNewKemPk, kemSS, encapPk,
            rootKey, chainKey
   ),
   In( <ciphertext, $AD, signature, theirEcdhPk, (%i%+%1), msgKeyIndicator, 
        None, None, None>
   )
   ]
  --[
  PrePQAttack( ), Neq( theirEcdhPk, DH_neutral ), Neq( theirEcdhPk, 'g' ),
  Eq( msgKeyIndicator, hkdf(hkdf(chainKey, 'msg_key'), 'msg_key_ind') ),
  Eq( verify(signature,
             <'msg_sig', ciphertext, $AD, msgKeyIndicator, theirEcdhPk, (%i%+%1), 
              <$Them, theirIdPk, $Me, pk(~idKey)>, None, None, None>,
             theirIdPk),
      true
  ),
  SessionInfo( ~id, (%i%+%1), $Me, $Them ),
  MessageReceived( ~id, (%i%+%1), $Them, $Me,
                   sdec(ciphertext, hkdf(chainKey, 'msg_key')), $AD
  ),
  SessionSecrets( 'g'^~ecdhSk, theirEcdhPk, kemSS, encapPk, rootKey,
                  chainKey, hkdf(chainKey, 'msg_key')
  ),
  SymmetricRatchet( ),
  KeysUsed( theirIdPk, 'g'^~ecdhSk, theirEcdhPk, theirEcdhPk^~ecdhSk,
            pqpk(~kemSk), maybeTheirKemPk, maybeTheirNewKemPk, kemSS, encapPk,
            rootKey, chainKey, hkdf(chainKey, 'msg_key')
  )
  ]->
   [
   Session( ~id, (%i%+%1), 'R', $Me, ~ecdhSk, ~kemSk, $Them, theirIdPk,
            theirEcdhPk, maybeTheirKemPk, maybeTheirNewKemPk, kemSS, encapPk,
            rootKey, hkdf(chainKey, 'chain_key')
   ),
   !ChainKey( ~id, (%i%+%1), $Me, chainKey ),
   !MessageKey( ~id, (%i%+%1), $Me, hkdf(chainKey, 'msg_key') )
   ]

  // loop breaker: [1]
  /*
  rule (modulo AC) ReceiveSymmetricRatchet[color=#ff7f50]:
     [
     !IdentityKey( $Me, ~idKey ),
     Session( ~id, %i, 'R', $Me, ~ecdhSk, ~kemSk, $Them, theirIdPk,
              theirEcdhPk, maybeTheirKemPk, maybeTheirNewKemPk, kemSS, encapPk,
              rootKey, chainKey
     ),
     In( <ciphertext, $AD, signature, theirEcdhPk, (%i%+%1), msgKeyIndicator, 
          None, None, None>
     )
     ]
    --[
    PrePQAttack( ), Neq( theirEcdhPk, DH_neutral ), Neq( theirEcdhPk, 'g' ),
    Eq( msgKeyIndicator, hkdf(hkdf(chainKey, 'msg_key'), 'msg_key_ind') ),
    Eq( z, true ), SessionInfo( ~id, (%i%+%1), $Me, $Them ),
    MessageReceived( ~id, (%i%+%1), $Them, $Me, z.1, $AD ),
    SessionSecrets( 'g'^~ecdhSk, theirEcdhPk, kemSS, encapPk, rootKey,
                    chainKey, hkdf(chainKey, 'msg_key')
    ),
    SymmetricRatchet( ),
    KeysUsed( theirIdPk, 'g'^~ecdhSk, theirEcdhPk, z.2, pqpk(~kemSk),
              maybeTheirKemPk, maybeTheirNewKemPk, kemSS, encapPk, rootKey, chainKey,
              hkdf(chainKey, 'msg_key')
    )
    ]->
     [
     Session( ~id, (%i%+%1), 'R', $Me, ~ecdhSk, ~kemSk, $Them, theirIdPk,
              theirEcdhPk, maybeTheirKemPk, maybeTheirNewKemPk, kemSS, encapPk,
              rootKey, hkdf(chainKey, 'chain_key')
     ),
     !ChainKey( ~id, (%i%+%1), $Me, chainKey ),
     !MessageKey( ~id, (%i%+%1), $Me, hkdf(chainKey, 'msg_key') )
     ]
    variants (modulo AC)
     1. $AD   = $AD.48
        $Me   = $Me.49
        $Them = $Them.50
        ~ecdhSk
              = ~ecdhSk.51
        ~idKey
              = ~idKey.53
        chainKey
              = chainKey.55
        ciphertext
              = ciphertext.56
        msgKeyIndicator
              = msgKeyIndicator.61
        signature
              = signature.63
        theirEcdhPk
              = theirEcdhPk.64
        theirIdPk
              = theirIdPk.65
        z     = verify(signature.63,
                       <'msg_sig', ciphertext.56, $AD.48, msgKeyIndicator.61, theirEcdhPk.64, 
                        (%i.66%+%1), <$Them.50, theirIdPk.65, $Me.49, pk(~idKey.53)>, None, 
                        None, None>,
                       theirIdPk.65)
        %i    = %i.66
        z.1   = sdec(ciphertext.56, hkdf(chainKey.55, 'msg_key'))
        z.2   = theirEcdhPk.64^~ecdhSk.51
    
     2. $AD   = $AD.48
        $Me   = $Me.49
        $Them = $Them.50
        ~idKey
              = ~idKey.53
        chainKey
              = chainKey.55
        ciphertext
              = ciphertext.56
        msgKeyIndicator
              = msgKeyIndicator.61
        signature
              = signature.63
        theirEcdhPk
              = DH_neutral
        theirIdPk
              = theirIdPk.65
        z     = verify(signature.63,
                       <'msg_sig', ciphertext.56, $AD.48, msgKeyIndicator.61, DH_neutral, 
                        (%i.66%+%1), <$Them.50, theirIdPk.65, $Me.49, pk(~idKey.53)>, None, 
                        None, None>,
                       theirIdPk.65)
        %i    = %i.66
        z.1   = sdec(ciphertext.56, hkdf(chainKey.55, 'msg_key'))
        z.2   = DH_neutral
    
     3. $AD   = $AD.55
        $Me   = $Me.56
        $Them = $Them.57
        ~ecdhSk
              = ~ecdhSk.58
        ~idKey
              = ~idKey.60
        chainKey
              = chainKey.62
        ciphertext
              = senc(z.80, hkdf(chainKey.62, 'msg_key'))
        msgKeyIndicator
              = msgKeyIndicator.68
        signature
              = signature.70
        theirEcdhPk
              = theirEcdhPk.71
        theirIdPk
              = theirIdPk.72
        z     = verify(signature.70,
                       <'msg_sig', senc(z.80, hkdf(chainKey.62, 'msg_key')), $AD.55, 
                        msgKeyIndicator.68, theirEcdhPk.71, (%i.73%+%1), 
                        <$Them.57, theirIdPk.72, $Me.56, pk(~idKey.60)>, None, None, None>,
                       theirIdPk.72)
        %i    = %i.73
        z.1   = z.80
        z.2   = theirEcdhPk.71^~ecdhSk.58
    
     4. $AD   = $AD.55
        $Me   = $Me.56
        $Them = $Them.57
        ~idKey
              = ~idKey.60
        chainKey
              = chainKey.62
        ciphertext
              = senc(z.80, hkdf(chainKey.62, 'msg_key'))
        msgKeyIndicator
              = msgKeyIndicator.68
        signature
              = signature.70
        theirEcdhPk
              = DH_neutral
        theirIdPk
              = theirIdPk.72
        z     = verify(signature.70,
                       <'msg_sig', senc(z.80, hkdf(chainKey.62, 'msg_key')), $AD.55, 
                        msgKeyIndicator.68, DH_neutral, (%i.73%+%1), 
                        <$Them.57, theirIdPk.72, $Me.56, pk(~idKey.60)>, None, None, None>,
                       theirIdPk.72)
        %i    = %i.73
        z.1   = z.80
        z.2   = DH_neutral
    
     5. $AD   = $AD.57
        $Me   = $Me.58
        $Them = $Them.59
        ~ecdhSk
              = ~ecdhSk.60
        ~idKey
              = ~idKey.62
        chainKey
              = chainKey.64
        ciphertext
              = ciphertext.65
        msgKeyIndicator
              = msgKeyIndicator.70
        signature
              = signature.72
        theirEcdhPk
              = z.84^inv(~ecdhSk.60)
        theirIdPk
              = theirIdPk.74
        z     = verify(signature.72,
                       <'msg_sig', ciphertext.65, $AD.57, msgKeyIndicator.70, 
                        z.84^inv(~ecdhSk.60), (%i.75%+%1), 
                        <$Them.59, theirIdPk.74, $Me.58, pk(~idKey.62)>, None, None, None>,
                       theirIdPk.74)
        %i    = %i.75
        z.1   = sdec(ciphertext.65, hkdf(chainKey.64, 'msg_key'))
        z.2   = z.84
    
     6. $AD   = $AD.57
        $Me   = $Me.58
        $Them = $Them.59
        ~ecdhSk
              = ~ecdhSk.60
        ~idKey
              = ~idKey.62
        chainKey
              = chainKey.64
        ciphertext
              = senc(z.82, hkdf(chainKey.64, 'msg_key'))
        msgKeyIndicator
              = msgKeyIndicator.70
        signature
              = signature.72
        theirEcdhPk
              = z.84^inv(~ecdhSk.60)
        theirIdPk
              = theirIdPk.74
        z     = verify(signature.72,
                       <'msg_sig', senc(z.82, hkdf(chainKey.64, 'msg_key')), $AD.57, 
                        msgKeyIndicator.70, z.84^inv(~ecdhSk.60), (%i.75%+%1), 
                        <$Them.59, theirIdPk.74, $Me.58, pk(~idKey.62)>, None, None, None>,
                       theirIdPk.74)
        %i    = %i.75
        z.1   = z.82
        z.2   = z.84
    
     7. $AD   = $AD.267
        $Me   = $Me.268
        $Them = $Them.269
        ~ecdhSk
              = ~ecdhSk.270
        ~idKey
              = ~idKey.272
        chainKey
              = chainKey.274
        ciphertext
              = ciphertext.275
        msgKeyIndicator
              = msgKeyIndicator.280
        signature
              = signature.282
        theirEcdhPk
              = x.531^x.532
        theirIdPk
              = theirIdPk.284
        z     = verify(signature.282,
                       <'msg_sig', ciphertext.275, $AD.267, msgKeyIndicator.280, x.531^x.532, 
                        (%i.285%+%1), <$Them.269, theirIdPk.284, $Me.268, pk(~idKey.272)>, None, 
                        None, None>,
                       theirIdPk.284)
        %i    = %i.285
        z.1   = sdec(ciphertext.275, hkdf(chainKey.274, 'msg_key'))
        z.2   = x.531^(~ecdhSk.270*x.532)
    
     8. $AD   = $AD.276
        $Me   = $Me.277
        $Them = $Them.278
        ~ecdhSk
              = ~ecdhSk.279
        ~idKey
              = ~idKey.281
        chainKey
              = chainKey.283
        ciphertext
              = senc(z.301, hkdf(chainKey.283, 'msg_key'))
        msgKeyIndicator
              = msgKeyIndicator.289
        signature
              = signature.291
        theirEcdhPk
              = x.549^x.550
        theirIdPk
              = theirIdPk.293
        z     = verify(signature.291,
                       <'msg_sig', senc(z.301, hkdf(chainKey.283, 'msg_key')), $AD.276, 
                        msgKeyIndicator.289, x.549^x.550, (%i.294%+%1), 
                        <$Them.278, theirIdPk.293, $Me.277, pk(~idKey.281)>, None, None, None>,
                       theirIdPk.293)
        %i    = %i.294
        z.1   = z.301
        z.2   = x.549^(~ecdhSk.279*x.550)
    
     9. $AD   = $AD.280
        $Me   = $Me.281
        $Them = $Them.282
        ~ecdhSk
              = ~ecdhSk.283
        ~idKey
              = ~idKey.285
        chainKey
              = chainKey.287
        ciphertext
              = ciphertext.288
        msgKeyIndicator
              = msgKeyIndicator.293
        signature
              = signature.295
        theirEcdhPk
              = x.557^inv((~ecdhSk.283*x.558))
        theirIdPk
              = theirIdPk.297
        z     = verify(signature.295,
                       <'msg_sig', ciphertext.288, $AD.280, msgKeyIndicator.293, 
                        x.557^inv((~ecdhSk.283*x.558)), (%i.298%+%1), 
                        <$Them.282, theirIdPk.297, $Me.281, pk(~idKey.285)>, None, None, None>,
                       theirIdPk.297)
        %i    = %i.298
        z.1   = sdec(ciphertext.288, hkdf(chainKey.287, 'msg_key'))
        z.2   = x.557^inv(x.558)
    
    10. $AD   = $AD.280
        $Me   = $Me.281
        $Them = $Them.282
        ~ecdhSk
              = ~ecdhSk.283
        ~idKey
              = ~idKey.285
        chainKey
              = chainKey.287
        ciphertext
              = ciphertext.288
        msgKeyIndicator
              = msgKeyIndicator.293
        signature
              = signature.295
        theirEcdhPk
              = x.557^(x.558*inv(~ecdhSk.283))
        theirIdPk
              = theirIdPk.297
        z     = verify(signature.295,
                       <'msg_sig', ciphertext.288, $AD.280, msgKeyIndicator.293, 
                        x.557^(x.558*inv(~ecdhSk.283)), (%i.298%+%1), 
                        <$Them.282, theirIdPk.297, $Me.281, pk(~idKey.285)>, None, None, None>,
                       theirIdPk.297)
        %i    = %i.298
        z.1   = sdec(ciphertext.288, hkdf(chainKey.287, 'msg_key'))
        z.2   = x.557^x.558
    
    11. $AD   = $AD.280
        $Me   = $Me.281
        $Them = $Them.282
        ~ecdhSk
              = ~ecdhSk.283
        ~idKey
              = ~idKey.285
        chainKey
              = chainKey.287
        ciphertext
              = senc(z.305, hkdf(chainKey.287, 'msg_key'))
        msgKeyIndicator
              = msgKeyIndicator.293
        signature
              = signature.295
        theirEcdhPk
              = x.557^inv((~ecdhSk.283*x.558))
        theirIdPk
              = theirIdPk.297
        z     = verify(signature.295,
                       <'msg_sig', senc(z.305, hkdf(chainKey.287, 'msg_key')), $AD.280, 
                        msgKeyIndicator.293, x.557^inv((~ecdhSk.283*x.558)), (%i.298%+%1), 
                        <$Them.282, theirIdPk.297, $Me.281, pk(~idKey.285)>, None, None, None>,
                       theirIdPk.297)
        %i    = %i.298
        z.1   = z.305
        z.2   = x.557^inv(x.558)
    
    12. $AD   = $AD.280
        $Me   = $Me.281
        $Them = $Them.282
        ~ecdhSk
              = ~ecdhSk.283
        ~idKey
              = ~idKey.285
        chainKey
              = chainKey.287
        ciphertext
              = senc(z.305, hkdf(chainKey.287, 'msg_key'))
        msgKeyIndicator
              = msgKeyIndicator.293
        signature
              = signature.295
        theirEcdhPk
              = x.557^(x.558*inv(~ecdhSk.283))
        theirIdPk
              = theirIdPk.297
        z     = verify(signature.295,
                       <'msg_sig', senc(z.305, hkdf(chainKey.287, 'msg_key')), $AD.280, 
                        msgKeyIndicator.293, x.557^(x.558*inv(~ecdhSk.283)), (%i.298%+%1), 
                        <$Them.282, theirIdPk.297, $Me.281, pk(~idKey.285)>, None, None, None>,
                       theirIdPk.297)
        %i    = %i.298
        z.1   = z.305
        z.2   = x.557^x.558
    
    13. $AD   = $AD.281
        $Me   = $Me.282
        $Them = $Them.283
        ~ecdhSk
              = ~ecdhSk.284
        ~idKey
              = ~idKey.286
        chainKey
              = chainKey.288
        ciphertext
              = ciphertext.289
        msgKeyIndicator
              = msgKeyIndicator.294
        signature
              = signature.296
        theirEcdhPk
              = x.558^(x.559*inv((~ecdhSk.284*x.560)))
        theirIdPk
              = theirIdPk.298
        z     = verify(signature.296,
                       <'msg_sig', ciphertext.289, $AD.281, msgKeyIndicator.294, 
                        x.558^(x.559*inv((~ecdhSk.284*x.560))), (%i.299%+%1), 
                        <$Them.283, theirIdPk.298, $Me.282, pk(~idKey.286)>, None, None, None>,
                       theirIdPk.298)
        %i    = %i.299
        z.1   = sdec(ciphertext.289, hkdf(chainKey.288, 'msg_key'))
        z.2   = x.558^(x.559*inv(x.560))
    
    14. $AD   = $AD.281
        $Me   = $Me.282
        $Them = $Them.283
        ~ecdhSk
              = ~ecdhSk.284
        ~idKey
              = ~idKey.286
        chainKey
              = chainKey.288
        ciphertext
              = senc(z.306, hkdf(chainKey.288, 'msg_key'))
        msgKeyIndicator
              = msgKeyIndicator.294
        signature
              = signature.296
        theirEcdhPk
              = x.558^(x.559*inv((~ecdhSk.284*x.560)))
        theirIdPk
              = theirIdPk.298
        z     = verify(signature.296,
                       <'msg_sig', senc(z.306, hkdf(chainKey.288, 'msg_key')), $AD.281, 
                        msgKeyIndicator.294, x.558^(x.559*inv((~ecdhSk.284*x.560))), 
                        (%i.299%+%1), <$Them.283, theirIdPk.298, $Me.282, pk(~idKey.286)>, None, 
                        None, None>,
                       theirIdPk.298)
        %i    = %i.299
        z.1   = z.306
        z.2   = x.558^(x.559*inv(x.560))
    
    15. $AD   = $AD.282
        $Me   = $Me.283
        $Them = $Them.284
        ~idKey
              = ~idKey.287
        chainKey
              = chainKey.289
        ciphertext
              = ciphertext.290
        msgKeyIndicator
              = msgKeyIndicator.295
        signature
              = sign(<'msg_sig', ciphertext.290, $AD.282, msgKeyIndicator.295, 
                      DH_neutral, (%i.300%+%1), 
                      <$Them.284, pk(x.562), $Me.283, pk(~idKey.287)>, None, None, None>,
                     x.562)
        theirEcdhPk
              = DH_neutral
        theirIdPk
              = pk(x.562)
        z     = true
        %i    = %i.300
        z.1   = sdec(ciphertext.290, hkdf(chainKey.289, 'msg_key'))
        z.2   = DH_neutral
    
    16. $AD   = $AD.282
        $Me   = $Me.283
        $Them = $Them.284
        ~idKey
              = ~idKey.287
        chainKey
              = chainKey.289
        ciphertext
              = senc(z.307, hkdf(chainKey.289, 'msg_key'))
        msgKeyIndicator
              = msgKeyIndicator.295
        signature
              = sign(<'msg_sig', senc(z.307, hkdf(chainKey.289, 'msg_key')), $AD.282, 
                      msgKeyIndicator.295, DH_neutral, (%i.300%+%1), 
                      <$Them.284, pk(x.562), $Me.283, pk(~idKey.287)>, None, None, None>,
                     x.562)
        theirEcdhPk
              = DH_neutral
        theirIdPk
              = pk(x.562)
        z     = true
        %i    = %i.300
        z.1   = z.307
        z.2   = DH_neutral
    
    17. $AD   = $AD.283
        $Me   = $Me.284
        $Them = $Them.285
        ~ecdhSk
              = ~ecdhSk.286
        ~idKey
              = ~idKey.288
        chainKey
              = chainKey.290
        ciphertext
              = ciphertext.291
        msgKeyIndicator
              = msgKeyIndicator.296
        signature
              = sign(<'msg_sig', ciphertext.291, $AD.283, msgKeyIndicator.296, 
                      theirEcdhPk.299, (%i.301%+%1), 
                      <$Them.285, pk(x.564), $Me.284, pk(~idKey.288)>, None, None, None>,
                     x.564)
        theirEcdhPk
              = theirEcdhPk.299
        theirIdPk
              = pk(x.564)
        z     = true
        %i    = %i.301
        z.1   = sdec(ciphertext.291, hkdf(chainKey.290, 'msg_key'))
        z.2   = theirEcdhPk.299^~ecdhSk.286
    
    18. $AD   = $AD.283
        $Me   = $Me.284
        $Them = $Them.285
        ~ecdhSk
              = ~ecdhSk.286
        ~idKey
              = ~idKey.288
        chainKey
              = chainKey.290
        ciphertext
              = ciphertext.291
        msgKeyIndicator
              = msgKeyIndicator.296
        signature
              = sign(<'msg_sig', ciphertext.291, $AD.283, msgKeyIndicator.296, 
                      z.310^inv(~ecdhSk.286), (%i.301%+%1), 
                      <$Them.285, pk(x.564), $Me.284, pk(~idKey.288)>, None, None, None>,
                     x.564)
        theirEcdhPk
              = z.310^inv(~ecdhSk.286)
        theirIdPk
              = pk(x.564)
        z     = true
        %i    = %i.301
        z.1   = sdec(ciphertext.291, hkdf(chainKey.290, 'msg_key'))
        z.2   = z.310
    
    19. $AD   = $AD.283
        $Me   = $Me.284
        $Them = $Them.285
        ~ecdhSk
              = ~ecdhSk.286
        ~idKey
              = ~idKey.288
        chainKey
              = chainKey.290
        ciphertext
              = senc(z.308, hkdf(chainKey.290, 'msg_key'))
        msgKeyIndicator
              = msgKeyIndicator.296
        signature
              = sign(<'msg_sig', senc(z.308, hkdf(chainKey.290, 'msg_key')), $AD.283, 
                      msgKeyIndicator.296, theirEcdhPk.299, (%i.301%+%1), 
                      <$Them.285, pk(x.564), $Me.284, pk(~idKey.288)>, None, None, None>,
                     x.564)
        theirEcdhPk
              = theirEcdhPk.299
        theirIdPk
              = pk(x.564)
        z     = true
        %i    = %i.301
        z.1   = z.308
        z.2   = theirEcdhPk.299^~ecdhSk.286
    
    20. $AD   = $AD.283
        $Me   = $Me.284
        $Them = $Them.285
        ~ecdhSk
              = ~ecdhSk.286
        ~idKey
              = ~idKey.288
        chainKey
              = chainKey.290
        ciphertext
              = senc(z.308, hkdf(chainKey.290, 'msg_key'))
        msgKeyIndicator
              = msgKeyIndicator.296
        signature
              = sign(<'msg_sig', senc(z.308, hkdf(chainKey.290, 'msg_key')), $AD.283, 
                      msgKeyIndicator.296, z.310^inv(~ecdhSk.286), (%i.301%+%1), 
                      <$Them.285, pk(x.564), $Me.284, pk(~idKey.288)>, None, None, None>,
                     x.564)
        theirEcdhPk
              = z.310^inv(~ecdhSk.286)
        theirIdPk
              = pk(x.564)
        z     = true
        %i    = %i.301
        z.1   = z.308
        z.2   = z.310
    
    21. $AD   = $AD.284
        $Me   = $Me.285
        $Them = $Them.286
        ~ecdhSk
              = ~ecdhSk.287
        ~idKey
              = ~idKey.289
        chainKey
              = chainKey.291
        ciphertext
              = ciphertext.292
        msgKeyIndicator
              = msgKeyIndicator.297
        signature
              = sign(<'msg_sig', ciphertext.292, $AD.284, msgKeyIndicator.297, 
                      x.563^x.564, (%i.302%+%1), 
                      <$Them.286, pk(x.566), $Me.285, pk(~idKey.289)>, None, None, None>,
                     x.566)
        theirEcdhPk
              = x.563^x.564
        theirIdPk
              = pk(x.566)
        z     = true
        %i    = %i.302
        z.1   = sdec(ciphertext.292, hkdf(chainKey.291, 'msg_key'))
        z.2   = x.563^(~ecdhSk.287*x.564)
    
    22. $AD   = $AD.284
        $Me   = $Me.285
        $Them = $Them.286
        ~ecdhSk
              = ~ecdhSk.287
        ~idKey
              = ~idKey.289
        chainKey
              = chainKey.291
        ciphertext
              = ciphertext.292
        msgKeyIndicator
              = msgKeyIndicator.297
        signature
              = sign(<'msg_sig', ciphertext.292, $AD.284, msgKeyIndicator.297, 
                      x.563^inv((~ecdhSk.287*x.564)), (%i.302%+%1), 
                      <$Them.286, pk(x.566), $Me.285, pk(~idKey.289)>, None, None, None>,
                     x.566)
        theirEcdhPk
              = x.563^inv((~ecdhSk.287*x.564))
        theirIdPk
              = pk(x.566)
        z     = true
        %i    = %i.302
        z.1   = sdec(ciphertext.292, hkdf(chainKey.291, 'msg_key'))
        z.2   = x.563^inv(x.564)
    
    23. $AD   = $AD.284
        $Me   = $Me.285
        $Them = $Them.286
        ~ecdhSk
              = ~ecdhSk.287
        ~idKey
              = ~idKey.289
        chainKey
              = chainKey.291
        ciphertext
              = ciphertext.292
        msgKeyIndicator
              = msgKeyIndicator.297
        signature
              = sign(<'msg_sig', ciphertext.292, $AD.284, msgKeyIndicator.297, 
                      x.563^(x.564*inv(~ecdhSk.287)), (%i.302%+%1), 
                      <$Them.286, pk(x.566), $Me.285, pk(~idKey.289)>, None, None, None>,
                     x.566)
        theirEcdhPk
              = x.563^(x.564*inv(~ecdhSk.287))
        theirIdPk
              = pk(x.566)
        z     = true
        %i    = %i.302
        z.1   = sdec(ciphertext.292, hkdf(chainKey.291, 'msg_key'))
        z.2   = x.563^x.564
    
    24. $AD   = $AD.284
        $Me   = $Me.285
        $Them = $Them.286
        ~ecdhSk
              = ~ecdhSk.287
        ~idKey
              = ~idKey.289
        chainKey
              = chainKey.291
        ciphertext
              = senc(z.309, hkdf(chainKey.291, 'msg_key'))
        msgKeyIndicator
              = msgKeyIndicator.297
        signature
              = sign(<'msg_sig', senc(z.309, hkdf(chainKey.291, 'msg_key')), $AD.284, 
                      msgKeyIndicator.297, x.563^x.564, (%i.302%+%1), 
                      <$Them.286, pk(x.566), $Me.285, pk(~idKey.289)>, None, None, None>,
                     x.566)
        theirEcdhPk
              = x.563^x.564
        theirIdPk
              = pk(x.566)
        z     = true
        %i    = %i.302
        z.1   = z.309
        z.2   = x.563^(~ecdhSk.287*x.564)
    
    25. $AD   = $AD.284
        $Me   = $Me.285
        $Them = $Them.286
        ~ecdhSk
              = ~ecdhSk.287
        ~idKey
              = ~idKey.289
        chainKey
              = chainKey.291
        ciphertext
              = senc(z.309, hkdf(chainKey.291, 'msg_key'))
        msgKeyIndicator
              = msgKeyIndicator.297
        signature
              = sign(<'msg_sig', senc(z.309, hkdf(chainKey.291, 'msg_key')), $AD.284, 
                      msgKeyIndicator.297, x.563^inv((~ecdhSk.287*x.564)), (%i.302%+%1), 
                      <$Them.286, pk(x.566), $Me.285, pk(~idKey.289)>, None, None, None>,
                     x.566)
        theirEcdhPk
              = x.563^inv((~ecdhSk.287*x.564))
        theirIdPk
              = pk(x.566)
        z     = true
        %i    = %i.302
        z.1   = z.309
        z.2   = x.563^inv(x.564)
    
    26. $AD   = $AD.284
        $Me   = $Me.285
        $Them = $Them.286
        ~ecdhSk
              = ~ecdhSk.287
        ~idKey
              = ~idKey.289
        chainKey
              = chainKey.291
        ciphertext
              = senc(z.309, hkdf(chainKey.291, 'msg_key'))
        msgKeyIndicator
              = msgKeyIndicator.297
        signature
              = sign(<'msg_sig', senc(z.309, hkdf(chainKey.291, 'msg_key')), $AD.284, 
                      msgKeyIndicator.297, x.563^(x.564*inv(~ecdhSk.287)), (%i.302%+%1), 
                      <$Them.286, pk(x.566), $Me.285, pk(~idKey.289)>, None, None, None>,
                     x.566)
        theirEcdhPk
              = x.563^(x.564*inv(~ecdhSk.287))
        theirIdPk
              = pk(x.566)
        z     = true
        %i    = %i.302
        z.1   = z.309
        z.2   = x.563^x.564
    
    27. $AD   = $AD.285
        $Me   = $Me.286
        $Them = $Them.287
        ~ecdhSk
              = ~ecdhSk.288
        ~idKey
              = ~idKey.290
        chainKey
              = chainKey.292
        ciphertext
              = ciphertext.293
        msgKeyIndicator
              = msgKeyIndicator.298
        signature
              = sign(<'msg_sig', ciphertext.293, $AD.285, msgKeyIndicator.298, 
                      x.564^(x.565*inv((~ecdhSk.288*x.566))), (%i.303%+%1), 
                      <$Them.287, pk(x.568), $Me.286, pk(~idKey.290)>, None, None, None>,
                     x.568)
        theirEcdhPk
              = x.564^(x.565*inv((~ecdhSk.288*x.566)))
        theirIdPk
              = pk(x.568)
        z     = true
        %i    = %i.303
        z.1   = sdec(ciphertext.293, hkdf(chainKey.292, 'msg_key'))
        z.2   = x.564^(x.565*inv(x.566))
    
    28. $AD   = $AD.285
        $Me   = $Me.286
        $Them = $Them.287
        ~ecdhSk
              = ~ecdhSk.288
        ~idKey
              = ~idKey.290
        chainKey
              = chainKey.292
        ciphertext
              = senc(z.310, hkdf(chainKey.292, 'msg_key'))
        msgKeyIndicator
              = msgKeyIndicator.298
        signature
              = sign(<'msg_sig', senc(z.310, hkdf(chainKey.292, 'msg_key')), $AD.285, 
                      msgKeyIndicator.298, x.564^(x.565*inv((~ecdhSk.288*x.566))), 
                      (%i.303%+%1), <$Them.287, pk(x.568), $Me.286, pk(~idKey.290)>, None, 
                      None, None>,
                     x.568)
        theirEcdhPk
              = x.564^(x.565*inv((~ecdhSk.288*x.566)))
        theirIdPk
              = pk(x.568)
        z     = true
        %i    = %i.303
        z.1   = z.310
        z.2   = x.564^(x.565*inv(x.566))
    // loop breaker: [1]
  */

rule (modulo E) SomeFreshKemSk[color=#6495ed]:
   [ Fr( ~newKemSk ) ]
  --[ PrePQAttack( ) ]->
   [
   NewKemKey( $Me, $Them, Just(~newKemSk), Just(pqpk(~newKemSk)) ),
   !KemKey( $Me, ~newKemSk )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) NoFreshKemSk[color=#6495ed]:
   [ ] --[ PrePQAttack( ) ]-> [ NewKemKey( $Me, $Them, None, None ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) PublicKeyRatchetNewSenderSomeNewKemSS[color=#b4d9ef]:
   [
   Fr( ~ecdhSk ), Fr( ~kemSS ), Fr( ~msg ), !IdentityKey( $Me, ~idKey ),
   Session( ~id, %i, 'R', $Me, discard0, ~oldKemSk, $Them, theirIdPk,
            theirEcdhPk, discard1, Just(theirKemPk), discard2, discard3, rootKey,
            discard4
   ),
   NewKemKey( $Me, $Them, maybeNewKemSk, maybeMyNewKemPk )
   ]
  --[
  PrePQAttack( ), SessionInfo( ~id, (%i%+%1), $Me, $Them ),
  PublicKeyRatchet( theirIdPk, 'g'^~ecdhSk, theirEcdhPk,
                    theirEcdhPk^~ecdhSk, default(maybeMyNewKemPk, pqpk(~oldKemSk)),
                    Just(theirKemPk), None, ~kemSS, theirKemPk,
                    prefix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), ~kemSS),
                                <$Me, pk(~idKey), $Them, theirIdPk>))
  ),
  PKRatchet( ), ToSender( ),
  MessageSent( ~id, (%i%+%1), $Me, $Them, ~msg, $AD ),
  SessionSecrets( 'g'^~ecdhSk, theirEcdhPk, ~kemSS, theirKemPk,
                  prefix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), ~kemSS),
                              <$Me, pk(~idKey), $Them, theirIdPk>)),
                  suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), ~kemSS),
                              <$Me, pk(~idKey), $Them, theirIdPk>)),
                  hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), ~kemSS),
                                   <$Me, pk(~idKey), $Them, theirIdPk>)),
                       'msg_key')
  ),
  KeysUsed( theirIdPk, 'g'^~ecdhSk, theirEcdhPk, theirEcdhPk^~ecdhSk,
            default(maybeMyNewKemPk, pqpk(~oldKemSk)), Just(theirKemPk), None,
            ~kemSS, theirKemPk,
            prefix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), ~kemSS),
                        <$Me, pk(~idKey), $Them, theirIdPk>)),
            suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), ~kemSS),
                        <$Me, pk(~idKey), $Them, theirIdPk>)),
            hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), ~kemSS),
                             <$Me, pk(~idKey), $Them, theirIdPk>)),
                 'msg_key')
  ),
  ECDHKeyGen( ~id, $Me, $Them, 'g'^~ecdhSk ),
  KemKeyGen( ~id, $Me, $Them, maybeMyNewKemPk ),
  NewKemSS( ~id, $Me, $Them, ~kemSS, theirKemPk ),
  PublicKeyRatchetNewSender( ~id, (%i%+%1), $Me, $Them,
                             hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), ~kemSS),
                                  <$Me, pk(~idKey), $Them, theirIdPk>)
  )
  ]->
   [
   Out( <
         senc(~msg,
              hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), ~kemSS),
                               <$Me, pk(~idKey), $Them, theirIdPk>)),
                   'msg_key')), 
         $AD, 
         sign(<'msg_sig', 
               senc(~msg,
                    hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), ~kemSS),
                                     <$Me, pk(~idKey), $Them, theirIdPk>)),
                         'msg_key')), 
               $AD, 
               hkdf(hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), ~kemSS),
                                     <$Me, pk(~idKey), $Them, theirIdPk>)),
                         'msg_key'),
                    'msg_key_ind'), 
               'g'^~ecdhSk, (%i%+%1), <$Me, pk(~idKey), $Them, theirIdPk>, 
               maybeMyNewKemPk, Just(encap(~kemSS, theirKemPk)), None>,
              ~idKey), 
         'g'^~ecdhSk, (%i%+%1), 
         hkdf(hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), ~kemSS),
                               <$Me, pk(~idKey), $Them, theirIdPk>)),
                   'msg_key'),
              'msg_key_ind'), 
         maybeMyNewKemPk, Just(encap(~kemSS, theirKemPk)), None>
   ),
   Session( ~id, (%i%+%1), 'S', $Me, ~ecdhSk,
            default(maybeNewKemSk, ~oldKemSk), $Them, theirIdPk, theirEcdhPk,
            Just(theirKemPk), None, ~kemSS, theirKemPk,
            prefix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), ~kemSS),
                        <$Me, pk(~idKey), $Them, theirIdPk>)),
            hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), ~kemSS),
                             <$Me, pk(~idKey), $Them, theirIdPk>)),
                 'chain_key')
   ),
   Out( 'g'^~ecdhSk ), !NonPQSecKey( ~ecdhSk ),
   !RootKey( ~id, (%i%+%1), $Me, ~kemSS,
             prefix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), ~kemSS),
                         <$Me, pk(~idKey), $Them, theirIdPk>))
   ),
   !ChainKey( ~id, (%i%+%1), $Me,
              suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), ~kemSS),
                          <$Me, pk(~idKey), $Them, theirIdPk>))
   ),
   !MessageKey( ~id, (%i%+%1), $Me,
                hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), ~kemSS),
                                 <$Me, pk(~idKey), $Them, theirIdPk>)),
                     'msg_key')
   ),
   !ECDHKey( ~id, $Me, ~ecdhSk )
   ]

  /*
  rule (modulo AC) PublicKeyRatchetNewSenderSomeNewKemSS[color=#b4d9ef]:
     [
     Fr( ~ecdhSk ), Fr( ~kemSS ), Fr( ~msg ), !IdentityKey( $Me, ~idKey ),
     Session( ~id, %i, 'R', $Me, discard0, ~oldKemSk, $Them, theirIdPk,
              theirEcdhPk, discard1, Just(theirKemPk), discard2, discard3, rootKey,
              discard4
     ),
     NewKemKey( $Me, $Them, maybeNewKemSk, maybeMyNewKemPk )
     ]
    --[
    PrePQAttack( ), SessionInfo( ~id, (%i%+%1), $Me, $Them ),
    PublicKeyRatchet( theirIdPk, 'g'^~ecdhSk, theirEcdhPk, z, z.2,
                      Just(theirKemPk), None, ~kemSS, theirKemPk,
                      prefix(hkdf(hkdf(hkdf(z, rootKey), ~kemSS),
                                  <$Me, pk(~idKey), $Them, theirIdPk>))
    ),
    PKRatchet( ), ToSender( ),
    MessageSent( ~id, (%i%+%1), $Me, $Them, ~msg, $AD ),
    SessionSecrets( 'g'^~ecdhSk, theirEcdhPk, ~kemSS, theirKemPk,
                    prefix(hkdf(hkdf(hkdf(z, rootKey), ~kemSS),
                                <$Me, pk(~idKey), $Them, theirIdPk>)),
                    suffix(hkdf(hkdf(hkdf(z, rootKey), ~kemSS),
                                <$Me, pk(~idKey), $Them, theirIdPk>)),
                    hkdf(suffix(hkdf(hkdf(hkdf(z, rootKey), ~kemSS),
                                     <$Me, pk(~idKey), $Them, theirIdPk>)),
                         'msg_key')
    ),
    KeysUsed( theirIdPk, 'g'^~ecdhSk, theirEcdhPk, z, z.2, Just(theirKemPk),
              None, ~kemSS, theirKemPk,
              prefix(hkdf(hkdf(hkdf(z, rootKey), ~kemSS),
                          <$Me, pk(~idKey), $Them, theirIdPk>)),
              suffix(hkdf(hkdf(hkdf(z, rootKey), ~kemSS),
                          <$Me, pk(~idKey), $Them, theirIdPk>)),
              hkdf(suffix(hkdf(hkdf(hkdf(z, rootKey), ~kemSS),
                               <$Me, pk(~idKey), $Them, theirIdPk>)),
                   'msg_key')
    ),
    ECDHKeyGen( ~id, $Me, $Them, 'g'^~ecdhSk ),
    KemKeyGen( ~id, $Me, $Them, maybeMyNewKemPk ),
    NewKemSS( ~id, $Me, $Them, ~kemSS, theirKemPk ),
    PublicKeyRatchetNewSender( ~id, (%i%+%1), $Me, $Them,
                               hkdf(hkdf(hkdf(z, rootKey), ~kemSS), <$Me, pk(~idKey), $Them, theirIdPk>)
    )
    ]->
     [
     Out( <
           senc(~msg,
                hkdf(suffix(hkdf(hkdf(hkdf(z, rootKey), ~kemSS),
                                 <$Me, pk(~idKey), $Them, theirIdPk>)),
                     'msg_key')), 
           $AD, 
           sign(<'msg_sig', 
                 senc(~msg,
                      hkdf(suffix(hkdf(hkdf(hkdf(z, rootKey), ~kemSS),
                                       <$Me, pk(~idKey), $Them, theirIdPk>)),
                           'msg_key')), 
                 $AD, 
                 hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z, rootKey), ~kemSS),
                                       <$Me, pk(~idKey), $Them, theirIdPk>)),
                           'msg_key'),
                      'msg_key_ind'), 
                 'g'^~ecdhSk, (%i%+%1), <$Me, pk(~idKey), $Them, theirIdPk>, 
                 maybeMyNewKemPk, Just(encap(~kemSS, theirKemPk)), None>,
                ~idKey), 
           'g'^~ecdhSk, (%i%+%1), 
           hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z, rootKey), ~kemSS),
                                 <$Me, pk(~idKey), $Them, theirIdPk>)),
                     'msg_key'),
                'msg_key_ind'), 
           maybeMyNewKemPk, Just(encap(~kemSS, theirKemPk)), None>
     ),
     Session( ~id, (%i%+%1), 'S', $Me, ~ecdhSk, z.1, $Them, theirIdPk,
              theirEcdhPk, Just(theirKemPk), None, ~kemSS, theirKemPk,
              prefix(hkdf(hkdf(hkdf(z, rootKey), ~kemSS),
                          <$Me, pk(~idKey), $Them, theirIdPk>)),
              hkdf(suffix(hkdf(hkdf(hkdf(z, rootKey), ~kemSS),
                               <$Me, pk(~idKey), $Them, theirIdPk>)),
                   'chain_key')
     ),
     Out( 'g'^~ecdhSk ), !NonPQSecKey( ~ecdhSk ),
     !RootKey( ~id, (%i%+%1), $Me, ~kemSS,
               prefix(hkdf(hkdf(hkdf(z, rootKey), ~kemSS),
                           <$Me, pk(~idKey), $Them, theirIdPk>))
     ),
     !ChainKey( ~id, (%i%+%1), $Me,
                suffix(hkdf(hkdf(hkdf(z, rootKey), ~kemSS),
                            <$Me, pk(~idKey), $Them, theirIdPk>))
     ),
     !MessageKey( ~id, (%i%+%1), $Me,
                  hkdf(suffix(hkdf(hkdf(hkdf(z, rootKey), ~kemSS),
                                   <$Me, pk(~idKey), $Them, theirIdPk>)),
                       'msg_key')
     ),
     !ECDHKey( ~id, $Me, ~ecdhSk )
     ]
    variants (modulo AC)
     1. ~ecdhSk
              = ~ecdhSk.47
        ~oldKemSk
              = ~oldKemSk.52
        maybeMyNewKemPk
              = maybeMyNewKemPk.58
        maybeNewKemSk
              = maybeNewKemSk.59
        theirEcdhPk
              = theirEcdhPk.61
        z     = theirEcdhPk.61^~ecdhSk.47
        z.1   = default(maybeNewKemSk.59, ~oldKemSk.52)
        z.2   = default(maybeMyNewKemPk.58, pqpk(~oldKemSk.52))
    
     2. ~ecdhSk
              = ~ecdhSk.47
        ~oldKemSk
              = ~oldKemSk.52
        maybeMyNewKemPk
              = maybeMyNewKemPk.58
        maybeNewKemSk
              = None
        theirEcdhPk
              = theirEcdhPk.61
        z     = theirEcdhPk.61^~ecdhSk.47
        z.1   = ~oldKemSk.52
        z.2   = default(maybeMyNewKemPk.58, pqpk(~oldKemSk.52))
    
     3. ~ecdhSk
              = ~ecdhSk.47
        ~oldKemSk
              = ~oldKemSk.52
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = maybeNewKemSk.59
        theirEcdhPk
              = theirEcdhPk.61
        z     = theirEcdhPk.61^~ecdhSk.47
        z.1   = default(maybeNewKemSk.59, ~oldKemSk.52)
        z.2   = pqpk(~oldKemSk.52)
    
     4. ~ecdhSk
              = ~ecdhSk.47
        ~oldKemSk
              = ~oldKemSk.52
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = None
        theirEcdhPk
              = theirEcdhPk.61
        z     = theirEcdhPk.61^~ecdhSk.47
        z.1   = ~oldKemSk.52
        z.2   = pqpk(~oldKemSk.52)
    
     5. ~ecdhSk
              = ~ecdhSk.52
        ~oldKemSk
              = ~oldKemSk.57
        maybeMyNewKemPk
              = maybeMyNewKemPk.63
        maybeNewKemSk
              = maybeNewKemSk.64
        theirEcdhPk
              = z.71^inv(~ecdhSk.52)
        z     = z.71
        z.1   = default(maybeNewKemSk.64, ~oldKemSk.57)
        z.2   = default(maybeMyNewKemPk.63, pqpk(~oldKemSk.57))
    
     6. ~ecdhSk
              = ~ecdhSk.52
        ~oldKemSk
              = ~oldKemSk.57
        maybeMyNewKemPk
              = maybeMyNewKemPk.63
        maybeNewKemSk
              = None
        theirEcdhPk
              = z.71^inv(~ecdhSk.52)
        z     = z.71
        z.1   = ~oldKemSk.57
        z.2   = default(maybeMyNewKemPk.63, pqpk(~oldKemSk.57))
    
     7. ~ecdhSk
              = ~ecdhSk.52
        ~oldKemSk
              = ~oldKemSk.57
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = maybeNewKemSk.64
        theirEcdhPk
              = z.71^inv(~ecdhSk.52)
        z     = z.71
        z.1   = default(maybeNewKemSk.64, ~oldKemSk.57)
        z.2   = pqpk(~oldKemSk.57)
    
     8. ~ecdhSk
              = ~ecdhSk.52
        ~oldKemSk
              = ~oldKemSk.57
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = None
        theirEcdhPk
              = z.71^inv(~ecdhSk.52)
        z     = z.71
        z.1   = ~oldKemSk.57
        z.2   = pqpk(~oldKemSk.57)
    
     9. ~ecdhSk
              = ~ecdhSk.58
        ~oldKemSk
              = ~oldKemSk.63
        maybeMyNewKemPk
              = maybeMyNewKemPk.69
        maybeNewKemSk
              = Just(z.83)
        theirEcdhPk
              = theirEcdhPk.72
        z     = theirEcdhPk.72^~ecdhSk.58
        z.1   = z.83
        z.2   = default(maybeMyNewKemPk.69, pqpk(~oldKemSk.63))
    
    10. ~ecdhSk
              = ~ecdhSk.58
        ~oldKemSk
              = ~oldKemSk.63
        maybeMyNewKemPk
              = maybeMyNewKemPk.69
        maybeNewKemSk
              = Just(z.83)
        theirEcdhPk
              = z.77^inv(~ecdhSk.58)
        z     = z.77
        z.1   = z.83
        z.2   = default(maybeMyNewKemPk.69, pqpk(~oldKemSk.63))
    
    11. ~ecdhSk
              = ~ecdhSk.58
        ~oldKemSk
              = ~oldKemSk.63
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = Just(z.83)
        theirEcdhPk
              = theirEcdhPk.72
        z     = theirEcdhPk.72^~ecdhSk.58
        z.1   = z.83
        z.2   = pqpk(~oldKemSk.63)
    
    12. ~ecdhSk
              = ~ecdhSk.58
        ~oldKemSk
              = ~oldKemSk.63
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = Just(z.83)
        theirEcdhPk
              = z.77^inv(~ecdhSk.58)
        z     = z.77
        z.1   = z.83
        z.2   = pqpk(~oldKemSk.63)
    
    13. ~ecdhSk
              = ~ecdhSk.60
        ~oldKemSk
              = ~oldKemSk.65
        maybeMyNewKemPk
              = Just(z.87)
        maybeNewKemSk
              = maybeNewKemSk.72
        theirEcdhPk
              = theirEcdhPk.74
        z     = theirEcdhPk.74^~ecdhSk.60
        z.1   = default(maybeNewKemSk.72, ~oldKemSk.65)
        z.2   = z.87
    
    14. ~ecdhSk
              = ~ecdhSk.60
        ~oldKemSk
              = ~oldKemSk.65
        maybeMyNewKemPk
              = Just(z.87)
        maybeNewKemSk
              = maybeNewKemSk.72
        theirEcdhPk
              = z.79^inv(~ecdhSk.60)
        z     = z.79
        z.1   = default(maybeNewKemSk.72, ~oldKemSk.65)
        z.2   = z.87
    
    15. ~ecdhSk
              = ~ecdhSk.60
        ~oldKemSk
              = ~oldKemSk.65
        maybeMyNewKemPk
              = Just(z.87)
        maybeNewKemSk
              = None
        theirEcdhPk
              = theirEcdhPk.74
        z     = theirEcdhPk.74^~ecdhSk.60
        z.1   = ~oldKemSk.65
        z.2   = z.87
    
    16. ~ecdhSk
              = ~ecdhSk.60
        ~oldKemSk
              = ~oldKemSk.65
        maybeMyNewKemPk
              = Just(z.87)
        maybeNewKemSk
              = None
        theirEcdhPk
              = z.79^inv(~ecdhSk.60)
        z     = z.79
        z.1   = ~oldKemSk.65
        z.2   = z.87
    
    17. ~ecdhSk
              = ~ecdhSk.60
        maybeMyNewKemPk
              = Just(z.87)
        maybeNewKemSk
              = Just(z.85)
        theirEcdhPk
              = theirEcdhPk.74
        z     = theirEcdhPk.74^~ecdhSk.60
        z.1   = z.85
        z.2   = z.87
    
    18. ~ecdhSk
              = ~ecdhSk.60
        maybeMyNewKemPk
              = Just(z.87)
        maybeNewKemSk
              = Just(z.85)
        theirEcdhPk
              = z.79^inv(~ecdhSk.60)
        z     = z.79
        z.1   = z.85
        z.2   = z.87
    
    19. ~ecdhSk
              = ~ecdhSk.301
        ~oldKemSk
              = ~oldKemSk.306
        maybeMyNewKemPk
              = maybeMyNewKemPk.312
        maybeNewKemSk
              = maybeNewKemSk.313
        theirEcdhPk
              = x.596^x.597
        z     = x.596^(~ecdhSk.301*x.597)
        z.1   = default(maybeNewKemSk.313, ~oldKemSk.306)
        z.2   = default(maybeMyNewKemPk.312, pqpk(~oldKemSk.306))
    
    20. ~ecdhSk
              = ~ecdhSk.301
        ~oldKemSk
              = ~oldKemSk.306
        maybeMyNewKemPk
              = maybeMyNewKemPk.312
        maybeNewKemSk
              = None
        theirEcdhPk
              = x.596^x.597
        z     = x.596^(~ecdhSk.301*x.597)
        z.1   = ~oldKemSk.306
        z.2   = default(maybeMyNewKemPk.312, pqpk(~oldKemSk.306))
    
    21. ~ecdhSk
              = ~ecdhSk.301
        ~oldKemSk
              = ~oldKemSk.306
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = maybeNewKemSk.313
        theirEcdhPk
              = x.596^x.597
        z     = x.596^(~ecdhSk.301*x.597)
        z.1   = default(maybeNewKemSk.313, ~oldKemSk.306)
        z.2   = pqpk(~oldKemSk.306)
    
    22. ~ecdhSk
              = ~ecdhSk.301
        ~oldKemSk
              = ~oldKemSk.306
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = None
        theirEcdhPk
              = x.596^x.597
        z     = x.596^(~ecdhSk.301*x.597)
        z.1   = ~oldKemSk.306
        z.2   = pqpk(~oldKemSk.306)
    
    23. ~ecdhSk
              = ~ecdhSk.303
        ~oldKemSk
              = ~oldKemSk.308
        maybeMyNewKemPk
              = maybeMyNewKemPk.314
        maybeNewKemSk
              = Just(z.328)
        theirEcdhPk
              = x.600^x.601
        z     = x.600^(~ecdhSk.303*x.601)
        z.1   = z.328
        z.2   = default(maybeMyNewKemPk.314, pqpk(~oldKemSk.308))
    
    24. ~ecdhSk
              = ~ecdhSk.303
        ~oldKemSk
              = ~oldKemSk.308
        maybeMyNewKemPk
              = Just(z.330)
        maybeNewKemSk
              = None
        theirEcdhPk
              = x.600^x.601
        z     = x.600^(~ecdhSk.303*x.601)
        z.1   = ~oldKemSk.308
        z.2   = z.330
    
    25. ~ecdhSk
              = ~ecdhSk.303
        ~oldKemSk
              = ~oldKemSk.308
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = Just(z.328)
        theirEcdhPk
              = x.600^x.601
        z     = x.600^(~ecdhSk.303*x.601)
        z.1   = z.328
        z.2   = pqpk(~oldKemSk.308)
    
    26. ~ecdhSk
              = ~ecdhSk.304
        ~oldKemSk
              = ~oldKemSk.309
        maybeMyNewKemPk
              = Just(z.331)
        maybeNewKemSk
              = maybeNewKemSk.316
        theirEcdhPk
              = x.602^x.603
        z     = x.602^(~ecdhSk.304*x.603)
        z.1   = default(maybeNewKemSk.316, ~oldKemSk.309)
        z.2   = z.331
    
    27. ~ecdhSk
              = ~ecdhSk.304
        maybeMyNewKemPk
              = Just(z.331)
        maybeNewKemSk
              = Just(z.329)
        theirEcdhPk
              = x.602^x.603
        z     = x.602^(~ecdhSk.304*x.603)
        z.1   = z.329
        z.2   = z.331
    
    28. ~ecdhSk
              = ~ecdhSk.313
        ~oldKemSk
              = ~oldKemSk.318
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = None
        theirEcdhPk
              = x.620^inv((~ecdhSk.313*x.621))
        z     = x.620^inv(x.621)
        z.1   = ~oldKemSk.318
        z.2   = pqpk(~oldKemSk.318)
    
    29. ~ecdhSk
              = ~ecdhSk.313
        ~oldKemSk
              = ~oldKemSk.318
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = None
        theirEcdhPk
              = x.620^(x.621*inv(~ecdhSk.313))
        z     = x.620^x.621
        z.1   = ~oldKemSk.318
        z.2   = pqpk(~oldKemSk.318)
    
    30. ~ecdhSk
              = ~ecdhSk.314
        ~oldKemSk
              = ~oldKemSk.319
        maybeMyNewKemPk
              = maybeMyNewKemPk.325
        maybeNewKemSk
              = None
        theirEcdhPk
              = x.622^inv((~ecdhSk.314*x.623))
        z     = x.622^inv(x.623)
        z.1   = ~oldKemSk.319
        z.2   = default(maybeMyNewKemPk.325, pqpk(~oldKemSk.319))
    
    31. ~ecdhSk
              = ~ecdhSk.314
        ~oldKemSk
              = ~oldKemSk.319
        maybeMyNewKemPk
              = maybeMyNewKemPk.325
        maybeNewKemSk
              = None
        theirEcdhPk
              = x.622^(x.623*inv(~ecdhSk.314))
        z     = x.622^x.623
        z.1   = ~oldKemSk.319
        z.2   = default(maybeMyNewKemPk.325, pqpk(~oldKemSk.319))
    
    32. ~ecdhSk
              = ~ecdhSk.314
        ~oldKemSk
              = ~oldKemSk.319
        maybeMyNewKemPk
              = Just(z.341)
        maybeNewKemSk
              = None
        theirEcdhPk
              = x.622^inv((~ecdhSk.314*x.623))
        z     = x.622^inv(x.623)
        z.1   = ~oldKemSk.319
        z.2   = z.341
    
    33. ~ecdhSk
              = ~ecdhSk.314
        ~oldKemSk
              = ~oldKemSk.319
        maybeMyNewKemPk
              = Just(z.341)
        maybeNewKemSk
              = None
        theirEcdhPk
              = x.622^(x.623*inv(~ecdhSk.314))
        z     = x.622^x.623
        z.1   = ~oldKemSk.319
        z.2   = z.341
    
    34. ~ecdhSk
              = ~ecdhSk.314
        ~oldKemSk
              = ~oldKemSk.319
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = maybeNewKemSk.326
        theirEcdhPk
              = x.622^inv((~ecdhSk.314*x.623))
        z     = x.622^inv(x.623)
        z.1   = default(maybeNewKemSk.326, ~oldKemSk.319)
        z.2   = pqpk(~oldKemSk.319)
    
    35. ~ecdhSk
              = ~ecdhSk.314
        ~oldKemSk
              = ~oldKemSk.319
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = maybeNewKemSk.326
        theirEcdhPk
              = x.622^(x.623*inv(~ecdhSk.314))
        z     = x.622^x.623
        z.1   = default(maybeNewKemSk.326, ~oldKemSk.319)
        z.2   = pqpk(~oldKemSk.319)
    
    36. ~ecdhSk
              = ~ecdhSk.314
        ~oldKemSk
              = ~oldKemSk.319
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = Just(z.339)
        theirEcdhPk
              = x.622^inv((~ecdhSk.314*x.623))
        z     = x.622^inv(x.623)
        z.1   = z.339
        z.2   = pqpk(~oldKemSk.319)
    
    37. ~ecdhSk
              = ~ecdhSk.314
        ~oldKemSk
              = ~oldKemSk.319
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = Just(z.339)
        theirEcdhPk
              = x.622^(x.623*inv(~ecdhSk.314))
        z     = x.622^x.623
        z.1   = z.339
        z.2   = pqpk(~oldKemSk.319)
    
    38. ~ecdhSk
              = ~ecdhSk.314
        ~oldKemSk
              = ~oldKemSk.319
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = None
        theirEcdhPk
              = x.621^(x.622*inv((~ecdhSk.314*x.623)))
        z     = x.621^(x.622*inv(x.623))
        z.1   = ~oldKemSk.319
        z.2   = pqpk(~oldKemSk.319)
    
    39. ~ecdhSk
              = ~ecdhSk.315
        ~oldKemSk
              = ~oldKemSk.320
        maybeMyNewKemPk
              = maybeMyNewKemPk.326
        maybeNewKemSk
              = maybeNewKemSk.327
        theirEcdhPk
              = x.624^inv((~ecdhSk.315*x.625))
        z     = x.624^inv(x.625)
        z.1   = default(maybeNewKemSk.327, ~oldKemSk.320)
        z.2   = default(maybeMyNewKemPk.326, pqpk(~oldKemSk.320))
    
    40. ~ecdhSk
              = ~ecdhSk.315
        ~oldKemSk
              = ~oldKemSk.320
        maybeMyNewKemPk
              = maybeMyNewKemPk.326
        maybeNewKemSk
              = maybeNewKemSk.327
        theirEcdhPk
              = x.624^(x.625*inv(~ecdhSk.315))
        z     = x.624^x.625
        z.1   = default(maybeNewKemSk.327, ~oldKemSk.320)
        z.2   = default(maybeMyNewKemPk.326, pqpk(~oldKemSk.320))
    
    41. ~ecdhSk
              = ~ecdhSk.315
        ~oldKemSk
              = ~oldKemSk.320
        maybeMyNewKemPk
              = maybeMyNewKemPk.326
        maybeNewKemSk
              = Just(z.340)
        theirEcdhPk
              = x.624^inv((~ecdhSk.315*x.625))
        z     = x.624^inv(x.625)
        z.1   = z.340
        z.2   = default(maybeMyNewKemPk.326, pqpk(~oldKemSk.320))
    
    42. ~ecdhSk
              = ~ecdhSk.315
        ~oldKemSk
              = ~oldKemSk.320
        maybeMyNewKemPk
              = maybeMyNewKemPk.326
        maybeNewKemSk
              = Just(z.340)
        theirEcdhPk
              = x.624^(x.625*inv(~ecdhSk.315))
        z     = x.624^x.625
        z.1   = z.340
        z.2   = default(maybeMyNewKemPk.326, pqpk(~oldKemSk.320))
    
    43. ~ecdhSk
              = ~ecdhSk.315
        ~oldKemSk
              = ~oldKemSk.320
        maybeMyNewKemPk
              = maybeMyNewKemPk.326
        maybeNewKemSk
              = None
        theirEcdhPk
              = x.623^(x.624*inv((~ecdhSk.315*x.625)))
        z     = x.623^(x.624*inv(x.625))
        z.1   = ~oldKemSk.320
        z.2   = default(maybeMyNewKemPk.326, pqpk(~oldKemSk.320))
    
    44. ~ecdhSk
              = ~ecdhSk.315
        ~oldKemSk
              = ~oldKemSk.320
        maybeMyNewKemPk
              = Just(z.342)
        maybeNewKemSk
              = maybeNewKemSk.327
        theirEcdhPk
              = x.624^inv((~ecdhSk.315*x.625))
        z     = x.624^inv(x.625)
        z.1   = default(maybeNewKemSk.327, ~oldKemSk.320)
        z.2   = z.342
    
    45. ~ecdhSk
              = ~ecdhSk.315
        ~oldKemSk
              = ~oldKemSk.320
        maybeMyNewKemPk
              = Just(z.342)
        maybeNewKemSk
              = maybeNewKemSk.327
        theirEcdhPk
              = x.624^(x.625*inv(~ecdhSk.315))
        z     = x.624^x.625
        z.1   = default(maybeNewKemSk.327, ~oldKemSk.320)
        z.2   = z.342
    
    46. ~ecdhSk
              = ~ecdhSk.315
        ~oldKemSk
              = ~oldKemSk.320
        maybeMyNewKemPk
              = Just(z.342)
        maybeNewKemSk
              = None
        theirEcdhPk
              = x.623^(x.624*inv((~ecdhSk.315*x.625)))
        z     = x.623^(x.624*inv(x.625))
        z.1   = ~oldKemSk.320
        z.2   = z.342
    
    47. ~ecdhSk
              = ~ecdhSk.315
        ~oldKemSk
              = ~oldKemSk.320
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = maybeNewKemSk.327
        theirEcdhPk
              = x.623^(x.624*inv((~ecdhSk.315*x.625)))
        z     = x.623^(x.624*inv(x.625))
        z.1   = default(maybeNewKemSk.327, ~oldKemSk.320)
        z.2   = pqpk(~oldKemSk.320)
    
    48. ~ecdhSk
              = ~ecdhSk.315
        ~oldKemSk
              = ~oldKemSk.320
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = Just(z.340)
        theirEcdhPk
              = x.623^(x.624*inv((~ecdhSk.315*x.625)))
        z     = x.623^(x.624*inv(x.625))
        z.1   = z.340
        z.2   = pqpk(~oldKemSk.320)
    
    49. ~ecdhSk
              = ~ecdhSk.315
        maybeMyNewKemPk
              = Just(z.342)
        maybeNewKemSk
              = Just(z.340)
        theirEcdhPk
              = x.624^inv((~ecdhSk.315*x.625))
        z     = x.624^inv(x.625)
        z.1   = z.340
        z.2   = z.342
    
    50. ~ecdhSk
              = ~ecdhSk.315
        maybeMyNewKemPk
              = Just(z.342)
        maybeNewKemSk
              = Just(z.340)
        theirEcdhPk
              = x.624^(x.625*inv(~ecdhSk.315))
        z     = x.624^x.625
        z.1   = z.340
        z.2   = z.342
    
    51. ~ecdhSk
              = ~ecdhSk.316
        ~oldKemSk
              = ~oldKemSk.321
        maybeMyNewKemPk
              = maybeMyNewKemPk.327
        maybeNewKemSk
              = maybeNewKemSk.328
        theirEcdhPk
              = x.625^(x.626*inv((~ecdhSk.316*x.627)))
        z     = x.625^(x.626*inv(x.627))
        z.1   = default(maybeNewKemSk.328, ~oldKemSk.321)
        z.2   = default(maybeMyNewKemPk.327, pqpk(~oldKemSk.321))
    
    52. ~ecdhSk
              = ~ecdhSk.316
        ~oldKemSk
              = ~oldKemSk.321
        maybeMyNewKemPk
              = maybeMyNewKemPk.327
        maybeNewKemSk
              = Just(z.341)
        theirEcdhPk
              = x.625^(x.626*inv((~ecdhSk.316*x.627)))
        z     = x.625^(x.626*inv(x.627))
        z.1   = z.341
        z.2   = default(maybeMyNewKemPk.327, pqpk(~oldKemSk.321))
    
    53. ~ecdhSk
              = ~ecdhSk.316
        ~oldKemSk
              = ~oldKemSk.321
        maybeMyNewKemPk
              = Just(z.343)
        maybeNewKemSk
              = maybeNewKemSk.328
        theirEcdhPk
              = x.625^(x.626*inv((~ecdhSk.316*x.627)))
        z     = x.625^(x.626*inv(x.627))
        z.1   = default(maybeNewKemSk.328, ~oldKemSk.321)
        z.2   = z.343
    
    54. ~ecdhSk
              = ~ecdhSk.316
        maybeMyNewKemPk
              = Just(z.343)
        maybeNewKemSk
              = Just(z.341)
        theirEcdhPk
              = x.625^(x.626*inv((~ecdhSk.316*x.627)))
        z     = x.625^(x.626*inv(x.627))
        z.1   = z.341
        z.2   = z.343
    
    55. ~oldKemSk
              = ~oldKemSk.33
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = None
        theirEcdhPk
              = DH_neutral
        z     = DH_neutral
        z.1   = ~oldKemSk.33
        z.2   = pqpk(~oldKemSk.33)
    
    56. ~oldKemSk
              = ~oldKemSk.39
        maybeMyNewKemPk
              = maybeMyNewKemPk.45
        maybeNewKemSk
              = None
        theirEcdhPk
              = DH_neutral
        z     = DH_neutral
        z.1   = ~oldKemSk.39
        z.2   = default(maybeMyNewKemPk.45, pqpk(~oldKemSk.39))
    
    57. ~oldKemSk
              = ~oldKemSk.40
        maybeMyNewKemPk
              = maybeMyNewKemPk.46
        maybeNewKemSk
              = maybeNewKemSk.47
        theirEcdhPk
              = DH_neutral
        z     = DH_neutral
        z.1   = default(maybeNewKemSk.47, ~oldKemSk.40)
        z.2   = default(maybeMyNewKemPk.46, pqpk(~oldKemSk.40))
    
    58. ~oldKemSk
              = ~oldKemSk.40
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = maybeNewKemSk.47
        theirEcdhPk
              = DH_neutral
        z     = DH_neutral
        z.1   = default(maybeNewKemSk.47, ~oldKemSk.40)
        z.2   = pqpk(~oldKemSk.40)
    
    59. ~oldKemSk
              = ~oldKemSk.53
        maybeMyNewKemPk
              = maybeMyNewKemPk.59
        maybeNewKemSk
              = Just(z.73)
        theirEcdhPk
              = DH_neutral
        z     = DH_neutral
        z.1   = z.73
        z.2   = default(maybeMyNewKemPk.59, pqpk(~oldKemSk.53))
    
    60. ~oldKemSk
              = ~oldKemSk.53
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = Just(z.73)
        theirEcdhPk
              = DH_neutral
        z     = DH_neutral
        z.1   = z.73
        z.2   = pqpk(~oldKemSk.53)
    
    61. ~oldKemSk
              = ~oldKemSk.55
        maybeMyNewKemPk
              = Just(z.77)
        maybeNewKemSk
              = maybeNewKemSk.62
        theirEcdhPk
              = DH_neutral
        z     = DH_neutral
        z.1   = default(maybeNewKemSk.62, ~oldKemSk.55)
        z.2   = z.77
    
    62. ~oldKemSk
              = ~oldKemSk.55
        maybeMyNewKemPk
              = Just(z.77)
        maybeNewKemSk
              = None
        theirEcdhPk
              = DH_neutral
        z     = DH_neutral
        z.1   = ~oldKemSk.55
        z.2   = z.77
    
    63. maybeMyNewKemPk
              = Just(z.37)
        maybeNewKemSk
              = Just(z.35)
        theirEcdhPk
              = DH_neutral
        z     = DH_neutral
        z.1   = z.35
        z.2   = z.37
  */

rule (modulo E) PublicKeyRatchetNewSenderNoNewKemSS[color=#b4d9ef]:
   [
   Fr( ~ecdhSk ), Fr( ~msg ), !IdentityKey( $Me, ~idKey ),
   Session( ~id, %i, 'R', $Me, discard0, ~oldKemSk, $Them, theirIdPk,
            theirEcdhPk, maybeTheirKemPk, None, kemSS, encapPk, rootKey, discard1
   ),
   NewKemKey( $Me, $Them, maybeNewKemSk, maybeMyNewKemPk )
   ]
  --[
  PrePQAttack( ), SessionInfo( ~id, (%i%+%1), $Me, $Them ),
  PublicKeyRatchet( theirIdPk, 'g'^~ecdhSk, theirEcdhPk,
                    theirEcdhPk^~ecdhSk, default(maybeMyNewKemPk, pqpk(~oldKemSk)),
                    maybeTheirKemPk, None, kemSS, encapPk,
                    prefix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), '0'),
                                <$Me, pk(~idKey), $Them, theirIdPk>))
  ),
  PKRatchet( ), ToSender( ),
  MessageSent( ~id, (%i%+%1), $Me, $Them, ~msg, $AD ),
  SessionSecrets( 'g'^~ecdhSk, theirEcdhPk, kemSS, encapPk,
                  prefix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), '0'),
                              <$Me, pk(~idKey), $Them, theirIdPk>)),
                  suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), '0'),
                              <$Me, pk(~idKey), $Them, theirIdPk>)),
                  hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), '0'),
                                   <$Me, pk(~idKey), $Them, theirIdPk>)),
                       'msg_key')
  ),
  KeysUsed( theirIdPk, 'g'^~ecdhSk, theirEcdhPk, theirEcdhPk^~ecdhSk,
            default(maybeMyNewKemPk, pqpk(~oldKemSk)), maybeTheirKemPk, None, kemSS,
            encapPk,
            prefix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), '0'),
                        <$Me, pk(~idKey), $Them, theirIdPk>)),
            suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), '0'),
                        <$Me, pk(~idKey), $Them, theirIdPk>)),
            hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), '0'),
                             <$Me, pk(~idKey), $Them, theirIdPk>)),
                 'msg_key')
  ),
  ECDHKeyGen( ~id, $Me, $Them, 'g'^~ecdhSk ),
  KemKeyGen( ~id, $Me, $Them, maybeMyNewKemPk ),
  PublicKeyRatchetNewSender( ~id, (%i%+%1), $Me, $Them,
                             hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), '0'),
                                  <$Me, pk(~idKey), $Them, theirIdPk>)
  )
  ]->
   [
   Out( <
         senc(~msg,
              hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), '0'),
                               <$Me, pk(~idKey), $Them, theirIdPk>)),
                   'msg_key')), 
         $AD, 
         sign(<'msg_sig', 
               senc(~msg,
                    hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), '0'),
                                     <$Me, pk(~idKey), $Them, theirIdPk>)),
                         'msg_key')), 
               $AD, 
               hkdf(hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), '0'),
                                     <$Me, pk(~idKey), $Them, theirIdPk>)),
                         'msg_key'),
                    'msg_key_ind'), 
               'g'^~ecdhSk, (%i%+%1), <$Me, pk(~idKey), $Them, theirIdPk>, 
               maybeMyNewKemPk, None, None>,
              ~idKey), 
         'g'^~ecdhSk, (%i%+%1), 
         hkdf(hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), '0'),
                               <$Me, pk(~idKey), $Them, theirIdPk>)),
                   'msg_key'),
              'msg_key_ind'), 
         maybeMyNewKemPk, None, None>
   ),
   Session( ~id, (%i%+%1), 'S', $Me, ~ecdhSk,
            default(maybeNewKemSk, ~oldKemSk), $Them, theirIdPk, theirEcdhPk,
            maybeTheirKemPk, None, kemSS, encapPk,
            prefix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), '0'),
                        <$Me, pk(~idKey), $Them, theirIdPk>)),
            hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), '0'),
                             <$Me, pk(~idKey), $Them, theirIdPk>)),
                 'chain_key')
   ),
   Out( 'g'^~ecdhSk ), !NonPQSecKey( ~ecdhSk ),
   !RootKey( ~id, (%i%+%1), $Me, kemSS,
             prefix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), '0'),
                         <$Me, pk(~idKey), $Them, theirIdPk>))
   ),
   !ChainKey( ~id, (%i%+%1), $Me,
              suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), '0'),
                          <$Me, pk(~idKey), $Them, theirIdPk>))
   ),
   !MessageKey( ~id, (%i%+%1), $Me,
                hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), '0'),
                                 <$Me, pk(~idKey), $Them, theirIdPk>)),
                     'msg_key')
   ),
   !ECDHKey( ~id, $Me, ~ecdhSk )
   ]

  /*
  rule (modulo AC) PublicKeyRatchetNewSenderNoNewKemSS[color=#b4d9ef]:
     [
     Fr( ~ecdhSk ), Fr( ~msg ), !IdentityKey( $Me, ~idKey ),
     Session( ~id, %i, 'R', $Me, discard0, ~oldKemSk, $Them, theirIdPk,
              theirEcdhPk, maybeTheirKemPk, None, kemSS, encapPk, rootKey, discard1
     ),
     NewKemKey( $Me, $Them, maybeNewKemSk, maybeMyNewKemPk )
     ]
    --[
    PrePQAttack( ), SessionInfo( ~id, (%i%+%1), $Me, $Them ),
    PublicKeyRatchet( theirIdPk, 'g'^~ecdhSk, theirEcdhPk, z, z.2,
                      maybeTheirKemPk, None, kemSS, encapPk,
                      prefix(hkdf(hkdf(hkdf(z, rootKey), '0'),
                                  <$Me, pk(~idKey), $Them, theirIdPk>))
    ),
    PKRatchet( ), ToSender( ),
    MessageSent( ~id, (%i%+%1), $Me, $Them, ~msg, $AD ),
    SessionSecrets( 'g'^~ecdhSk, theirEcdhPk, kemSS, encapPk,
                    prefix(hkdf(hkdf(hkdf(z, rootKey), '0'),
                                <$Me, pk(~idKey), $Them, theirIdPk>)),
                    suffix(hkdf(hkdf(hkdf(z, rootKey), '0'),
                                <$Me, pk(~idKey), $Them, theirIdPk>)),
                    hkdf(suffix(hkdf(hkdf(hkdf(z, rootKey), '0'),
                                     <$Me, pk(~idKey), $Them, theirIdPk>)),
                         'msg_key')
    ),
    KeysUsed( theirIdPk, 'g'^~ecdhSk, theirEcdhPk, z, z.2, maybeTheirKemPk,
              None, kemSS, encapPk,
              prefix(hkdf(hkdf(hkdf(z, rootKey), '0'),
                          <$Me, pk(~idKey), $Them, theirIdPk>)),
              suffix(hkdf(hkdf(hkdf(z, rootKey), '0'),
                          <$Me, pk(~idKey), $Them, theirIdPk>)),
              hkdf(suffix(hkdf(hkdf(hkdf(z, rootKey), '0'),
                               <$Me, pk(~idKey), $Them, theirIdPk>)),
                   'msg_key')
    ),
    ECDHKeyGen( ~id, $Me, $Them, 'g'^~ecdhSk ),
    KemKeyGen( ~id, $Me, $Them, maybeMyNewKemPk ),
    PublicKeyRatchetNewSender( ~id, (%i%+%1), $Me, $Them,
                               hkdf(hkdf(hkdf(z, rootKey), '0'), <$Me, pk(~idKey), $Them, theirIdPk>)
    )
    ]->
     [
     Out( <
           senc(~msg,
                hkdf(suffix(hkdf(hkdf(hkdf(z, rootKey), '0'),
                                 <$Me, pk(~idKey), $Them, theirIdPk>)),
                     'msg_key')), 
           $AD, 
           sign(<'msg_sig', 
                 senc(~msg,
                      hkdf(suffix(hkdf(hkdf(hkdf(z, rootKey), '0'),
                                       <$Me, pk(~idKey), $Them, theirIdPk>)),
                           'msg_key')), 
                 $AD, 
                 hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z, rootKey), '0'),
                                       <$Me, pk(~idKey), $Them, theirIdPk>)),
                           'msg_key'),
                      'msg_key_ind'), 
                 'g'^~ecdhSk, (%i%+%1), <$Me, pk(~idKey), $Them, theirIdPk>, 
                 maybeMyNewKemPk, None, None>,
                ~idKey), 
           'g'^~ecdhSk, (%i%+%1), 
           hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z, rootKey), '0'),
                                 <$Me, pk(~idKey), $Them, theirIdPk>)),
                     'msg_key'),
                'msg_key_ind'), 
           maybeMyNewKemPk, None, None>
     ),
     Session( ~id, (%i%+%1), 'S', $Me, ~ecdhSk, z.1, $Them, theirIdPk,
              theirEcdhPk, maybeTheirKemPk, None, kemSS, encapPk,
              prefix(hkdf(hkdf(hkdf(z, rootKey), '0'),
                          <$Me, pk(~idKey), $Them, theirIdPk>)),
              hkdf(suffix(hkdf(hkdf(hkdf(z, rootKey), '0'),
                               <$Me, pk(~idKey), $Them, theirIdPk>)),
                   'chain_key')
     ),
     Out( 'g'^~ecdhSk ), !NonPQSecKey( ~ecdhSk ),
     !RootKey( ~id, (%i%+%1), $Me, kemSS,
               prefix(hkdf(hkdf(hkdf(z, rootKey), '0'),
                           <$Me, pk(~idKey), $Them, theirIdPk>))
     ),
     !ChainKey( ~id, (%i%+%1), $Me,
                suffix(hkdf(hkdf(hkdf(z, rootKey), '0'),
                            <$Me, pk(~idKey), $Them, theirIdPk>))
     ),
     !MessageKey( ~id, (%i%+%1), $Me,
                  hkdf(suffix(hkdf(hkdf(hkdf(z, rootKey), '0'),
                                   <$Me, pk(~idKey), $Them, theirIdPk>)),
                       'msg_key')
     ),
     !ECDHKey( ~id, $Me, ~ecdhSk )
     ]
    variants (modulo AC)
     1. ~ecdhSk
              = ~ecdhSk.45
        ~oldKemSk
              = ~oldKemSk.49
        maybeMyNewKemPk
              = maybeMyNewKemPk.54
        maybeNewKemSk
              = maybeNewKemSk.55
        theirEcdhPk
              = theirEcdhPk.58
        z     = theirEcdhPk.58^~ecdhSk.45
        z.1   = default(maybeNewKemSk.55, ~oldKemSk.49)
        z.2   = default(maybeMyNewKemPk.54, pqpk(~oldKemSk.49))
    
     2. ~ecdhSk
              = ~ecdhSk.45
        ~oldKemSk
              = ~oldKemSk.49
        maybeMyNewKemPk
              = maybeMyNewKemPk.54
        maybeNewKemSk
              = None
        theirEcdhPk
              = theirEcdhPk.58
        z     = theirEcdhPk.58^~ecdhSk.45
        z.1   = ~oldKemSk.49
        z.2   = default(maybeMyNewKemPk.54, pqpk(~oldKemSk.49))
    
     3. ~ecdhSk
              = ~ecdhSk.45
        ~oldKemSk
              = ~oldKemSk.49
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = maybeNewKemSk.55
        theirEcdhPk
              = theirEcdhPk.58
        z     = theirEcdhPk.58^~ecdhSk.45
        z.1   = default(maybeNewKemSk.55, ~oldKemSk.49)
        z.2   = pqpk(~oldKemSk.49)
    
     4. ~ecdhSk
              = ~ecdhSk.45
        ~oldKemSk
              = ~oldKemSk.49
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = None
        theirEcdhPk
              = theirEcdhPk.58
        z     = theirEcdhPk.58^~ecdhSk.45
        z.1   = ~oldKemSk.49
        z.2   = pqpk(~oldKemSk.49)
    
     5. ~ecdhSk
              = ~ecdhSk.49
        ~oldKemSk
              = ~oldKemSk.53
        maybeMyNewKemPk
              = maybeMyNewKemPk.58
        maybeNewKemSk
              = maybeNewKemSk.59
        theirEcdhPk
              = z.66^inv(~ecdhSk.49)
        z     = z.66
        z.1   = default(maybeNewKemSk.59, ~oldKemSk.53)
        z.2   = default(maybeMyNewKemPk.58, pqpk(~oldKemSk.53))
    
     6. ~ecdhSk
              = ~ecdhSk.49
        ~oldKemSk
              = ~oldKemSk.53
        maybeMyNewKemPk
              = maybeMyNewKemPk.58
        maybeNewKemSk
              = None
        theirEcdhPk
              = z.66^inv(~ecdhSk.49)
        z     = z.66
        z.1   = ~oldKemSk.53
        z.2   = default(maybeMyNewKemPk.58, pqpk(~oldKemSk.53))
    
     7. ~ecdhSk
              = ~ecdhSk.49
        ~oldKemSk
              = ~oldKemSk.53
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = maybeNewKemSk.59
        theirEcdhPk
              = z.66^inv(~ecdhSk.49)
        z     = z.66
        z.1   = default(maybeNewKemSk.59, ~oldKemSk.53)
        z.2   = pqpk(~oldKemSk.53)
    
     8. ~ecdhSk
              = ~ecdhSk.49
        ~oldKemSk
              = ~oldKemSk.53
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = None
        theirEcdhPk
              = z.66^inv(~ecdhSk.49)
        z     = z.66
        z.1   = ~oldKemSk.53
        z.2   = pqpk(~oldKemSk.53)
    
     9. ~ecdhSk
              = ~ecdhSk.56
        ~oldKemSk
              = ~oldKemSk.60
        maybeMyNewKemPk
              = maybeMyNewKemPk.65
        maybeNewKemSk
              = Just(z.80)
        theirEcdhPk
              = theirEcdhPk.69
        z     = theirEcdhPk.69^~ecdhSk.56
        z.1   = z.80
        z.2   = default(maybeMyNewKemPk.65, pqpk(~oldKemSk.60))
    
    10. ~ecdhSk
              = ~ecdhSk.56
        ~oldKemSk
              = ~oldKemSk.60
        maybeMyNewKemPk
              = maybeMyNewKemPk.65
        maybeNewKemSk
              = Just(z.80)
        theirEcdhPk
              = z.73^inv(~ecdhSk.56)
        z     = z.73
        z.1   = z.80
        z.2   = default(maybeMyNewKemPk.65, pqpk(~oldKemSk.60))
    
    11. ~ecdhSk
              = ~ecdhSk.56
        ~oldKemSk
              = ~oldKemSk.60
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = Just(z.80)
        theirEcdhPk
              = theirEcdhPk.69
        z     = theirEcdhPk.69^~ecdhSk.56
        z.1   = z.80
        z.2   = pqpk(~oldKemSk.60)
    
    12. ~ecdhSk
              = ~ecdhSk.56
        ~oldKemSk
              = ~oldKemSk.60
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = Just(z.80)
        theirEcdhPk
              = z.73^inv(~ecdhSk.56)
        z     = z.73
        z.1   = z.80
        z.2   = pqpk(~oldKemSk.60)
    
    13. ~ecdhSk
              = ~ecdhSk.58
        ~oldKemSk
              = ~oldKemSk.62
        maybeMyNewKemPk
              = Just(z.84)
        maybeNewKemSk
              = maybeNewKemSk.68
        theirEcdhPk
              = theirEcdhPk.71
        z     = theirEcdhPk.71^~ecdhSk.58
        z.1   = default(maybeNewKemSk.68, ~oldKemSk.62)
        z.2   = z.84
    
    14. ~ecdhSk
              = ~ecdhSk.58
        ~oldKemSk
              = ~oldKemSk.62
        maybeMyNewKemPk
              = Just(z.84)
        maybeNewKemSk
              = maybeNewKemSk.68
        theirEcdhPk
              = z.75^inv(~ecdhSk.58)
        z     = z.75
        z.1   = default(maybeNewKemSk.68, ~oldKemSk.62)
        z.2   = z.84
    
    15. ~ecdhSk
              = ~ecdhSk.58
        ~oldKemSk
              = ~oldKemSk.62
        maybeMyNewKemPk
              = Just(z.84)
        maybeNewKemSk
              = None
        theirEcdhPk
              = theirEcdhPk.71
        z     = theirEcdhPk.71^~ecdhSk.58
        z.1   = ~oldKemSk.62
        z.2   = z.84
    
    16. ~ecdhSk
              = ~ecdhSk.58
        ~oldKemSk
              = ~oldKemSk.62
        maybeMyNewKemPk
              = Just(z.84)
        maybeNewKemSk
              = None
        theirEcdhPk
              = z.75^inv(~ecdhSk.58)
        z     = z.75
        z.1   = ~oldKemSk.62
        z.2   = z.84
    
    17. ~ecdhSk
              = ~ecdhSk.58
        maybeMyNewKemPk
              = Just(z.84)
        maybeNewKemSk
              = Just(z.82)
        theirEcdhPk
              = theirEcdhPk.71
        z     = theirEcdhPk.71^~ecdhSk.58
        z.1   = z.82
        z.2   = z.84
    
    18. ~ecdhSk
              = ~ecdhSk.58
        maybeMyNewKemPk
              = Just(z.84)
        maybeNewKemSk
              = Just(z.82)
        theirEcdhPk
              = z.75^inv(~ecdhSk.58)
        z     = z.75
        z.1   = z.82
        z.2   = z.84
    
    19. ~ecdhSk
              = ~ecdhSk.319
        ~oldKemSk
              = ~oldKemSk.323
        maybeMyNewKemPk
              = maybeMyNewKemPk.328
        maybeNewKemSk
              = maybeNewKemSk.329
        theirEcdhPk
              = x.632^x.633
        z     = x.632^(~ecdhSk.319*x.633)
        z.1   = default(maybeNewKemSk.329, ~oldKemSk.323)
        z.2   = default(maybeMyNewKemPk.328, pqpk(~oldKemSk.323))
    
    20. ~ecdhSk
              = ~ecdhSk.319
        ~oldKemSk
              = ~oldKemSk.323
        maybeMyNewKemPk
              = maybeMyNewKemPk.328
        maybeNewKemSk
              = None
        theirEcdhPk
              = x.632^x.633
        z     = x.632^(~ecdhSk.319*x.633)
        z.1   = ~oldKemSk.323
        z.2   = default(maybeMyNewKemPk.328, pqpk(~oldKemSk.323))
    
    21. ~ecdhSk
              = ~ecdhSk.319
        ~oldKemSk
              = ~oldKemSk.323
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = maybeNewKemSk.329
        theirEcdhPk
              = x.632^x.633
        z     = x.632^(~ecdhSk.319*x.633)
        z.1   = default(maybeNewKemSk.329, ~oldKemSk.323)
        z.2   = pqpk(~oldKemSk.323)
    
    22. ~ecdhSk
              = ~ecdhSk.319
        ~oldKemSk
              = ~oldKemSk.323
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = None
        theirEcdhPk
              = x.632^x.633
        z     = x.632^(~ecdhSk.319*x.633)
        z.1   = ~oldKemSk.323
        z.2   = pqpk(~oldKemSk.323)
    
    23. ~ecdhSk
              = ~ecdhSk.322
        ~oldKemSk
              = ~oldKemSk.326
        maybeMyNewKemPk
              = maybeMyNewKemPk.331
        maybeNewKemSk
              = Just(z.346)
        theirEcdhPk
              = x.638^x.639
        z     = x.638^(~ecdhSk.322*x.639)
        z.1   = z.346
        z.2   = default(maybeMyNewKemPk.331, pqpk(~oldKemSk.326))
    
    24. ~ecdhSk
              = ~ecdhSk.322
        ~oldKemSk
              = ~oldKemSk.326
        maybeMyNewKemPk
              = Just(z.348)
        maybeNewKemSk
              = None
        theirEcdhPk
              = x.638^x.639
        z     = x.638^(~ecdhSk.322*x.639)
        z.1   = ~oldKemSk.326
        z.2   = z.348
    
    25. ~ecdhSk
              = ~ecdhSk.322
        ~oldKemSk
              = ~oldKemSk.326
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = Just(z.346)
        theirEcdhPk
              = x.638^x.639
        z     = x.638^(~ecdhSk.322*x.639)
        z.1   = z.346
        z.2   = pqpk(~oldKemSk.326)
    
    26. ~ecdhSk
              = ~ecdhSk.323
        ~oldKemSk
              = ~oldKemSk.327
        maybeMyNewKemPk
              = Just(z.349)
        maybeNewKemSk
              = maybeNewKemSk.333
        theirEcdhPk
              = x.640^x.641
        z     = x.640^(~ecdhSk.323*x.641)
        z.1   = default(maybeNewKemSk.333, ~oldKemSk.327)
        z.2   = z.349
    
    27. ~ecdhSk
              = ~ecdhSk.323
        maybeMyNewKemPk
              = Just(z.349)
        maybeNewKemSk
              = Just(z.347)
        theirEcdhPk
              = x.640^x.641
        z     = x.640^(~ecdhSk.323*x.641)
        z.1   = z.347
        z.2   = z.349
    
    28. ~ecdhSk
              = ~ecdhSk.330
        ~oldKemSk
              = ~oldKemSk.334
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = None
        theirEcdhPk
              = x.654^inv((~ecdhSk.330*x.655))
        z     = x.654^inv(x.655)
        z.1   = ~oldKemSk.334
        z.2   = pqpk(~oldKemSk.334)
    
    29. ~ecdhSk
              = ~ecdhSk.330
        ~oldKemSk
              = ~oldKemSk.334
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = None
        theirEcdhPk
              = x.654^(x.655*inv(~ecdhSk.330))
        z     = x.654^x.655
        z.1   = ~oldKemSk.334
        z.2   = pqpk(~oldKemSk.334)
    
    30. ~ecdhSk
              = ~ecdhSk.331
        ~oldKemSk
              = ~oldKemSk.335
        maybeMyNewKemPk
              = maybeMyNewKemPk.340
        maybeNewKemSk
              = None
        theirEcdhPk
              = x.656^inv((~ecdhSk.331*x.657))
        z     = x.656^inv(x.657)
        z.1   = ~oldKemSk.335
        z.2   = default(maybeMyNewKemPk.340, pqpk(~oldKemSk.335))
    
    31. ~ecdhSk
              = ~ecdhSk.331
        ~oldKemSk
              = ~oldKemSk.335
        maybeMyNewKemPk
              = maybeMyNewKemPk.340
        maybeNewKemSk
              = None
        theirEcdhPk
              = x.656^(x.657*inv(~ecdhSk.331))
        z     = x.656^x.657
        z.1   = ~oldKemSk.335
        z.2   = default(maybeMyNewKemPk.340, pqpk(~oldKemSk.335))
    
    32. ~ecdhSk
              = ~ecdhSk.331
        ~oldKemSk
              = ~oldKemSk.335
        maybeMyNewKemPk
              = Just(z.357)
        maybeNewKemSk
              = None
        theirEcdhPk
              = x.656^inv((~ecdhSk.331*x.657))
        z     = x.656^inv(x.657)
        z.1   = ~oldKemSk.335
        z.2   = z.357
    
    33. ~ecdhSk
              = ~ecdhSk.331
        ~oldKemSk
              = ~oldKemSk.335
        maybeMyNewKemPk
              = Just(z.357)
        maybeNewKemSk
              = None
        theirEcdhPk
              = x.656^(x.657*inv(~ecdhSk.331))
        z     = x.656^x.657
        z.1   = ~oldKemSk.335
        z.2   = z.357
    
    34. ~ecdhSk
              = ~ecdhSk.331
        ~oldKemSk
              = ~oldKemSk.335
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = maybeNewKemSk.341
        theirEcdhPk
              = x.656^inv((~ecdhSk.331*x.657))
        z     = x.656^inv(x.657)
        z.1   = default(maybeNewKemSk.341, ~oldKemSk.335)
        z.2   = pqpk(~oldKemSk.335)
    
    35. ~ecdhSk
              = ~ecdhSk.331
        ~oldKemSk
              = ~oldKemSk.335
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = maybeNewKemSk.341
        theirEcdhPk
              = x.656^(x.657*inv(~ecdhSk.331))
        z     = x.656^x.657
        z.1   = default(maybeNewKemSk.341, ~oldKemSk.335)
        z.2   = pqpk(~oldKemSk.335)
    
    36. ~ecdhSk
              = ~ecdhSk.331
        ~oldKemSk
              = ~oldKemSk.335
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = Just(z.355)
        theirEcdhPk
              = x.656^inv((~ecdhSk.331*x.657))
        z     = x.656^inv(x.657)
        z.1   = z.355
        z.2   = pqpk(~oldKemSk.335)
    
    37. ~ecdhSk
              = ~ecdhSk.331
        ~oldKemSk
              = ~oldKemSk.335
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = Just(z.355)
        theirEcdhPk
              = x.656^(x.657*inv(~ecdhSk.331))
        z     = x.656^x.657
        z.1   = z.355
        z.2   = pqpk(~oldKemSk.335)
    
    38. ~ecdhSk
              = ~ecdhSk.331
        ~oldKemSk
              = ~oldKemSk.335
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = None
        theirEcdhPk
              = x.655^(x.656*inv((~ecdhSk.331*x.657)))
        z     = x.655^(x.656*inv(x.657))
        z.1   = ~oldKemSk.335
        z.2   = pqpk(~oldKemSk.335)
    
    39. ~ecdhSk
              = ~ecdhSk.332
        ~oldKemSk
              = ~oldKemSk.336
        maybeMyNewKemPk
              = maybeMyNewKemPk.341
        maybeNewKemSk
              = maybeNewKemSk.342
        theirEcdhPk
              = x.658^inv((~ecdhSk.332*x.659))
        z     = x.658^inv(x.659)
        z.1   = default(maybeNewKemSk.342, ~oldKemSk.336)
        z.2   = default(maybeMyNewKemPk.341, pqpk(~oldKemSk.336))
    
    40. ~ecdhSk
              = ~ecdhSk.332
        ~oldKemSk
              = ~oldKemSk.336
        maybeMyNewKemPk
              = maybeMyNewKemPk.341
        maybeNewKemSk
              = maybeNewKemSk.342
        theirEcdhPk
              = x.658^(x.659*inv(~ecdhSk.332))
        z     = x.658^x.659
        z.1   = default(maybeNewKemSk.342, ~oldKemSk.336)
        z.2   = default(maybeMyNewKemPk.341, pqpk(~oldKemSk.336))
    
    41. ~ecdhSk
              = ~ecdhSk.332
        ~oldKemSk
              = ~oldKemSk.336
        maybeMyNewKemPk
              = maybeMyNewKemPk.341
        maybeNewKemSk
              = Just(z.356)
        theirEcdhPk
              = x.658^inv((~ecdhSk.332*x.659))
        z     = x.658^inv(x.659)
        z.1   = z.356
        z.2   = default(maybeMyNewKemPk.341, pqpk(~oldKemSk.336))
    
    42. ~ecdhSk
              = ~ecdhSk.332
        ~oldKemSk
              = ~oldKemSk.336
        maybeMyNewKemPk
              = maybeMyNewKemPk.341
        maybeNewKemSk
              = Just(z.356)
        theirEcdhPk
              = x.658^(x.659*inv(~ecdhSk.332))
        z     = x.658^x.659
        z.1   = z.356
        z.2   = default(maybeMyNewKemPk.341, pqpk(~oldKemSk.336))
    
    43. ~ecdhSk
              = ~ecdhSk.332
        ~oldKemSk
              = ~oldKemSk.336
        maybeMyNewKemPk
              = maybeMyNewKemPk.341
        maybeNewKemSk
              = None
        theirEcdhPk
              = x.657^(x.658*inv((~ecdhSk.332*x.659)))
        z     = x.657^(x.658*inv(x.659))
        z.1   = ~oldKemSk.336
        z.2   = default(maybeMyNewKemPk.341, pqpk(~oldKemSk.336))
    
    44. ~ecdhSk
              = ~ecdhSk.332
        ~oldKemSk
              = ~oldKemSk.336
        maybeMyNewKemPk
              = Just(z.358)
        maybeNewKemSk
              = maybeNewKemSk.342
        theirEcdhPk
              = x.658^inv((~ecdhSk.332*x.659))
        z     = x.658^inv(x.659)
        z.1   = default(maybeNewKemSk.342, ~oldKemSk.336)
        z.2   = z.358
    
    45. ~ecdhSk
              = ~ecdhSk.332
        ~oldKemSk
              = ~oldKemSk.336
        maybeMyNewKemPk
              = Just(z.358)
        maybeNewKemSk
              = maybeNewKemSk.342
        theirEcdhPk
              = x.658^(x.659*inv(~ecdhSk.332))
        z     = x.658^x.659
        z.1   = default(maybeNewKemSk.342, ~oldKemSk.336)
        z.2   = z.358
    
    46. ~ecdhSk
              = ~ecdhSk.332
        ~oldKemSk
              = ~oldKemSk.336
        maybeMyNewKemPk
              = Just(z.358)
        maybeNewKemSk
              = None
        theirEcdhPk
              = x.657^(x.658*inv((~ecdhSk.332*x.659)))
        z     = x.657^(x.658*inv(x.659))
        z.1   = ~oldKemSk.336
        z.2   = z.358
    
    47. ~ecdhSk
              = ~ecdhSk.332
        ~oldKemSk
              = ~oldKemSk.336
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = maybeNewKemSk.342
        theirEcdhPk
              = x.657^(x.658*inv((~ecdhSk.332*x.659)))
        z     = x.657^(x.658*inv(x.659))
        z.1   = default(maybeNewKemSk.342, ~oldKemSk.336)
        z.2   = pqpk(~oldKemSk.336)
    
    48. ~ecdhSk
              = ~ecdhSk.332
        ~oldKemSk
              = ~oldKemSk.336
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = Just(z.356)
        theirEcdhPk
              = x.657^(x.658*inv((~ecdhSk.332*x.659)))
        z     = x.657^(x.658*inv(x.659))
        z.1   = z.356
        z.2   = pqpk(~oldKemSk.336)
    
    49. ~ecdhSk
              = ~ecdhSk.332
        maybeMyNewKemPk
              = Just(z.358)
        maybeNewKemSk
              = Just(z.356)
        theirEcdhPk
              = x.658^inv((~ecdhSk.332*x.659))
        z     = x.658^inv(x.659)
        z.1   = z.356
        z.2   = z.358
    
    50. ~ecdhSk
              = ~ecdhSk.332
        maybeMyNewKemPk
              = Just(z.358)
        maybeNewKemSk
              = Just(z.356)
        theirEcdhPk
              = x.658^(x.659*inv(~ecdhSk.332))
        z     = x.658^x.659
        z.1   = z.356
        z.2   = z.358
    
    51. ~ecdhSk
              = ~ecdhSk.333
        ~oldKemSk
              = ~oldKemSk.337
        maybeMyNewKemPk
              = maybeMyNewKemPk.342
        maybeNewKemSk
              = maybeNewKemSk.343
        theirEcdhPk
              = x.659^(x.660*inv((~ecdhSk.333*x.661)))
        z     = x.659^(x.660*inv(x.661))
        z.1   = default(maybeNewKemSk.343, ~oldKemSk.337)
        z.2   = default(maybeMyNewKemPk.342, pqpk(~oldKemSk.337))
    
    52. ~ecdhSk
              = ~ecdhSk.333
        ~oldKemSk
              = ~oldKemSk.337
        maybeMyNewKemPk
              = maybeMyNewKemPk.342
        maybeNewKemSk
              = Just(z.357)
        theirEcdhPk
              = x.659^(x.660*inv((~ecdhSk.333*x.661)))
        z     = x.659^(x.660*inv(x.661))
        z.1   = z.357
        z.2   = default(maybeMyNewKemPk.342, pqpk(~oldKemSk.337))
    
    53. ~ecdhSk
              = ~ecdhSk.333
        ~oldKemSk
              = ~oldKemSk.337
        maybeMyNewKemPk
              = Just(z.359)
        maybeNewKemSk
              = maybeNewKemSk.343
        theirEcdhPk
              = x.659^(x.660*inv((~ecdhSk.333*x.661)))
        z     = x.659^(x.660*inv(x.661))
        z.1   = default(maybeNewKemSk.343, ~oldKemSk.337)
        z.2   = z.359
    
    54. ~ecdhSk
              = ~ecdhSk.333
        maybeMyNewKemPk
              = Just(z.359)
        maybeNewKemSk
              = Just(z.357)
        theirEcdhPk
              = x.659^(x.660*inv((~ecdhSk.333*x.661)))
        z     = x.659^(x.660*inv(x.661))
        z.1   = z.357
        z.2   = z.359
    
    55. ~oldKemSk
              = ~oldKemSk.32
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = None
        theirEcdhPk
              = DH_neutral
        z     = DH_neutral
        z.1   = ~oldKemSk.32
        z.2   = pqpk(~oldKemSk.32)
    
    56. ~oldKemSk
              = ~oldKemSk.37
        maybeMyNewKemPk
              = maybeMyNewKemPk.42
        maybeNewKemSk
              = None
        theirEcdhPk
              = DH_neutral
        z     = DH_neutral
        z.1   = ~oldKemSk.37
        z.2   = default(maybeMyNewKemPk.42, pqpk(~oldKemSk.37))
    
    57. ~oldKemSk
              = ~oldKemSk.38
        maybeMyNewKemPk
              = maybeMyNewKemPk.43
        maybeNewKemSk
              = maybeNewKemSk.44
        theirEcdhPk
              = DH_neutral
        z     = DH_neutral
        z.1   = default(maybeNewKemSk.44, ~oldKemSk.38)
        z.2   = default(maybeMyNewKemPk.43, pqpk(~oldKemSk.38))
    
    58. ~oldKemSk
              = ~oldKemSk.38
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = maybeNewKemSk.44
        theirEcdhPk
              = DH_neutral
        z     = DH_neutral
        z.1   = default(maybeNewKemSk.44, ~oldKemSk.38)
        z.2   = pqpk(~oldKemSk.38)
    
    59. ~oldKemSk
              = ~oldKemSk.52
        maybeMyNewKemPk
              = maybeMyNewKemPk.57
        maybeNewKemSk
              = Just(z.72)
        theirEcdhPk
              = DH_neutral
        z     = DH_neutral
        z.1   = z.72
        z.2   = default(maybeMyNewKemPk.57, pqpk(~oldKemSk.52))
    
    60. ~oldKemSk
              = ~oldKemSk.52
        maybeMyNewKemPk
              = None
        maybeNewKemSk
              = Just(z.72)
        theirEcdhPk
              = DH_neutral
        z     = DH_neutral
        z.1   = z.72
        z.2   = pqpk(~oldKemSk.52)
    
    61. ~oldKemSk
              = ~oldKemSk.54
        maybeMyNewKemPk
              = Just(z.76)
        maybeNewKemSk
              = maybeNewKemSk.60
        theirEcdhPk
              = DH_neutral
        z     = DH_neutral
        z.1   = default(maybeNewKemSk.60, ~oldKemSk.54)
        z.2   = z.76
    
    62. ~oldKemSk
              = ~oldKemSk.54
        maybeMyNewKemPk
              = Just(z.76)
        maybeNewKemSk
              = None
        theirEcdhPk
              = DH_neutral
        z     = DH_neutral
        z.1   = ~oldKemSk.54
        z.2   = z.76
    
    63. maybeMyNewKemPk
              = Just(z.36)
        maybeNewKemSk
              = Just(z.34)
        theirEcdhPk
              = DH_neutral
        z     = DH_neutral
        z.1   = z.34
        z.2   = z.36
  */

rule (modulo E) PublicKeyRatchetNewReceiverNoNewKemSS[color=#b4d9ef]:
   [
   !IdentityKey( $Me, ~idKey ),
   Session( ~id, %i, 'S', $Me, ~ecdhSk, ~kemSk, $Them, theirIdPk, discard1,
            maybeTheirKemPk, None, kemSS, encapPk, rootKey, discard2
   ),
   In( <ciphertext, $AD, signature, theirEcdhPk, (%i%+%1), msgKeyIndicator, 
        maybeTheirNewKemPk, None, None>
   )
   ]
  --[
  PrePQAttack( ), Neq( theirEcdhPk, DH_neutral ), Neq( theirEcdhPk, 'g' ),
  Eq( verify(signature,
             <'msg_sig', ciphertext, $AD, msgKeyIndicator, theirEcdhPk, (%i%+%1), 
              <$Them, theirIdPk, $Me, pk(~idKey)>, maybeTheirNewKemPk, None, None>,
             theirIdPk),
      true
  ),
  Eq( msgKeyIndicator,
      hkdf(hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), '0'),
                            <$Them, theirIdPk, $Me, pk(~idKey)>)),
                'msg_key'),
           'msg_key_ind')
  ),
  SessionInfo( ~id, (%i%+%1), $Me, $Them ),
  PublicKeyRatchet( theirIdPk, 'g'^~ecdhSk, theirEcdhPk,
                    theirEcdhPk^~ecdhSk, pqpk(~kemSk), maybeTheirKemPk, maybeTheirNewKemPk,
                    kemSS, encapPk,
                    prefix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), '0'),
                                <$Them, theirIdPk, $Me, pk(~idKey)>))
  ),
  PKRatchet( ), ToReceiver( ),
  NewKemPublicKey( ~id, $Me, $Them, maybeTheirNewKemPk ),
  MessageReceived( ~id, (%i%+%1), $Them, $Me,
                   sdec(ciphertext,
                        hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), '0'),
                                         <$Them, theirIdPk, $Me, pk(~idKey)>)),
                             'msg_key')),
                   $AD
  ),
  SessionSecrets( 'g'^~ecdhSk, theirEcdhPk, kemSS, encapPk,
                  prefix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), '0'),
                              <$Them, theirIdPk, $Me, pk(~idKey)>)),
                  suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), '0'),
                              <$Them, theirIdPk, $Me, pk(~idKey)>)),
                  hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), '0'),
                                   <$Them, theirIdPk, $Me, pk(~idKey)>)),
                       'msg_key')
  ),
  KeysUsed( theirIdPk, 'g'^~ecdhSk, theirEcdhPk, theirEcdhPk^~ecdhSk,
            pqpk(~kemSk), maybeTheirKemPk, maybeTheirNewKemPk, kemSS, encapPk,
            prefix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), '0'),
                        <$Them, theirIdPk, $Me, pk(~idKey)>)),
            suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), '0'),
                        <$Them, theirIdPk, $Me, pk(~idKey)>)),
            hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), '0'),
                             <$Them, theirIdPk, $Me, pk(~idKey)>)),
                 'msg_key')
  ),
  PublicKeyRatchetNewReceiver( ~id, (%i%+%1), $Them, $Me,
                               hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), '0'),
                                    <$Them, theirIdPk, $Me, pk(~idKey)>)
  )
  ]->
   [
   Session( ~id, (%i%+%1), 'R', $Me, ~ecdhSk, ~kemSk, $Them, theirIdPk,
            theirEcdhPk, maybeTheirKemPk, maybeTheirNewKemPk, kemSS, encapPk,
            prefix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), '0'),
                        <$Them, theirIdPk, $Me, pk(~idKey)>)),
            hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), '0'),
                             <$Them, theirIdPk, $Me, pk(~idKey)>)),
                 'chain_key')
   ),
   !RootKey( ~id, (%i%+%1), $Me, kemSS,
             prefix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), '0'),
                         <$Them, theirIdPk, $Me, pk(~idKey)>))
   ),
   !ChainKey( ~id, (%i%+%1), $Me,
              suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), '0'),
                          <$Them, theirIdPk, $Me, pk(~idKey)>))
   ),
   !MessageKey( ~id, (%i%+%1), $Me,
                hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), '0'),
                                 <$Them, theirIdPk, $Me, pk(~idKey)>)),
                     'msg_key')
   )
   ]

  // loop breaker: [1]
  /*
  rule (modulo AC) PublicKeyRatchetNewReceiverNoNewKemSS[color=#b4d9ef]:
     [
     !IdentityKey( $Me, ~idKey ),
     Session( ~id, %i, 'S', $Me, ~ecdhSk, ~kemSk, $Them, theirIdPk, discard1,
              maybeTheirKemPk, None, kemSS, encapPk, rootKey, discard2
     ),
     In( <ciphertext, $AD, signature, theirEcdhPk, (%i%+%1), msgKeyIndicator, 
          maybeTheirNewKemPk, None, None>
     )
     ]
    --[
    PrePQAttack( ), Neq( theirEcdhPk, DH_neutral ), Neq( theirEcdhPk, 'g' ),
    Eq( z.1, true ),
    Eq( msgKeyIndicator,
        hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z, rootKey), '0'),
                              <$Them, theirIdPk, $Me, pk(~idKey)>)),
                  'msg_key'),
             'msg_key_ind')
    ),
    SessionInfo( ~id, (%i%+%1), $Me, $Them ),
    PublicKeyRatchet( theirIdPk, 'g'^~ecdhSk, theirEcdhPk, z, pqpk(~kemSk),
                      maybeTheirKemPk, maybeTheirNewKemPk, kemSS, encapPk,
                      prefix(hkdf(hkdf(hkdf(z, rootKey), '0'),
                                  <$Them, theirIdPk, $Me, pk(~idKey)>))
    ),
    PKRatchet( ), ToReceiver( ),
    NewKemPublicKey( ~id, $Me, $Them, maybeTheirNewKemPk ),
    MessageReceived( ~id, (%i%+%1), $Them, $Me, z.2, $AD ),
    SessionSecrets( 'g'^~ecdhSk, theirEcdhPk, kemSS, encapPk,
                    prefix(hkdf(hkdf(hkdf(z, rootKey), '0'),
                                <$Them, theirIdPk, $Me, pk(~idKey)>)),
                    suffix(hkdf(hkdf(hkdf(z, rootKey), '0'),
                                <$Them, theirIdPk, $Me, pk(~idKey)>)),
                    hkdf(suffix(hkdf(hkdf(hkdf(z, rootKey), '0'),
                                     <$Them, theirIdPk, $Me, pk(~idKey)>)),
                         'msg_key')
    ),
    KeysUsed( theirIdPk, 'g'^~ecdhSk, theirEcdhPk, z, pqpk(~kemSk),
              maybeTheirKemPk, maybeTheirNewKemPk, kemSS, encapPk,
              prefix(hkdf(hkdf(hkdf(z, rootKey), '0'),
                          <$Them, theirIdPk, $Me, pk(~idKey)>)),
              suffix(hkdf(hkdf(hkdf(z, rootKey), '0'),
                          <$Them, theirIdPk, $Me, pk(~idKey)>)),
              hkdf(suffix(hkdf(hkdf(hkdf(z, rootKey), '0'),
                               <$Them, theirIdPk, $Me, pk(~idKey)>)),
                   'msg_key')
    ),
    PublicKeyRatchetNewReceiver( ~id, (%i%+%1), $Them, $Me,
                                 hkdf(hkdf(hkdf(z, rootKey), '0'), <$Them, theirIdPk, $Me, pk(~idKey)>)
    )
    ]->
     [
     Session( ~id, (%i%+%1), 'R', $Me, ~ecdhSk, ~kemSk, $Them, theirIdPk,
              theirEcdhPk, maybeTheirKemPk, maybeTheirNewKemPk, kemSS, encapPk,
              prefix(hkdf(hkdf(hkdf(z, rootKey), '0'),
                          <$Them, theirIdPk, $Me, pk(~idKey)>)),
              hkdf(suffix(hkdf(hkdf(hkdf(z, rootKey), '0'),
                               <$Them, theirIdPk, $Me, pk(~idKey)>)),
                   'chain_key')
     ),
     !RootKey( ~id, (%i%+%1), $Me, kemSS,
               prefix(hkdf(hkdf(hkdf(z, rootKey), '0'),
                           <$Them, theirIdPk, $Me, pk(~idKey)>))
     ),
     !ChainKey( ~id, (%i%+%1), $Me,
                suffix(hkdf(hkdf(hkdf(z, rootKey), '0'),
                            <$Them, theirIdPk, $Me, pk(~idKey)>))
     ),
     !MessageKey( ~id, (%i%+%1), $Me,
                  hkdf(suffix(hkdf(hkdf(hkdf(z, rootKey), '0'),
                                   <$Them, theirIdPk, $Me, pk(~idKey)>)),
                       'msg_key')
     )
     ]
    variants (modulo AC)
     1. $AD   = $AD.52
        $Me   = $Me.53
        $Them = $Them.54
        ~ecdhSk
              = ~ecdhSk.55
        ~idKey
              = ~idKey.57
        ciphertext
              = ciphertext.59
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.65
        msgKeyIndicator
              = msgKeyIndicator.66
        rootKey
              = rootKey.67
        signature
              = signature.68
        theirEcdhPk
              = theirEcdhPk.69
        theirIdPk
              = theirIdPk.70
        z     = theirEcdhPk.69^~ecdhSk.55
        %i    = %i.71
        z.1   = verify(signature.68,
                       <'msg_sig', ciphertext.59, $AD.52, msgKeyIndicator.66, theirEcdhPk.69, 
                        (%i.71%+%1), <$Them.54, theirIdPk.70, $Me.53, pk(~idKey.57)>, 
                        maybeTheirNewKemPk.65, None, None>,
                       theirIdPk.70)
        z.2   = sdec(ciphertext.59,
                     hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk.69^~ecdhSk.55, rootKey.67), '0'),
                                      <$Them.54, theirIdPk.70, $Me.53, pk(~idKey.57)>)),
                          'msg_key'))
    
     2. $AD   = $AD.52
        $Me   = $Me.53
        $Them = $Them.54
        ~idKey
              = ~idKey.57
        ciphertext
              = ciphertext.59
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.65
        msgKeyIndicator
              = msgKeyIndicator.66
        rootKey
              = rootKey.67
        signature
              = signature.68
        theirEcdhPk
              = DH_neutral
        theirIdPk
              = theirIdPk.70
        z     = DH_neutral
        %i    = %i.71
        z.1   = verify(signature.68,
                       <'msg_sig', ciphertext.59, $AD.52, msgKeyIndicator.66, DH_neutral, 
                        (%i.71%+%1), <$Them.54, theirIdPk.70, $Me.53, pk(~idKey.57)>, 
                        maybeTheirNewKemPk.65, None, None>,
                       theirIdPk.70)
        z.2   = sdec(ciphertext.59,
                     hkdf(suffix(hkdf(hkdf(hkdf(DH_neutral, rootKey.67), '0'),
                                      <$Them.54, theirIdPk.70, $Me.53, pk(~idKey.57)>)),
                          'msg_key'))
    
     3. $AD   = $AD.55
        $Me   = $Me.56
        $Them = $Them.57
        ~ecdhSk
              = ~ecdhSk.58
        ~idKey
              = ~idKey.60
        ciphertext
              = ciphertext.62
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.68
        msgKeyIndicator
              = msgKeyIndicator.69
        rootKey
              = rootKey.70
        signature
              = signature.71
        theirEcdhPk
              = z.77^inv(~ecdhSk.58)
        theirIdPk
              = theirIdPk.73
        z     = z.77
        %i    = %i.74
        z.1   = verify(signature.71,
                       <'msg_sig', ciphertext.62, $AD.55, msgKeyIndicator.69, 
                        z.77^inv(~ecdhSk.58), (%i.74%+%1), 
                        <$Them.57, theirIdPk.73, $Me.56, pk(~idKey.60)>, maybeTheirNewKemPk.68, 
                        None, None>,
                       theirIdPk.73)
        z.2   = sdec(ciphertext.62,
                     hkdf(suffix(hkdf(hkdf(hkdf(z.77, rootKey.70), '0'),
                                      <$Them.57, theirIdPk.73, $Me.56, pk(~idKey.60)>)),
                          'msg_key'))
    
     4. $AD   = $AD.63
        $Me   = $Me.64
        $Them = $Them.65
        ~ecdhSk
              = ~ecdhSk.66
        ~idKey
              = ~idKey.68
        ciphertext
              = senc(z.93,
                     hkdf(suffix(hkdf(hkdf(hkdf(z.85, rootKey.78), '0'),
                                      <$Them.65, theirIdPk.81, $Me.64, pk(~idKey.68)>)),
                          'msg_key'))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.76
        msgKeyIndicator
              = msgKeyIndicator.77
        rootKey
              = rootKey.78
        signature
              = signature.79
        theirEcdhPk
              = z.85^inv(~ecdhSk.66)
        theirIdPk
              = theirIdPk.81
        z     = z.85
        %i    = %i.82
        z.1   = verify(signature.79,
                       <'msg_sig', 
                        senc(z.93,
                             hkdf(suffix(hkdf(hkdf(hkdf(z.85, rootKey.78), '0'),
                                              <$Them.65, theirIdPk.81, $Me.64, pk(~idKey.68)>)),
                                  'msg_key')), 
                        $AD.63, msgKeyIndicator.77, z.85^inv(~ecdhSk.66), (%i.82%+%1), 
                        <$Them.65, theirIdPk.81, $Me.64, pk(~idKey.68)>, maybeTheirNewKemPk.76, 
                        None, None>,
                       theirIdPk.81)
        z.2   = z.93
    
     5. $AD   = $AD.63
        $Me   = $Me.64
        $Them = $Them.65
        ~ecdhSk
              = ~ecdhSk.66
        ~idKey
              = ~idKey.68
        ciphertext
              = senc(z.93,
                     hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk.80^~ecdhSk.66, rootKey.78), '0'),
                                      <$Them.65, theirIdPk.81, $Me.64, pk(~idKey.68)>)),
                          'msg_key'))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.76
        msgKeyIndicator
              = msgKeyIndicator.77
        rootKey
              = rootKey.78
        signature
              = signature.79
        theirEcdhPk
              = theirEcdhPk.80
        theirIdPk
              = theirIdPk.81
        z     = theirEcdhPk.80^~ecdhSk.66
        %i    = %i.82
        z.1   = verify(signature.79,
                       <'msg_sig', 
                        senc(z.93,
                             hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk.80^~ecdhSk.66, rootKey.78), '0'),
                                              <$Them.65, theirIdPk.81, $Me.64, pk(~idKey.68)>)),
                                  'msg_key')), 
                        $AD.63, msgKeyIndicator.77, theirEcdhPk.80, (%i.82%+%1), 
                        <$Them.65, theirIdPk.81, $Me.64, pk(~idKey.68)>, maybeTheirNewKemPk.76, 
                        None, None>,
                       theirIdPk.81)
        z.2   = z.93
    
     6. $AD   = $AD.63
        $Me   = $Me.64
        $Them = $Them.65
        ~idKey
              = ~idKey.68
        ciphertext
              = senc(z.93,
                     hkdf(suffix(hkdf(hkdf(hkdf(DH_neutral, rootKey.78), '0'),
                                      <$Them.65, theirIdPk.81, $Me.64, pk(~idKey.68)>)),
                          'msg_key'))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.76
        msgKeyIndicator
              = msgKeyIndicator.77
        rootKey
              = rootKey.78
        signature
              = signature.79
        theirEcdhPk
              = DH_neutral
        theirIdPk
              = theirIdPk.81
        z     = DH_neutral
        %i    = %i.82
        z.1   = verify(signature.79,
                       <'msg_sig', 
                        senc(z.93,
                             hkdf(suffix(hkdf(hkdf(hkdf(DH_neutral, rootKey.78), '0'),
                                              <$Them.65, theirIdPk.81, $Me.64, pk(~idKey.68)>)),
                                  'msg_key')), 
                        $AD.63, msgKeyIndicator.77, DH_neutral, (%i.82%+%1), 
                        <$Them.65, theirIdPk.81, $Me.64, pk(~idKey.68)>, maybeTheirNewKemPk.76, 
                        None, None>,
                       theirIdPk.81)
        z.2   = z.93
    
     7. $AD   = $AD.356
        $Me   = $Me.357
        $Them = $Them.358
        ~ecdhSk
              = ~ecdhSk.359
        ~idKey
              = ~idKey.361
        ciphertext
              = ciphertext.363
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.369
        msgKeyIndicator
              = msgKeyIndicator.370
        rootKey
              = rootKey.371
        signature
              = signature.372
        theirEcdhPk
              = x.709^x.710
        theirIdPk
              = theirIdPk.374
        z     = x.709^(~ecdhSk.359*x.710)
        %i    = %i.375
        z.1   = verify(signature.372,
                       <'msg_sig', ciphertext.363, $AD.356, msgKeyIndicator.370, x.709^x.710, 
                        (%i.375%+%1), <$Them.358, theirIdPk.374, $Me.357, pk(~idKey.361)>, 
                        maybeTheirNewKemPk.369, None, None>,
                       theirIdPk.374)
        z.2   = sdec(ciphertext.363,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.709^(~ecdhSk.359*x.710), rootKey.371), '0'),
                                      <$Them.358, theirIdPk.374, $Me.357, pk(~idKey.361)>)),
                          'msg_key'))
    
     8. $AD   = $AD.363
        $Me   = $Me.364
        $Them = $Them.365
        ~ecdhSk
              = ~ecdhSk.366
        ~idKey
              = ~idKey.368
        ciphertext
              = senc(z.393,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.723^x.724, rootKey.378), '0'),
                                      <$Them.365, theirIdPk.381, $Me.364, pk(~idKey.368)>)),
                          'msg_key'))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.376
        msgKeyIndicator
              = msgKeyIndicator.377
        rootKey
              = rootKey.378
        signature
              = signature.379
        theirEcdhPk
              = x.723^(x.724*inv(~ecdhSk.366))
        theirIdPk
              = theirIdPk.381
        z     = x.723^x.724
        %i    = %i.382
        z.1   = verify(signature.379,
                       <'msg_sig', 
                        senc(z.393,
                             hkdf(suffix(hkdf(hkdf(hkdf(x.723^x.724, rootKey.378), '0'),
                                              <$Them.365, theirIdPk.381, $Me.364, pk(~idKey.368)>)),
                                  'msg_key')), 
                        $AD.363, msgKeyIndicator.377, x.723^(x.724*inv(~ecdhSk.366)), 
                        (%i.382%+%1), <$Them.365, theirIdPk.381, $Me.364, pk(~idKey.368)>, 
                        maybeTheirNewKemPk.376, None, None>,
                       theirIdPk.381)
        z.2   = z.393
    
     9. $AD   = $AD.363
        $Me   = $Me.364
        $Them = $Them.365
        ~ecdhSk
              = ~ecdhSk.366
        ~idKey
              = ~idKey.368
        ciphertext
              = senc(z.393,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.723^inv(x.724), rootKey.378), '0'),
                                      <$Them.365, theirIdPk.381, $Me.364, pk(~idKey.368)>)),
                          'msg_key'))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.376
        msgKeyIndicator
              = msgKeyIndicator.377
        rootKey
              = rootKey.378
        signature
              = signature.379
        theirEcdhPk
              = x.723^inv((~ecdhSk.366*x.724))
        theirIdPk
              = theirIdPk.381
        z     = x.723^inv(x.724)
        %i    = %i.382
        z.1   = verify(signature.379,
                       <'msg_sig', 
                        senc(z.393,
                             hkdf(suffix(hkdf(hkdf(hkdf(x.723^inv(x.724), rootKey.378), '0'),
                                              <$Them.365, theirIdPk.381, $Me.364, pk(~idKey.368)>)),
                                  'msg_key')), 
                        $AD.363, msgKeyIndicator.377, x.723^inv((~ecdhSk.366*x.724)), 
                        (%i.382%+%1), <$Them.365, theirIdPk.381, $Me.364, pk(~idKey.368)>, 
                        maybeTheirNewKemPk.376, None, None>,
                       theirIdPk.381)
        z.2   = z.393
    
    10. $AD   = $AD.363
        $Me   = $Me.364
        $Them = $Them.365
        ~ecdhSk
              = ~ecdhSk.366
        ~idKey
              = ~idKey.368
        ciphertext
              = senc(z.393,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.723^(~ecdhSk.366*x.724), rootKey.378), '0'),
                                      <$Them.365, theirIdPk.381, $Me.364, pk(~idKey.368)>)),
                          'msg_key'))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.376
        msgKeyIndicator
              = msgKeyIndicator.377
        rootKey
              = rootKey.378
        signature
              = signature.379
        theirEcdhPk
              = x.723^x.724
        theirIdPk
              = theirIdPk.381
        z     = x.723^(~ecdhSk.366*x.724)
        %i    = %i.382
        z.1   = verify(signature.379,
                       <'msg_sig', 
                        senc(z.393,
                             hkdf(suffix(hkdf(hkdf(hkdf(x.723^(~ecdhSk.366*x.724), rootKey.378), '0'),
                                              <$Them.365, theirIdPk.381, $Me.364, pk(~idKey.368)>)),
                                  'msg_key')), 
                        $AD.363, msgKeyIndicator.377, x.723^x.724, (%i.382%+%1), 
                        <$Them.365, theirIdPk.381, $Me.364, pk(~idKey.368)>, 
                        maybeTheirNewKemPk.376, None, None>,
                       theirIdPk.381)
        z.2   = z.393
    
    11. $AD   = $AD.364
        $Me   = $Me.365
        $Them = $Them.366
        ~ecdhSk
              = ~ecdhSk.367
        ~idKey
              = ~idKey.369
        ciphertext
              = senc(z.394,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.724^(x.725*inv(x.726)), rootKey.379), '0'),
                                      <$Them.366, theirIdPk.382, $Me.365, pk(~idKey.369)>)),
                          'msg_key'))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.377
        msgKeyIndicator
              = msgKeyIndicator.378
        rootKey
              = rootKey.379
        signature
              = signature.380
        theirEcdhPk
              = x.724^(x.725*inv((~ecdhSk.367*x.726)))
        theirIdPk
              = theirIdPk.382
        z     = x.724^(x.725*inv(x.726))
        %i    = %i.383
        z.1   = verify(signature.380,
                       <'msg_sig', 
                        senc(z.394,
                             hkdf(suffix(hkdf(hkdf(hkdf(x.724^(x.725*inv(x.726)), rootKey.379), '0'),
                                              <$Them.366, theirIdPk.382, $Me.365, pk(~idKey.369)>)),
                                  'msg_key')), 
                        $AD.364, msgKeyIndicator.378, x.724^(x.725*inv((~ecdhSk.367*x.726))), 
                        (%i.383%+%1), <$Them.366, theirIdPk.382, $Me.365, pk(~idKey.369)>, 
                        maybeTheirNewKemPk.377, None, None>,
                       theirIdPk.382)
        z.2   = z.394
    
    12. $AD   = $AD.364
        $Me   = $Me.365
        $Them = $Them.366
        ~idKey
              = ~idKey.369
        ciphertext
              = senc(z.394,
                     hkdf(suffix(hkdf(hkdf(hkdf(DH_neutral, rootKey.379), '0'),
                                      <$Them.366, pk(x.726), $Me.365, pk(~idKey.369)>)),
                          'msg_key'))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.377
        msgKeyIndicator
              = msgKeyIndicator.378
        rootKey
              = rootKey.379
        signature
              = sign(<'msg_sig', 
                      senc(z.394,
                           hkdf(suffix(hkdf(hkdf(hkdf(DH_neutral, rootKey.379), '0'),
                                            <$Them.366, pk(x.726), $Me.365, pk(~idKey.369)>)),
                                'msg_key')), 
                      $AD.364, msgKeyIndicator.378, DH_neutral, (%i.383%+%1), 
                      <$Them.366, pk(x.726), $Me.365, pk(~idKey.369)>, maybeTheirNewKemPk.377, 
                      None, None>,
                     x.726)
        theirEcdhPk
              = DH_neutral
        theirIdPk
              = pk(x.726)
        z     = DH_neutral
        %i    = %i.383
        z.1   = true
        z.2   = z.394
    
    13. $AD   = $AD.365
        $Me   = $Me.366
        $Them = $Them.367
        ~ecdhSk
              = ~ecdhSk.368
        ~idKey
              = ~idKey.370
        ciphertext
              = senc(z.395,
                     hkdf(suffix(hkdf(hkdf(hkdf(z.387, rootKey.380), '0'),
                                      <$Them.367, pk(x.728), $Me.366, pk(~idKey.370)>)),
                          'msg_key'))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.378
        msgKeyIndicator
              = msgKeyIndicator.379
        rootKey
              = rootKey.380
        signature
              = sign(<'msg_sig', 
                      senc(z.395,
                           hkdf(suffix(hkdf(hkdf(hkdf(z.387, rootKey.380), '0'),
                                            <$Them.367, pk(x.728), $Me.366, pk(~idKey.370)>)),
                                'msg_key')), 
                      $AD.365, msgKeyIndicator.379, z.387^inv(~ecdhSk.368), (%i.384%+%1), 
                      <$Them.367, pk(x.728), $Me.366, pk(~idKey.370)>, maybeTheirNewKemPk.378, 
                      None, None>,
                     x.728)
        theirEcdhPk
              = z.387^inv(~ecdhSk.368)
        theirIdPk
              = pk(x.728)
        z     = z.387
        %i    = %i.384
        z.1   = true
        z.2   = z.395
    
    14. $AD   = $AD.365
        $Me   = $Me.366
        $Them = $Them.367
        ~ecdhSk
              = ~ecdhSk.368
        ~idKey
              = ~idKey.370
        ciphertext
              = senc(z.395,
                     hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk.382^~ecdhSk.368, rootKey.380),
                                           '0'),
                                      <$Them.367, pk(x.728), $Me.366, pk(~idKey.370)>)),
                          'msg_key'))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.378
        msgKeyIndicator
              = msgKeyIndicator.379
        rootKey
              = rootKey.380
        signature
              = sign(<'msg_sig', 
                      senc(z.395,
                           hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk.382^~ecdhSk.368, rootKey.380),
                                                 '0'),
                                            <$Them.367, pk(x.728), $Me.366, pk(~idKey.370)>)),
                                'msg_key')), 
                      $AD.365, msgKeyIndicator.379, theirEcdhPk.382, (%i.384%+%1), 
                      <$Them.367, pk(x.728), $Me.366, pk(~idKey.370)>, maybeTheirNewKemPk.378, 
                      None, None>,
                     x.728)
        theirEcdhPk
              = theirEcdhPk.382
        theirIdPk
              = pk(x.728)
        z     = theirEcdhPk.382^~ecdhSk.368
        %i    = %i.384
        z.1   = true
        z.2   = z.395
    
    15. $AD   = $AD.366
        $Me   = $Me.367
        $Them = $Them.368
        ~ecdhSk
              = ~ecdhSk.369
        ~idKey
              = ~idKey.371
        ciphertext
              = senc(z.396,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.727^x.728, rootKey.381), '0'),
                                      <$Them.368, pk(x.730), $Me.367, pk(~idKey.371)>)),
                          'msg_key'))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.379
        msgKeyIndicator
              = msgKeyIndicator.380
        rootKey
              = rootKey.381
        signature
              = sign(<'msg_sig', 
                      senc(z.396,
                           hkdf(suffix(hkdf(hkdf(hkdf(x.727^x.728, rootKey.381), '0'),
                                            <$Them.368, pk(x.730), $Me.367, pk(~idKey.371)>)),
                                'msg_key')), 
                      $AD.366, msgKeyIndicator.380, x.727^(x.728*inv(~ecdhSk.369)), 
                      (%i.385%+%1), <$Them.368, pk(x.730), $Me.367, pk(~idKey.371)>, 
                      maybeTheirNewKemPk.379, None, None>,
                     x.730)
        theirEcdhPk
              = x.727^(x.728*inv(~ecdhSk.369))
        theirIdPk
              = pk(x.730)
        z     = x.727^x.728
        %i    = %i.385
        z.1   = true
        z.2   = z.396
    
    16. $AD   = $AD.366
        $Me   = $Me.367
        $Them = $Them.368
        ~ecdhSk
              = ~ecdhSk.369
        ~idKey
              = ~idKey.371
        ciphertext
              = senc(z.396,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.727^inv(x.728), rootKey.381), '0'),
                                      <$Them.368, pk(x.730), $Me.367, pk(~idKey.371)>)),
                          'msg_key'))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.379
        msgKeyIndicator
              = msgKeyIndicator.380
        rootKey
              = rootKey.381
        signature
              = sign(<'msg_sig', 
                      senc(z.396,
                           hkdf(suffix(hkdf(hkdf(hkdf(x.727^inv(x.728), rootKey.381), '0'),
                                            <$Them.368, pk(x.730), $Me.367, pk(~idKey.371)>)),
                                'msg_key')), 
                      $AD.366, msgKeyIndicator.380, x.727^inv((~ecdhSk.369*x.728)), 
                      (%i.385%+%1), <$Them.368, pk(x.730), $Me.367, pk(~idKey.371)>, 
                      maybeTheirNewKemPk.379, None, None>,
                     x.730)
        theirEcdhPk
              = x.727^inv((~ecdhSk.369*x.728))
        theirIdPk
              = pk(x.730)
        z     = x.727^inv(x.728)
        %i    = %i.385
        z.1   = true
        z.2   = z.396
    
    17. $AD   = $AD.366
        $Me   = $Me.367
        $Them = $Them.368
        ~ecdhSk
              = ~ecdhSk.369
        ~idKey
              = ~idKey.371
        ciphertext
              = senc(z.396,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.727^(~ecdhSk.369*x.728), rootKey.381), '0'),
                                      <$Them.368, pk(x.730), $Me.367, pk(~idKey.371)>)),
                          'msg_key'))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.379
        msgKeyIndicator
              = msgKeyIndicator.380
        rootKey
              = rootKey.381
        signature
              = sign(<'msg_sig', 
                      senc(z.396,
                           hkdf(suffix(hkdf(hkdf(hkdf(x.727^(~ecdhSk.369*x.728), rootKey.381), '0'),
                                            <$Them.368, pk(x.730), $Me.367, pk(~idKey.371)>)),
                                'msg_key')), 
                      $AD.366, msgKeyIndicator.380, x.727^x.728, (%i.385%+%1), 
                      <$Them.368, pk(x.730), $Me.367, pk(~idKey.371)>, maybeTheirNewKemPk.379, 
                      None, None>,
                     x.730)
        theirEcdhPk
              = x.727^x.728
        theirIdPk
              = pk(x.730)
        z     = x.727^(~ecdhSk.369*x.728)
        %i    = %i.385
        z.1   = true
        z.2   = z.396
    
    18. $AD   = $AD.367
        $Me   = $Me.368
        $Them = $Them.369
        ~ecdhSk
              = ~ecdhSk.370
        ~idKey
              = ~idKey.372
        ciphertext
              = senc(z.397,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.728^(x.729*inv(x.730)), rootKey.382), '0'),
                                      <$Them.369, pk(x.732), $Me.368, pk(~idKey.372)>)),
                          'msg_key'))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.380
        msgKeyIndicator
              = msgKeyIndicator.381
        rootKey
              = rootKey.382
        signature
              = sign(<'msg_sig', 
                      senc(z.397,
                           hkdf(suffix(hkdf(hkdf(hkdf(x.728^(x.729*inv(x.730)), rootKey.382), '0'),
                                            <$Them.369, pk(x.732), $Me.368, pk(~idKey.372)>)),
                                'msg_key')), 
                      $AD.367, msgKeyIndicator.381, x.728^(x.729*inv((~ecdhSk.370*x.730))), 
                      (%i.386%+%1), <$Them.369, pk(x.732), $Me.368, pk(~idKey.372)>, 
                      maybeTheirNewKemPk.380, None, None>,
                     x.732)
        theirEcdhPk
              = x.728^(x.729*inv((~ecdhSk.370*x.730)))
        theirIdPk
              = pk(x.732)
        z     = x.728^(x.729*inv(x.730))
        %i    = %i.386
        z.1   = true
        z.2   = z.397
    
    19. $AD   = $AD.370
        $Me   = $Me.371
        $Them = $Them.372
        ~ecdhSk
              = ~ecdhSk.373
        ~idKey
              = ~idKey.375
        ciphertext
              = ciphertext.377
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.383
        msgKeyIndicator
              = msgKeyIndicator.384
        rootKey
              = rootKey.385
        signature
              = signature.386
        theirEcdhPk
              = x.737^inv((~ecdhSk.373*x.738))
        theirIdPk
              = theirIdPk.388
        z     = x.737^inv(x.738)
        %i    = %i.389
        z.1   = verify(signature.386,
                       <'msg_sig', ciphertext.377, $AD.370, msgKeyIndicator.384, 
                        x.737^inv((~ecdhSk.373*x.738)), (%i.389%+%1), 
                        <$Them.372, theirIdPk.388, $Me.371, pk(~idKey.375)>, 
                        maybeTheirNewKemPk.383, None, None>,
                       theirIdPk.388)
        z.2   = sdec(ciphertext.377,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.737^inv(x.738), rootKey.385), '0'),
                                      <$Them.372, theirIdPk.388, $Me.371, pk(~idKey.375)>)),
                          'msg_key'))
    
    20. $AD   = $AD.370
        $Me   = $Me.371
        $Them = $Them.372
        ~ecdhSk
              = ~ecdhSk.373
        ~idKey
              = ~idKey.375
        ciphertext
              = ciphertext.377
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.383
        msgKeyIndicator
              = msgKeyIndicator.384
        rootKey
              = rootKey.385
        signature
              = signature.386
        theirEcdhPk
              = x.737^(x.738*inv(~ecdhSk.373))
        theirIdPk
              = theirIdPk.388
        z     = x.737^x.738
        %i    = %i.389
        z.1   = verify(signature.386,
                       <'msg_sig', ciphertext.377, $AD.370, msgKeyIndicator.384, 
                        x.737^(x.738*inv(~ecdhSk.373)), (%i.389%+%1), 
                        <$Them.372, theirIdPk.388, $Me.371, pk(~idKey.375)>, 
                        maybeTheirNewKemPk.383, None, None>,
                       theirIdPk.388)
        z.2   = sdec(ciphertext.377,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.737^x.738, rootKey.385), '0'),
                                      <$Them.372, theirIdPk.388, $Me.371, pk(~idKey.375)>)),
                          'msg_key'))
    
    21. $AD   = $AD.371
        $Me   = $Me.372
        $Them = $Them.373
        ~ecdhSk
              = ~ecdhSk.374
        ~idKey
              = ~idKey.376
        ciphertext
              = ciphertext.378
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.384
        msgKeyIndicator
              = msgKeyIndicator.385
        rootKey
              = rootKey.386
        signature
              = signature.387
        theirEcdhPk
              = x.738^(x.739*inv((~ecdhSk.374*x.740)))
        theirIdPk
              = theirIdPk.389
        z     = x.738^(x.739*inv(x.740))
        %i    = %i.390
        z.1   = verify(signature.387,
                       <'msg_sig', ciphertext.378, $AD.371, msgKeyIndicator.385, 
                        x.738^(x.739*inv((~ecdhSk.374*x.740))), (%i.390%+%1), 
                        <$Them.373, theirIdPk.389, $Me.372, pk(~idKey.376)>, 
                        maybeTheirNewKemPk.384, None, None>,
                       theirIdPk.389)
        z.2   = sdec(ciphertext.378,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.738^(x.739*inv(x.740)), rootKey.386), '0'),
                                      <$Them.373, theirIdPk.389, $Me.372, pk(~idKey.376)>)),
                          'msg_key'))
    
    22. $AD   = $AD.372
        $Me   = $Me.373
        $Them = $Them.374
        ~idKey
              = ~idKey.377
        ciphertext
              = ciphertext.379
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.385
        msgKeyIndicator
              = msgKeyIndicator.386
        rootKey
              = rootKey.387
        signature
              = sign(<'msg_sig', ciphertext.379, $AD.372, msgKeyIndicator.386, 
                      DH_neutral, (%i.391%+%1), 
                      <$Them.374, pk(x.742), $Me.373, pk(~idKey.377)>, maybeTheirNewKemPk.385, 
                      None, None>,
                     x.742)
        theirEcdhPk
              = DH_neutral
        theirIdPk
              = pk(x.742)
        z     = DH_neutral
        %i    = %i.391
        z.1   = true
        z.2   = sdec(ciphertext.379,
                     hkdf(suffix(hkdf(hkdf(hkdf(DH_neutral, rootKey.387), '0'),
                                      <$Them.374, pk(x.742), $Me.373, pk(~idKey.377)>)),
                          'msg_key'))
    
    23. $AD   = $AD.373
        $Me   = $Me.374
        $Them = $Them.375
        ~ecdhSk
              = ~ecdhSk.376
        ~idKey
              = ~idKey.378
        ciphertext
              = ciphertext.380
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.386
        msgKeyIndicator
              = msgKeyIndicator.387
        rootKey
              = rootKey.388
        signature
              = sign(<'msg_sig', ciphertext.380, $AD.373, msgKeyIndicator.387, 
                      theirEcdhPk.390, (%i.392%+%1), 
                      <$Them.375, pk(x.744), $Me.374, pk(~idKey.378)>, maybeTheirNewKemPk.386, 
                      None, None>,
                     x.744)
        theirEcdhPk
              = theirEcdhPk.390
        theirIdPk
              = pk(x.744)
        z     = theirEcdhPk.390^~ecdhSk.376
        %i    = %i.392
        z.1   = true
        z.2   = sdec(ciphertext.380,
                     hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk.390^~ecdhSk.376, rootKey.388),
                                           '0'),
                                      <$Them.375, pk(x.744), $Me.374, pk(~idKey.378)>)),
                          'msg_key'))
    
    24. $AD   = $AD.373
        $Me   = $Me.374
        $Them = $Them.375
        ~ecdhSk
              = ~ecdhSk.376
        ~idKey
              = ~idKey.378
        ciphertext
              = ciphertext.380
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.386
        msgKeyIndicator
              = msgKeyIndicator.387
        rootKey
              = rootKey.388
        signature
              = sign(<'msg_sig', ciphertext.380, $AD.373, msgKeyIndicator.387, 
                      z.395^inv(~ecdhSk.376), (%i.392%+%1), 
                      <$Them.375, pk(x.744), $Me.374, pk(~idKey.378)>, maybeTheirNewKemPk.386, 
                      None, None>,
                     x.744)
        theirEcdhPk
              = z.395^inv(~ecdhSk.376)
        theirIdPk
              = pk(x.744)
        z     = z.395
        %i    = %i.392
        z.1   = true
        z.2   = sdec(ciphertext.380,
                     hkdf(suffix(hkdf(hkdf(hkdf(z.395, rootKey.388), '0'),
                                      <$Them.375, pk(x.744), $Me.374, pk(~idKey.378)>)),
                          'msg_key'))
    
    25. $AD   = $AD.374
        $Me   = $Me.375
        $Them = $Them.376
        ~ecdhSk
              = ~ecdhSk.377
        ~idKey
              = ~idKey.379
        ciphertext
              = ciphertext.381
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.387
        msgKeyIndicator
              = msgKeyIndicator.388
        rootKey
              = rootKey.389
        signature
              = sign(<'msg_sig', ciphertext.381, $AD.374, msgKeyIndicator.388, 
                      x.743^x.744, (%i.393%+%1), 
                      <$Them.376, pk(x.746), $Me.375, pk(~idKey.379)>, maybeTheirNewKemPk.387, 
                      None, None>,
                     x.746)
        theirEcdhPk
              = x.743^x.744
        theirIdPk
              = pk(x.746)
        z     = x.743^(~ecdhSk.377*x.744)
        %i    = %i.393
        z.1   = true
        z.2   = sdec(ciphertext.381,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.743^(~ecdhSk.377*x.744), rootKey.389), '0'),
                                      <$Them.376, pk(x.746), $Me.375, pk(~idKey.379)>)),
                          'msg_key'))
    
    26. $AD   = $AD.374
        $Me   = $Me.375
        $Them = $Them.376
        ~ecdhSk
              = ~ecdhSk.377
        ~idKey
              = ~idKey.379
        ciphertext
              = ciphertext.381
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.387
        msgKeyIndicator
              = msgKeyIndicator.388
        rootKey
              = rootKey.389
        signature
              = sign(<'msg_sig', ciphertext.381, $AD.374, msgKeyIndicator.388, 
                      x.743^inv((~ecdhSk.377*x.744)), (%i.393%+%1), 
                      <$Them.376, pk(x.746), $Me.375, pk(~idKey.379)>, maybeTheirNewKemPk.387, 
                      None, None>,
                     x.746)
        theirEcdhPk
              = x.743^inv((~ecdhSk.377*x.744))
        theirIdPk
              = pk(x.746)
        z     = x.743^inv(x.744)
        %i    = %i.393
        z.1   = true
        z.2   = sdec(ciphertext.381,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.743^inv(x.744), rootKey.389), '0'),
                                      <$Them.376, pk(x.746), $Me.375, pk(~idKey.379)>)),
                          'msg_key'))
    
    27. $AD   = $AD.374
        $Me   = $Me.375
        $Them = $Them.376
        ~ecdhSk
              = ~ecdhSk.377
        ~idKey
              = ~idKey.379
        ciphertext
              = ciphertext.381
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.387
        msgKeyIndicator
              = msgKeyIndicator.388
        rootKey
              = rootKey.389
        signature
              = sign(<'msg_sig', ciphertext.381, $AD.374, msgKeyIndicator.388, 
                      x.743^(x.744*inv(~ecdhSk.377)), (%i.393%+%1), 
                      <$Them.376, pk(x.746), $Me.375, pk(~idKey.379)>, maybeTheirNewKemPk.387, 
                      None, None>,
                     x.746)
        theirEcdhPk
              = x.743^(x.744*inv(~ecdhSk.377))
        theirIdPk
              = pk(x.746)
        z     = x.743^x.744
        %i    = %i.393
        z.1   = true
        z.2   = sdec(ciphertext.381,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.743^x.744, rootKey.389), '0'),
                                      <$Them.376, pk(x.746), $Me.375, pk(~idKey.379)>)),
                          'msg_key'))
    
    28. $AD   = $AD.375
        $Me   = $Me.376
        $Them = $Them.377
        ~ecdhSk
              = ~ecdhSk.378
        ~idKey
              = ~idKey.380
        ciphertext
              = ciphertext.382
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.388
        msgKeyIndicator
              = msgKeyIndicator.389
        rootKey
              = rootKey.390
        signature
              = sign(<'msg_sig', ciphertext.382, $AD.375, msgKeyIndicator.389, 
                      x.744^(x.745*inv((~ecdhSk.378*x.746))), (%i.394%+%1), 
                      <$Them.377, pk(x.748), $Me.376, pk(~idKey.380)>, maybeTheirNewKemPk.388, 
                      None, None>,
                     x.748)
        theirEcdhPk
              = x.744^(x.745*inv((~ecdhSk.378*x.746)))
        theirIdPk
              = pk(x.748)
        z     = x.744^(x.745*inv(x.746))
        %i    = %i.394
        z.1   = true
        z.2   = sdec(ciphertext.382,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.744^(x.745*inv(x.746)), rootKey.390), '0'),
                                      <$Them.377, pk(x.748), $Me.376, pk(~idKey.380)>)),
                          'msg_key'))
    // loop breaker: [1]
  */

rule (modulo E) PublicKeyRatchetNewReceiverWithSomeNewKemSS[color=#b4d9ef]:
   [
   !IdentityKey( $Me, ~idKey ),
   Session( ~id, %i, 'S', $Me, ~ecdhSk, ~kemSk, $Them, theirIdPk, discard1,
            maybeTheirKemPk, None, discard2, discard3, rootKey, discard4
   ),
   In( <ciphertext, $AD, signature, theirEcdhPk, (%i%+%1), msgKeyIndicator, 
        maybeTheirNewKemPk, Just(kemEncap), None>
   )
   ]
  --[
  PrePQAttack( ), Neq( theirEcdhPk, DH_neutral ), Neq( theirEcdhPk, 'g' ),
  Neq( decap(kemEncap, ~kemSk), '0' ),
  Eq( verify(signature,
             <'msg_sig', ciphertext, $AD, msgKeyIndicator, theirEcdhPk, (%i%+%1), 
              <$Them, theirIdPk, $Me, pk(~idKey)>, maybeTheirNewKemPk, Just(kemEncap), 
              None>,
             theirIdPk),
      true
  ),
  Eq( msgKeyIndicator,
      hkdf(hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey),
                                 decap(kemEncap, ~kemSk)),
                            <$Them, theirIdPk, $Me, pk(~idKey)>)),
                'msg_key'),
           'msg_key_ind')
  ),
  SessionInfo( ~id, (%i%+%1), $Me, $Them ),
  PublicKeyRatchet( theirIdPk, 'g'^~ecdhSk, theirEcdhPk,
                    theirEcdhPk^~ecdhSk, pqpk(~kemSk), maybeTheirKemPk, maybeTheirNewKemPk,
                    decap(kemEncap, ~kemSk), pqpk(~kemSk),
                    prefix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey),
                                     decap(kemEncap, ~kemSk)),
                                <$Them, theirIdPk, $Me, pk(~idKey)>))
  ),
  PKRatchet( ), ToReceiver( ),
  NewKemPublicKey( ~id, $Me, $Them, maybeTheirNewKemPk ),
  MessageReceived( ~id, (%i%+%1), $Them, $Me,
                   sdec(ciphertext,
                        hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey),
                                              decap(kemEncap, ~kemSk)),
                                         <$Them, theirIdPk, $Me, pk(~idKey)>)),
                             'msg_key')),
                   $AD
  ),
  SessionSecrets( 'g'^~ecdhSk, theirEcdhPk, decap(kemEncap, ~kemSk),
                  pqpk(~kemSk),
                  prefix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey),
                                   decap(kemEncap, ~kemSk)),
                              <$Them, theirIdPk, $Me, pk(~idKey)>)),
                  suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey),
                                   decap(kemEncap, ~kemSk)),
                              <$Them, theirIdPk, $Me, pk(~idKey)>)),
                  hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey),
                                        decap(kemEncap, ~kemSk)),
                                   <$Them, theirIdPk, $Me, pk(~idKey)>)),
                       'msg_key')
  ),
  KeysUsed( theirIdPk, 'g'^~ecdhSk, theirEcdhPk, theirEcdhPk^~ecdhSk,
            pqpk(~kemSk), maybeTheirKemPk, maybeTheirNewKemPk,
            decap(kemEncap, ~kemSk), pqpk(~kemSk),
            prefix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey),
                             decap(kemEncap, ~kemSk)),
                        <$Them, theirIdPk, $Me, pk(~idKey)>)),
            suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey),
                             decap(kemEncap, ~kemSk)),
                        <$Them, theirIdPk, $Me, pk(~idKey)>)),
            hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey),
                                  decap(kemEncap, ~kemSk)),
                             <$Them, theirIdPk, $Me, pk(~idKey)>)),
                 'msg_key')
  ),
  PublicKeyRatchetNewReceiver( ~id, (%i%+%1), $Them, $Me,
                               hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey), decap(kemEncap, ~kemSk)),
                                    <$Them, theirIdPk, $Me, pk(~idKey)>)
  ),
  DecapKemSS( ~id, $Me, $Them, decap(kemEncap, ~kemSk), pqpk(~kemSk) )
  ]->
   [
   Session( ~id, (%i%+%1), 'R', $Me, ~ecdhSk, ~kemSk, $Them, theirIdPk,
            theirEcdhPk, maybeTheirKemPk, maybeTheirNewKemPk,
            decap(kemEncap, ~kemSk), pqpk(~kemSk),
            prefix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey),
                             decap(kemEncap, ~kemSk)),
                        <$Them, theirIdPk, $Me, pk(~idKey)>)),
            hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey),
                                  decap(kemEncap, ~kemSk)),
                             <$Them, theirIdPk, $Me, pk(~idKey)>)),
                 'chain_key')
   ),
   !RootKey( ~id, (%i%+%1), $Me, decap(kemEncap, ~kemSk),
             prefix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey),
                              decap(kemEncap, ~kemSk)),
                         <$Them, theirIdPk, $Me, pk(~idKey)>))
   ),
   !ChainKey( ~id, (%i%+%1), $Me,
              suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey),
                               decap(kemEncap, ~kemSk)),
                          <$Them, theirIdPk, $Me, pk(~idKey)>))
   ),
   !MessageKey( ~id, (%i%+%1), $Me,
                hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk^~ecdhSk, rootKey),
                                      decap(kemEncap, ~kemSk)),
                                 <$Them, theirIdPk, $Me, pk(~idKey)>)),
                     'msg_key')
   )
   ]

  // loop breaker: [1]
  /*
  rule (modulo AC) PublicKeyRatchetNewReceiverWithSomeNewKemSS[color=#b4d9ef]:
     [
     !IdentityKey( $Me, ~idKey ),
     Session( ~id, %i, 'S', $Me, ~ecdhSk, ~kemSk, $Them, theirIdPk, discard1,
              maybeTheirKemPk, None, discard2, discard3, rootKey, discard4
     ),
     In( <ciphertext, $AD, signature, theirEcdhPk, (%i%+%1), msgKeyIndicator, 
          maybeTheirNewKemPk, Just(kemEncap), None>
     )
     ]
    --[
    PrePQAttack( ), Neq( theirEcdhPk, DH_neutral ), Neq( theirEcdhPk, 'g' ),
    Neq( z, '0' ), Eq( z.2, true ),
    Eq( msgKeyIndicator,
        hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.1, rootKey), z),
                              <$Them, theirIdPk, $Me, pk(~idKey)>)),
                  'msg_key'),
             'msg_key_ind')
    ),
    SessionInfo( ~id, (%i%+%1), $Me, $Them ),
    PublicKeyRatchet( theirIdPk, 'g'^~ecdhSk, theirEcdhPk, z.1, pqpk(~kemSk),
                      maybeTheirKemPk, maybeTheirNewKemPk, z, pqpk(~kemSk),
                      prefix(hkdf(hkdf(hkdf(z.1, rootKey), z),
                                  <$Them, theirIdPk, $Me, pk(~idKey)>))
    ),
    PKRatchet( ), ToReceiver( ),
    NewKemPublicKey( ~id, $Me, $Them, maybeTheirNewKemPk ),
    MessageReceived( ~id, (%i%+%1), $Them, $Me, z.3, $AD ),
    SessionSecrets( 'g'^~ecdhSk, theirEcdhPk, z, pqpk(~kemSk),
                    prefix(hkdf(hkdf(hkdf(z.1, rootKey), z),
                                <$Them, theirIdPk, $Me, pk(~idKey)>)),
                    suffix(hkdf(hkdf(hkdf(z.1, rootKey), z),
                                <$Them, theirIdPk, $Me, pk(~idKey)>)),
                    hkdf(suffix(hkdf(hkdf(hkdf(z.1, rootKey), z),
                                     <$Them, theirIdPk, $Me, pk(~idKey)>)),
                         'msg_key')
    ),
    KeysUsed( theirIdPk, 'g'^~ecdhSk, theirEcdhPk, z.1, pqpk(~kemSk),
              maybeTheirKemPk, maybeTheirNewKemPk, z, pqpk(~kemSk),
              prefix(hkdf(hkdf(hkdf(z.1, rootKey), z),
                          <$Them, theirIdPk, $Me, pk(~idKey)>)),
              suffix(hkdf(hkdf(hkdf(z.1, rootKey), z),
                          <$Them, theirIdPk, $Me, pk(~idKey)>)),
              hkdf(suffix(hkdf(hkdf(hkdf(z.1, rootKey), z),
                               <$Them, theirIdPk, $Me, pk(~idKey)>)),
                   'msg_key')
    ),
    PublicKeyRatchetNewReceiver( ~id, (%i%+%1), $Them, $Me,
                                 hkdf(hkdf(hkdf(z.1, rootKey), z), <$Them, theirIdPk, $Me, pk(~idKey)>)
    ),
    DecapKemSS( ~id, $Me, $Them, z, pqpk(~kemSk) )
    ]->
     [
     Session( ~id, (%i%+%1), 'R', $Me, ~ecdhSk, ~kemSk, $Them, theirIdPk,
              theirEcdhPk, maybeTheirKemPk, maybeTheirNewKemPk, z, pqpk(~kemSk),
              prefix(hkdf(hkdf(hkdf(z.1, rootKey), z),
                          <$Them, theirIdPk, $Me, pk(~idKey)>)),
              hkdf(suffix(hkdf(hkdf(hkdf(z.1, rootKey), z),
                               <$Them, theirIdPk, $Me, pk(~idKey)>)),
                   'chain_key')
     ),
     !RootKey( ~id, (%i%+%1), $Me, z,
               prefix(hkdf(hkdf(hkdf(z.1, rootKey), z),
                           <$Them, theirIdPk, $Me, pk(~idKey)>))
     ),
     !ChainKey( ~id, (%i%+%1), $Me,
                suffix(hkdf(hkdf(hkdf(z.1, rootKey), z),
                            <$Them, theirIdPk, $Me, pk(~idKey)>))
     ),
     !MessageKey( ~id, (%i%+%1), $Me,
                  hkdf(suffix(hkdf(hkdf(hkdf(z.1, rootKey), z),
                                   <$Them, theirIdPk, $Me, pk(~idKey)>)),
                       'msg_key')
     )
     ]
    variants (modulo AC)
     1. $AD   = $AD.55
        $Me   = $Me.56
        $Them = $Them.57
        ~ecdhSk
              = ~ecdhSk.58
        ~idKey
              = ~idKey.60
        ~kemSk
              = ~kemSk.61
        ciphertext
              = ciphertext.62
        kemEncap
              = kemEncap.67
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.69
        msgKeyIndicator
              = msgKeyIndicator.70
        rootKey
              = rootKey.71
        signature
              = signature.72
        theirEcdhPk
              = theirEcdhPk.73
        theirIdPk
              = theirIdPk.74
        z     = decap(kemEncap.67, ~kemSk.61)
        %i    = %i.75
        z.1   = theirEcdhPk.73^~ecdhSk.58
        z.2   = verify(signature.72,
                       <'msg_sig', ciphertext.62, $AD.55, msgKeyIndicator.70, theirEcdhPk.73, 
                        (%i.75%+%1), <$Them.57, theirIdPk.74, $Me.56, pk(~idKey.60)>, 
                        maybeTheirNewKemPk.69, Just(kemEncap.67), None>,
                       theirIdPk.74)
        z.3   = sdec(ciphertext.62,
                     hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk.73^~ecdhSk.58, rootKey.71),
                                           decap(kemEncap.67, ~kemSk.61)),
                                      <$Them.57, theirIdPk.74, $Me.56, pk(~idKey.60)>)),
                          'msg_key'))
    
     2. $AD   = $AD.55
        $Me   = $Me.56
        $Them = $Them.57
        ~idKey
              = ~idKey.60
        ~kemSk
              = ~kemSk.61
        ciphertext
              = ciphertext.62
        kemEncap
              = kemEncap.67
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.69
        msgKeyIndicator
              = msgKeyIndicator.70
        rootKey
              = rootKey.71
        signature
              = signature.72
        theirEcdhPk
              = DH_neutral
        theirIdPk
              = theirIdPk.74
        z     = decap(kemEncap.67, ~kemSk.61)
        %i    = %i.75
        z.1   = DH_neutral
        z.2   = verify(signature.72,
                       <'msg_sig', ciphertext.62, $AD.55, msgKeyIndicator.70, DH_neutral, 
                        (%i.75%+%1), <$Them.57, theirIdPk.74, $Me.56, pk(~idKey.60)>, 
                        maybeTheirNewKemPk.69, Just(kemEncap.67), None>,
                       theirIdPk.74)
        z.3   = sdec(ciphertext.62,
                     hkdf(suffix(hkdf(hkdf(hkdf(DH_neutral, rootKey.71),
                                           decap(kemEncap.67, ~kemSk.61)),
                                      <$Them.57, theirIdPk.74, $Me.56, pk(~idKey.60)>)),
                          'msg_key'))
    
     3. $AD   = $AD.58
        $Me   = $Me.59
        $Them = $Them.60
        ~ecdhSk
              = ~ecdhSk.61
        ~idKey
              = ~idKey.63
        ~kemSk
              = ~kemSk.64
        ciphertext
              = ciphertext.65
        kemEncap
              = encap(z.81, pqpk(~kemSk.64))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.72
        msgKeyIndicator
              = msgKeyIndicator.73
        rootKey
              = rootKey.74
        signature
              = signature.75
        theirEcdhPk
              = theirEcdhPk.76
        theirIdPk
              = theirIdPk.77
        z     = z.81
        %i    = %i.78
        z.1   = theirEcdhPk.76^~ecdhSk.61
        z.2   = verify(signature.75,
                       <'msg_sig', ciphertext.65, $AD.58, msgKeyIndicator.73, theirEcdhPk.76, 
                        (%i.78%+%1), <$Them.60, theirIdPk.77, $Me.59, pk(~idKey.63)>, 
                        maybeTheirNewKemPk.72, Just(encap(z.81, pqpk(~kemSk.64))), None>,
                       theirIdPk.77)
        z.3   = sdec(ciphertext.65,
                     hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk.76^~ecdhSk.61, rootKey.74), z.81),
                                      <$Them.60, theirIdPk.77, $Me.59, pk(~idKey.63)>)),
                          'msg_key'))
    
     4. $AD   = $AD.58
        $Me   = $Me.59
        $Them = $Them.60
        ~idKey
              = ~idKey.63
        ~kemSk
              = ~kemSk.64
        ciphertext
              = ciphertext.65
        kemEncap
              = encap(z.81, pqpk(~kemSk.64))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.72
        msgKeyIndicator
              = msgKeyIndicator.73
        rootKey
              = rootKey.74
        signature
              = signature.75
        theirEcdhPk
              = DH_neutral
        theirIdPk
              = theirIdPk.77
        z     = z.81
        %i    = %i.78
        z.1   = DH_neutral
        z.2   = verify(signature.75,
                       <'msg_sig', ciphertext.65, $AD.58, msgKeyIndicator.73, DH_neutral, 
                        (%i.78%+%1), <$Them.60, theirIdPk.77, $Me.59, pk(~idKey.63)>, 
                        maybeTheirNewKemPk.72, Just(encap(z.81, pqpk(~kemSk.64))), None>,
                       theirIdPk.77)
        z.3   = sdec(ciphertext.65,
                     hkdf(suffix(hkdf(hkdf(hkdf(DH_neutral, rootKey.74), z.81),
                                      <$Them.60, theirIdPk.77, $Me.59, pk(~idKey.63)>)),
                          'msg_key'))
    
     5. $AD   = $AD.59
        $Me   = $Me.60
        $Them = $Them.61
        ~ecdhSk
              = ~ecdhSk.62
        ~idKey
              = ~idKey.64
        ~kemSk
              = ~kemSk.65
        ciphertext
              = ciphertext.66
        kemEncap
              = kemEncap.71
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.73
        msgKeyIndicator
              = msgKeyIndicator.74
        rootKey
              = rootKey.75
        signature
              = signature.76
        theirEcdhPk
              = z.83^inv(~ecdhSk.62)
        theirIdPk
              = theirIdPk.78
        z     = decap(kemEncap.71, ~kemSk.65)
        %i    = %i.79
        z.1   = z.83
        z.2   = verify(signature.76,
                       <'msg_sig', ciphertext.66, $AD.59, msgKeyIndicator.74, 
                        z.83^inv(~ecdhSk.62), (%i.79%+%1), 
                        <$Them.61, theirIdPk.78, $Me.60, pk(~idKey.64)>, maybeTheirNewKemPk.73, 
                        Just(kemEncap.71), None>,
                       theirIdPk.78)
        z.3   = sdec(ciphertext.66,
                     hkdf(suffix(hkdf(hkdf(hkdf(z.83, rootKey.75),
                                           decap(kemEncap.71, ~kemSk.65)),
                                      <$Them.61, theirIdPk.78, $Me.60, pk(~idKey.64)>)),
                          'msg_key'))
    
     6. $AD   = $AD.59
        $Me   = $Me.60
        $Them = $Them.61
        ~ecdhSk
              = ~ecdhSk.62
        ~idKey
              = ~idKey.64
        ~kemSk
              = ~kemSk.65
        ciphertext
              = ciphertext.66
        kemEncap
              = encap(z.82, pqpk(~kemSk.65))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.73
        msgKeyIndicator
              = msgKeyIndicator.74
        rootKey
              = rootKey.75
        signature
              = signature.76
        theirEcdhPk
              = z.83^inv(~ecdhSk.62)
        theirIdPk
              = theirIdPk.78
        z     = z.82
        %i    = %i.79
        z.1   = z.83
        z.2   = verify(signature.76,
                       <'msg_sig', ciphertext.66, $AD.59, msgKeyIndicator.74, 
                        z.83^inv(~ecdhSk.62), (%i.79%+%1), 
                        <$Them.61, theirIdPk.78, $Me.60, pk(~idKey.64)>, maybeTheirNewKemPk.73, 
                        Just(encap(z.82, pqpk(~kemSk.65))), None>,
                       theirIdPk.78)
        z.3   = sdec(ciphertext.66,
                     hkdf(suffix(hkdf(hkdf(hkdf(z.83, rootKey.75), z.82),
                                      <$Them.61, theirIdPk.78, $Me.60, pk(~idKey.64)>)),
                          'msg_key'))
    
     7. $AD   = $AD.67
        $Me   = $Me.68
        $Them = $Them.69
        ~ecdhSk
              = ~ecdhSk.70
        ~idKey
              = ~idKey.72
        ~kemSk
              = ~kemSk.73
        ciphertext
              = senc(z.99,
                     hkdf(suffix(hkdf(hkdf(hkdf(z.91, rootKey.83), z.90),
                                      <$Them.69, theirIdPk.86, $Me.68, pk(~idKey.72)>)),
                          'msg_key'))
        kemEncap
              = encap(z.90, pqpk(~kemSk.73))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.81
        msgKeyIndicator
              = msgKeyIndicator.82
        rootKey
              = rootKey.83
        signature
              = signature.84
        theirEcdhPk
              = z.91^inv(~ecdhSk.70)
        theirIdPk
              = theirIdPk.86
        z     = z.90
        %i    = %i.87
        z.1   = z.91
        z.2   = verify(signature.84,
                       <'msg_sig', 
                        senc(z.99,
                             hkdf(suffix(hkdf(hkdf(hkdf(z.91, rootKey.83), z.90),
                                              <$Them.69, theirIdPk.86, $Me.68, pk(~idKey.72)>)),
                                  'msg_key')), 
                        $AD.67, msgKeyIndicator.82, z.91^inv(~ecdhSk.70), (%i.87%+%1), 
                        <$Them.69, theirIdPk.86, $Me.68, pk(~idKey.72)>, maybeTheirNewKemPk.81, 
                        Just(encap(z.90, pqpk(~kemSk.73))), None>,
                       theirIdPk.86)
        z.3   = z.99
    
     8. $AD   = $AD.67
        $Me   = $Me.68
        $Them = $Them.69
        ~ecdhSk
              = ~ecdhSk.70
        ~idKey
              = ~idKey.72
        ~kemSk
              = ~kemSk.73
        ciphertext
              = senc(z.99,
                     hkdf(suffix(hkdf(hkdf(hkdf(z.91, rootKey.83),
                                           decap(kemEncap.79, ~kemSk.73)),
                                      <$Them.69, theirIdPk.86, $Me.68, pk(~idKey.72)>)),
                          'msg_key'))
        kemEncap
              = kemEncap.79
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.81
        msgKeyIndicator
              = msgKeyIndicator.82
        rootKey
              = rootKey.83
        signature
              = signature.84
        theirEcdhPk
              = z.91^inv(~ecdhSk.70)
        theirIdPk
              = theirIdPk.86
        z     = decap(kemEncap.79, ~kemSk.73)
        %i    = %i.87
        z.1   = z.91
        z.2   = verify(signature.84,
                       <'msg_sig', 
                        senc(z.99,
                             hkdf(suffix(hkdf(hkdf(hkdf(z.91, rootKey.83),
                                                   decap(kemEncap.79, ~kemSk.73)),
                                              <$Them.69, theirIdPk.86, $Me.68, pk(~idKey.72)>)),
                                  'msg_key')), 
                        $AD.67, msgKeyIndicator.82, z.91^inv(~ecdhSk.70), (%i.87%+%1), 
                        <$Them.69, theirIdPk.86, $Me.68, pk(~idKey.72)>, maybeTheirNewKemPk.81, 
                        Just(kemEncap.79), None>,
                       theirIdPk.86)
        z.3   = z.99
    
     9. $AD   = $AD.67
        $Me   = $Me.68
        $Them = $Them.69
        ~ecdhSk
              = ~ecdhSk.70
        ~idKey
              = ~idKey.72
        ~kemSk
              = ~kemSk.73
        ciphertext
              = senc(z.99,
                     hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk.85^~ecdhSk.70, rootKey.83), z.90),
                                      <$Them.69, theirIdPk.86, $Me.68, pk(~idKey.72)>)),
                          'msg_key'))
        kemEncap
              = encap(z.90, pqpk(~kemSk.73))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.81
        msgKeyIndicator
              = msgKeyIndicator.82
        rootKey
              = rootKey.83
        signature
              = signature.84
        theirEcdhPk
              = theirEcdhPk.85
        theirIdPk
              = theirIdPk.86
        z     = z.90
        %i    = %i.87
        z.1   = theirEcdhPk.85^~ecdhSk.70
        z.2   = verify(signature.84,
                       <'msg_sig', 
                        senc(z.99,
                             hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk.85^~ecdhSk.70, rootKey.83), z.90),
                                              <$Them.69, theirIdPk.86, $Me.68, pk(~idKey.72)>)),
                                  'msg_key')), 
                        $AD.67, msgKeyIndicator.82, theirEcdhPk.85, (%i.87%+%1), 
                        <$Them.69, theirIdPk.86, $Me.68, pk(~idKey.72)>, maybeTheirNewKemPk.81, 
                        Just(encap(z.90, pqpk(~kemSk.73))), None>,
                       theirIdPk.86)
        z.3   = z.99
    
    10. $AD   = $AD.67
        $Me   = $Me.68
        $Them = $Them.69
        ~ecdhSk
              = ~ecdhSk.70
        ~idKey
              = ~idKey.72
        ~kemSk
              = ~kemSk.73
        ciphertext
              = senc(z.99,
                     hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk.85^~ecdhSk.70, rootKey.83),
                                           decap(kemEncap.79, ~kemSk.73)),
                                      <$Them.69, theirIdPk.86, $Me.68, pk(~idKey.72)>)),
                          'msg_key'))
        kemEncap
              = kemEncap.79
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.81
        msgKeyIndicator
              = msgKeyIndicator.82
        rootKey
              = rootKey.83
        signature
              = signature.84
        theirEcdhPk
              = theirEcdhPk.85
        theirIdPk
              = theirIdPk.86
        z     = decap(kemEncap.79, ~kemSk.73)
        %i    = %i.87
        z.1   = theirEcdhPk.85^~ecdhSk.70
        z.2   = verify(signature.84,
                       <'msg_sig', 
                        senc(z.99,
                             hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk.85^~ecdhSk.70, rootKey.83),
                                                   decap(kemEncap.79, ~kemSk.73)),
                                              <$Them.69, theirIdPk.86, $Me.68, pk(~idKey.72)>)),
                                  'msg_key')), 
                        $AD.67, msgKeyIndicator.82, theirEcdhPk.85, (%i.87%+%1), 
                        <$Them.69, theirIdPk.86, $Me.68, pk(~idKey.72)>, maybeTheirNewKemPk.81, 
                        Just(kemEncap.79), None>,
                       theirIdPk.86)
        z.3   = z.99
    
    11. $AD   = $AD.67
        $Me   = $Me.68
        $Them = $Them.69
        ~idKey
              = ~idKey.72
        ~kemSk
              = ~kemSk.73
        ciphertext
              = senc(z.99,
                     hkdf(suffix(hkdf(hkdf(hkdf(DH_neutral, rootKey.83), z.90),
                                      <$Them.69, theirIdPk.86, $Me.68, pk(~idKey.72)>)),
                          'msg_key'))
        kemEncap
              = encap(z.90, pqpk(~kemSk.73))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.81
        msgKeyIndicator
              = msgKeyIndicator.82
        rootKey
              = rootKey.83
        signature
              = signature.84
        theirEcdhPk
              = DH_neutral
        theirIdPk
              = theirIdPk.86
        z     = z.90
        %i    = %i.87
        z.1   = DH_neutral
        z.2   = verify(signature.84,
                       <'msg_sig', 
                        senc(z.99,
                             hkdf(suffix(hkdf(hkdf(hkdf(DH_neutral, rootKey.83), z.90),
                                              <$Them.69, theirIdPk.86, $Me.68, pk(~idKey.72)>)),
                                  'msg_key')), 
                        $AD.67, msgKeyIndicator.82, DH_neutral, (%i.87%+%1), 
                        <$Them.69, theirIdPk.86, $Me.68, pk(~idKey.72)>, maybeTheirNewKemPk.81, 
                        Just(encap(z.90, pqpk(~kemSk.73))), None>,
                       theirIdPk.86)
        z.3   = z.99
    
    12. $AD   = $AD.67
        $Me   = $Me.68
        $Them = $Them.69
        ~idKey
              = ~idKey.72
        ~kemSk
              = ~kemSk.73
        ciphertext
              = senc(z.99,
                     hkdf(suffix(hkdf(hkdf(hkdf(DH_neutral, rootKey.83),
                                           decap(kemEncap.79, ~kemSk.73)),
                                      <$Them.69, theirIdPk.86, $Me.68, pk(~idKey.72)>)),
                          'msg_key'))
        kemEncap
              = kemEncap.79
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.81
        msgKeyIndicator
              = msgKeyIndicator.82
        rootKey
              = rootKey.83
        signature
              = signature.84
        theirEcdhPk
              = DH_neutral
        theirIdPk
              = theirIdPk.86
        z     = decap(kemEncap.79, ~kemSk.73)
        %i    = %i.87
        z.1   = DH_neutral
        z.2   = verify(signature.84,
                       <'msg_sig', 
                        senc(z.99,
                             hkdf(suffix(hkdf(hkdf(hkdf(DH_neutral, rootKey.83),
                                                   decap(kemEncap.79, ~kemSk.73)),
                                              <$Them.69, theirIdPk.86, $Me.68, pk(~idKey.72)>)),
                                  'msg_key')), 
                        $AD.67, msgKeyIndicator.82, DH_neutral, (%i.87%+%1), 
                        <$Them.69, theirIdPk.86, $Me.68, pk(~idKey.72)>, maybeTheirNewKemPk.81, 
                        Just(kemEncap.79), None>,
                       theirIdPk.86)
        z.3   = z.99
    
    13. $AD   = $AD.378
        $Me   = $Me.379
        $Them = $Them.380
        ~ecdhSk
              = ~ecdhSk.381
        ~idKey
              = ~idKey.383
        ~kemSk
              = ~kemSk.384
        ciphertext
              = ciphertext.385
        kemEncap
              = kemEncap.390
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.392
        msgKeyIndicator
              = msgKeyIndicator.393
        rootKey
              = rootKey.394
        signature
              = signature.395
        theirEcdhPk
              = x.753^x.754
        theirIdPk
              = theirIdPk.397
        z     = decap(kemEncap.390, ~kemSk.384)
        %i    = %i.398
        z.1   = x.753^(~ecdhSk.381*x.754)
        z.2   = verify(signature.395,
                       <'msg_sig', ciphertext.385, $AD.378, msgKeyIndicator.393, x.753^x.754, 
                        (%i.398%+%1), <$Them.380, theirIdPk.397, $Me.379, pk(~idKey.383)>, 
                        maybeTheirNewKemPk.392, Just(kemEncap.390), None>,
                       theirIdPk.397)
        z.3   = sdec(ciphertext.385,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.753^(~ecdhSk.381*x.754), rootKey.394),
                                           decap(kemEncap.390, ~kemSk.384)),
                                      <$Them.380, theirIdPk.397, $Me.379, pk(~idKey.383)>)),
                          'msg_key'))
    
    14. $AD   = $AD.385
        $Me   = $Me.386
        $Them = $Them.387
        ~ecdhSk
              = ~ecdhSk.388
        ~idKey
              = ~idKey.390
        ~kemSk
              = ~kemSk.391
        ciphertext
              = senc(z.417,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.767^x.768, rootKey.401), z.408),
                                      <$Them.387, theirIdPk.404, $Me.386, pk(~idKey.390)>)),
                          'msg_key'))
        kemEncap
              = encap(z.408, pqpk(~kemSk.391))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.399
        msgKeyIndicator
              = msgKeyIndicator.400
        rootKey
              = rootKey.401
        signature
              = signature.402
        theirEcdhPk
              = x.767^(x.768*inv(~ecdhSk.388))
        theirIdPk
              = theirIdPk.404
        z     = z.408
        %i    = %i.405
        z.1   = x.767^x.768
        z.2   = verify(signature.402,
                       <'msg_sig', 
                        senc(z.417,
                             hkdf(suffix(hkdf(hkdf(hkdf(x.767^x.768, rootKey.401), z.408),
                                              <$Them.387, theirIdPk.404, $Me.386, pk(~idKey.390)>)),
                                  'msg_key')), 
                        $AD.385, msgKeyIndicator.400, x.767^(x.768*inv(~ecdhSk.388)), 
                        (%i.405%+%1), <$Them.387, theirIdPk.404, $Me.386, pk(~idKey.390)>, 
                        maybeTheirNewKemPk.399, Just(encap(z.408, pqpk(~kemSk.391))), None>,
                       theirIdPk.404)
        z.3   = z.417
    
    15. $AD   = $AD.385
        $Me   = $Me.386
        $Them = $Them.387
        ~ecdhSk
              = ~ecdhSk.388
        ~idKey
              = ~idKey.390
        ~kemSk
              = ~kemSk.391
        ciphertext
              = senc(z.417,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.767^x.768, rootKey.401),
                                           decap(kemEncap.397, ~kemSk.391)),
                                      <$Them.387, theirIdPk.404, $Me.386, pk(~idKey.390)>)),
                          'msg_key'))
        kemEncap
              = kemEncap.397
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.399
        msgKeyIndicator
              = msgKeyIndicator.400
        rootKey
              = rootKey.401
        signature
              = signature.402
        theirEcdhPk
              = x.767^(x.768*inv(~ecdhSk.388))
        theirIdPk
              = theirIdPk.404
        z     = decap(kemEncap.397, ~kemSk.391)
        %i    = %i.405
        z.1   = x.767^x.768
        z.2   = verify(signature.402,
                       <'msg_sig', 
                        senc(z.417,
                             hkdf(suffix(hkdf(hkdf(hkdf(x.767^x.768, rootKey.401),
                                                   decap(kemEncap.397, ~kemSk.391)),
                                              <$Them.387, theirIdPk.404, $Me.386, pk(~idKey.390)>)),
                                  'msg_key')), 
                        $AD.385, msgKeyIndicator.400, x.767^(x.768*inv(~ecdhSk.388)), 
                        (%i.405%+%1), <$Them.387, theirIdPk.404, $Me.386, pk(~idKey.390)>, 
                        maybeTheirNewKemPk.399, Just(kemEncap.397), None>,
                       theirIdPk.404)
        z.3   = z.417
    
    16. $AD   = $AD.385
        $Me   = $Me.386
        $Them = $Them.387
        ~ecdhSk
              = ~ecdhSk.388
        ~idKey
              = ~idKey.390
        ~kemSk
              = ~kemSk.391
        ciphertext
              = senc(z.417,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.767^inv(x.768), rootKey.401), z.408),
                                      <$Them.387, theirIdPk.404, $Me.386, pk(~idKey.390)>)),
                          'msg_key'))
        kemEncap
              = encap(z.408, pqpk(~kemSk.391))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.399
        msgKeyIndicator
              = msgKeyIndicator.400
        rootKey
              = rootKey.401
        signature
              = signature.402
        theirEcdhPk
              = x.767^inv((~ecdhSk.388*x.768))
        theirIdPk
              = theirIdPk.404
        z     = z.408
        %i    = %i.405
        z.1   = x.767^inv(x.768)
        z.2   = verify(signature.402,
                       <'msg_sig', 
                        senc(z.417,
                             hkdf(suffix(hkdf(hkdf(hkdf(x.767^inv(x.768), rootKey.401), z.408),
                                              <$Them.387, theirIdPk.404, $Me.386, pk(~idKey.390)>)),
                                  'msg_key')), 
                        $AD.385, msgKeyIndicator.400, x.767^inv((~ecdhSk.388*x.768)), 
                        (%i.405%+%1), <$Them.387, theirIdPk.404, $Me.386, pk(~idKey.390)>, 
                        maybeTheirNewKemPk.399, Just(encap(z.408, pqpk(~kemSk.391))), None>,
                       theirIdPk.404)
        z.3   = z.417
    
    17. $AD   = $AD.385
        $Me   = $Me.386
        $Them = $Them.387
        ~ecdhSk
              = ~ecdhSk.388
        ~idKey
              = ~idKey.390
        ~kemSk
              = ~kemSk.391
        ciphertext
              = senc(z.417,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.767^inv(x.768), rootKey.401),
                                           decap(kemEncap.397, ~kemSk.391)),
                                      <$Them.387, theirIdPk.404, $Me.386, pk(~idKey.390)>)),
                          'msg_key'))
        kemEncap
              = kemEncap.397
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.399
        msgKeyIndicator
              = msgKeyIndicator.400
        rootKey
              = rootKey.401
        signature
              = signature.402
        theirEcdhPk
              = x.767^inv((~ecdhSk.388*x.768))
        theirIdPk
              = theirIdPk.404
        z     = decap(kemEncap.397, ~kemSk.391)
        %i    = %i.405
        z.1   = x.767^inv(x.768)
        z.2   = verify(signature.402,
                       <'msg_sig', 
                        senc(z.417,
                             hkdf(suffix(hkdf(hkdf(hkdf(x.767^inv(x.768), rootKey.401),
                                                   decap(kemEncap.397, ~kemSk.391)),
                                              <$Them.387, theirIdPk.404, $Me.386, pk(~idKey.390)>)),
                                  'msg_key')), 
                        $AD.385, msgKeyIndicator.400, x.767^inv((~ecdhSk.388*x.768)), 
                        (%i.405%+%1), <$Them.387, theirIdPk.404, $Me.386, pk(~idKey.390)>, 
                        maybeTheirNewKemPk.399, Just(kemEncap.397), None>,
                       theirIdPk.404)
        z.3   = z.417
    
    18. $AD   = $AD.385
        $Me   = $Me.386
        $Them = $Them.387
        ~ecdhSk
              = ~ecdhSk.388
        ~idKey
              = ~idKey.390
        ~kemSk
              = ~kemSk.391
        ciphertext
              = senc(z.417,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.767^(~ecdhSk.388*x.768), rootKey.401),
                                           z.408),
                                      <$Them.387, theirIdPk.404, $Me.386, pk(~idKey.390)>)),
                          'msg_key'))
        kemEncap
              = encap(z.408, pqpk(~kemSk.391))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.399
        msgKeyIndicator
              = msgKeyIndicator.400
        rootKey
              = rootKey.401
        signature
              = signature.402
        theirEcdhPk
              = x.767^x.768
        theirIdPk
              = theirIdPk.404
        z     = z.408
        %i    = %i.405
        z.1   = x.767^(~ecdhSk.388*x.768)
        z.2   = verify(signature.402,
                       <'msg_sig', 
                        senc(z.417,
                             hkdf(suffix(hkdf(hkdf(hkdf(x.767^(~ecdhSk.388*x.768), rootKey.401),
                                                   z.408),
                                              <$Them.387, theirIdPk.404, $Me.386, pk(~idKey.390)>)),
                                  'msg_key')), 
                        $AD.385, msgKeyIndicator.400, x.767^x.768, (%i.405%+%1), 
                        <$Them.387, theirIdPk.404, $Me.386, pk(~idKey.390)>, 
                        maybeTheirNewKemPk.399, Just(encap(z.408, pqpk(~kemSk.391))), None>,
                       theirIdPk.404)
        z.3   = z.417
    
    19. $AD   = $AD.385
        $Me   = $Me.386
        $Them = $Them.387
        ~ecdhSk
              = ~ecdhSk.388
        ~idKey
              = ~idKey.390
        ~kemSk
              = ~kemSk.391
        ciphertext
              = senc(z.417,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.767^(~ecdhSk.388*x.768), rootKey.401),
                                           decap(kemEncap.397, ~kemSk.391)),
                                      <$Them.387, theirIdPk.404, $Me.386, pk(~idKey.390)>)),
                          'msg_key'))
        kemEncap
              = kemEncap.397
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.399
        msgKeyIndicator
              = msgKeyIndicator.400
        rootKey
              = rootKey.401
        signature
              = signature.402
        theirEcdhPk
              = x.767^x.768
        theirIdPk
              = theirIdPk.404
        z     = decap(kemEncap.397, ~kemSk.391)
        %i    = %i.405
        z.1   = x.767^(~ecdhSk.388*x.768)
        z.2   = verify(signature.402,
                       <'msg_sig', 
                        senc(z.417,
                             hkdf(suffix(hkdf(hkdf(hkdf(x.767^(~ecdhSk.388*x.768), rootKey.401),
                                                   decap(kemEncap.397, ~kemSk.391)),
                                              <$Them.387, theirIdPk.404, $Me.386, pk(~idKey.390)>)),
                                  'msg_key')), 
                        $AD.385, msgKeyIndicator.400, x.767^x.768, (%i.405%+%1), 
                        <$Them.387, theirIdPk.404, $Me.386, pk(~idKey.390)>, 
                        maybeTheirNewKemPk.399, Just(kemEncap.397), None>,
                       theirIdPk.404)
        z.3   = z.417
    
    20. $AD   = $AD.386
        $Me   = $Me.387
        $Them = $Them.388
        ~ecdhSk
              = ~ecdhSk.389
        ~idKey
              = ~idKey.391
        ~kemSk
              = ~kemSk.392
        ciphertext
              = senc(z.418,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.768^(x.769*inv(x.770)), rootKey.402),
                                           z.409),
                                      <$Them.388, theirIdPk.405, $Me.387, pk(~idKey.391)>)),
                          'msg_key'))
        kemEncap
              = encap(z.409, pqpk(~kemSk.392))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.400
        msgKeyIndicator
              = msgKeyIndicator.401
        rootKey
              = rootKey.402
        signature
              = signature.403
        theirEcdhPk
              = x.768^(x.769*inv((~ecdhSk.389*x.770)))
        theirIdPk
              = theirIdPk.405
        z     = z.409
        %i    = %i.406
        z.1   = x.768^(x.769*inv(x.770))
        z.2   = verify(signature.403,
                       <'msg_sig', 
                        senc(z.418,
                             hkdf(suffix(hkdf(hkdf(hkdf(x.768^(x.769*inv(x.770)), rootKey.402),
                                                   z.409),
                                              <$Them.388, theirIdPk.405, $Me.387, pk(~idKey.391)>)),
                                  'msg_key')), 
                        $AD.386, msgKeyIndicator.401, x.768^(x.769*inv((~ecdhSk.389*x.770))), 
                        (%i.406%+%1), <$Them.388, theirIdPk.405, $Me.387, pk(~idKey.391)>, 
                        maybeTheirNewKemPk.400, Just(encap(z.409, pqpk(~kemSk.392))), None>,
                       theirIdPk.405)
        z.3   = z.418
    
    21. $AD   = $AD.386
        $Me   = $Me.387
        $Them = $Them.388
        ~ecdhSk
              = ~ecdhSk.389
        ~idKey
              = ~idKey.391
        ~kemSk
              = ~kemSk.392
        ciphertext
              = senc(z.418,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.768^(x.769*inv(x.770)), rootKey.402),
                                           decap(kemEncap.398, ~kemSk.392)),
                                      <$Them.388, theirIdPk.405, $Me.387, pk(~idKey.391)>)),
                          'msg_key'))
        kemEncap
              = kemEncap.398
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.400
        msgKeyIndicator
              = msgKeyIndicator.401
        rootKey
              = rootKey.402
        signature
              = signature.403
        theirEcdhPk
              = x.768^(x.769*inv((~ecdhSk.389*x.770)))
        theirIdPk
              = theirIdPk.405
        z     = decap(kemEncap.398, ~kemSk.392)
        %i    = %i.406
        z.1   = x.768^(x.769*inv(x.770))
        z.2   = verify(signature.403,
                       <'msg_sig', 
                        senc(z.418,
                             hkdf(suffix(hkdf(hkdf(hkdf(x.768^(x.769*inv(x.770)), rootKey.402),
                                                   decap(kemEncap.398, ~kemSk.392)),
                                              <$Them.388, theirIdPk.405, $Me.387, pk(~idKey.391)>)),
                                  'msg_key')), 
                        $AD.386, msgKeyIndicator.401, x.768^(x.769*inv((~ecdhSk.389*x.770))), 
                        (%i.406%+%1), <$Them.388, theirIdPk.405, $Me.387, pk(~idKey.391)>, 
                        maybeTheirNewKemPk.400, Just(kemEncap.398), None>,
                       theirIdPk.405)
        z.3   = z.418
    
    22. $AD   = $AD.387
        $Me   = $Me.388
        $Them = $Them.389
        ~idKey
              = ~idKey.392
        ~kemSk
              = ~kemSk.393
        ciphertext
              = senc(z.419,
                     hkdf(suffix(hkdf(hkdf(hkdf(DH_neutral, rootKey.403), z.410),
                                      <$Them.389, pk(x.772), $Me.388, pk(~idKey.392)>)),
                          'msg_key'))
        kemEncap
              = encap(z.410, pqpk(~kemSk.393))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.401
        msgKeyIndicator
              = msgKeyIndicator.402
        rootKey
              = rootKey.403
        signature
              = sign(<'msg_sig', 
                      senc(z.419,
                           hkdf(suffix(hkdf(hkdf(hkdf(DH_neutral, rootKey.403), z.410),
                                            <$Them.389, pk(x.772), $Me.388, pk(~idKey.392)>)),
                                'msg_key')), 
                      $AD.387, msgKeyIndicator.402, DH_neutral, (%i.407%+%1), 
                      <$Them.389, pk(x.772), $Me.388, pk(~idKey.392)>, maybeTheirNewKemPk.401, 
                      Just(encap(z.410, pqpk(~kemSk.393))), None>,
                     x.772)
        theirEcdhPk
              = DH_neutral
        theirIdPk
              = pk(x.772)
        z     = z.410
        %i    = %i.407
        z.1   = DH_neutral
        z.2   = true
        z.3   = z.419
    
    23. $AD   = $AD.387
        $Me   = $Me.388
        $Them = $Them.389
        ~idKey
              = ~idKey.392
        ~kemSk
              = ~kemSk.393
        ciphertext
              = senc(z.419,
                     hkdf(suffix(hkdf(hkdf(hkdf(DH_neutral, rootKey.403),
                                           decap(kemEncap.399, ~kemSk.393)),
                                      <$Them.389, pk(x.772), $Me.388, pk(~idKey.392)>)),
                          'msg_key'))
        kemEncap
              = kemEncap.399
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.401
        msgKeyIndicator
              = msgKeyIndicator.402
        rootKey
              = rootKey.403
        signature
              = sign(<'msg_sig', 
                      senc(z.419,
                           hkdf(suffix(hkdf(hkdf(hkdf(DH_neutral, rootKey.403),
                                                 decap(kemEncap.399, ~kemSk.393)),
                                            <$Them.389, pk(x.772), $Me.388, pk(~idKey.392)>)),
                                'msg_key')), 
                      $AD.387, msgKeyIndicator.402, DH_neutral, (%i.407%+%1), 
                      <$Them.389, pk(x.772), $Me.388, pk(~idKey.392)>, maybeTheirNewKemPk.401, 
                      Just(kemEncap.399), None>,
                     x.772)
        theirEcdhPk
              = DH_neutral
        theirIdPk
              = pk(x.772)
        z     = decap(kemEncap.399, ~kemSk.393)
        %i    = %i.407
        z.1   = DH_neutral
        z.2   = true
        z.3   = z.419
    
    24. $AD   = $AD.388
        $Me   = $Me.389
        $Them = $Them.390
        ~ecdhSk
              = ~ecdhSk.391
        ~idKey
              = ~idKey.393
        ~kemSk
              = ~kemSk.394
        ciphertext
              = senc(z.420,
                     hkdf(suffix(hkdf(hkdf(hkdf(z.412, rootKey.404), z.411),
                                      <$Them.390, pk(x.774), $Me.389, pk(~idKey.393)>)),
                          'msg_key'))
        kemEncap
              = encap(z.411, pqpk(~kemSk.394))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.402
        msgKeyIndicator
              = msgKeyIndicator.403
        rootKey
              = rootKey.404
        signature
              = sign(<'msg_sig', 
                      senc(z.420,
                           hkdf(suffix(hkdf(hkdf(hkdf(z.412, rootKey.404), z.411),
                                            <$Them.390, pk(x.774), $Me.389, pk(~idKey.393)>)),
                                'msg_key')), 
                      $AD.388, msgKeyIndicator.403, z.412^inv(~ecdhSk.391), (%i.408%+%1), 
                      <$Them.390, pk(x.774), $Me.389, pk(~idKey.393)>, maybeTheirNewKemPk.402, 
                      Just(encap(z.411, pqpk(~kemSk.394))), None>,
                     x.774)
        theirEcdhPk
              = z.412^inv(~ecdhSk.391)
        theirIdPk
              = pk(x.774)
        z     = z.411
        %i    = %i.408
        z.1   = z.412
        z.2   = true
        z.3   = z.420
    
    25. $AD   = $AD.388
        $Me   = $Me.389
        $Them = $Them.390
        ~ecdhSk
              = ~ecdhSk.391
        ~idKey
              = ~idKey.393
        ~kemSk
              = ~kemSk.394
        ciphertext
              = senc(z.420,
                     hkdf(suffix(hkdf(hkdf(hkdf(z.412, rootKey.404),
                                           decap(kemEncap.400, ~kemSk.394)),
                                      <$Them.390, pk(x.774), $Me.389, pk(~idKey.393)>)),
                          'msg_key'))
        kemEncap
              = kemEncap.400
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.402
        msgKeyIndicator
              = msgKeyIndicator.403
        rootKey
              = rootKey.404
        signature
              = sign(<'msg_sig', 
                      senc(z.420,
                           hkdf(suffix(hkdf(hkdf(hkdf(z.412, rootKey.404),
                                                 decap(kemEncap.400, ~kemSk.394)),
                                            <$Them.390, pk(x.774), $Me.389, pk(~idKey.393)>)),
                                'msg_key')), 
                      $AD.388, msgKeyIndicator.403, z.412^inv(~ecdhSk.391), (%i.408%+%1), 
                      <$Them.390, pk(x.774), $Me.389, pk(~idKey.393)>, maybeTheirNewKemPk.402, 
                      Just(kemEncap.400), None>,
                     x.774)
        theirEcdhPk
              = z.412^inv(~ecdhSk.391)
        theirIdPk
              = pk(x.774)
        z     = decap(kemEncap.400, ~kemSk.394)
        %i    = %i.408
        z.1   = z.412
        z.2   = true
        z.3   = z.420
    
    26. $AD   = $AD.388
        $Me   = $Me.389
        $Them = $Them.390
        ~ecdhSk
              = ~ecdhSk.391
        ~idKey
              = ~idKey.393
        ~kemSk
              = ~kemSk.394
        ciphertext
              = senc(z.420,
                     hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk.406^~ecdhSk.391, rootKey.404),
                                           z.411),
                                      <$Them.390, pk(x.774), $Me.389, pk(~idKey.393)>)),
                          'msg_key'))
        kemEncap
              = encap(z.411, pqpk(~kemSk.394))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.402
        msgKeyIndicator
              = msgKeyIndicator.403
        rootKey
              = rootKey.404
        signature
              = sign(<'msg_sig', 
                      senc(z.420,
                           hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk.406^~ecdhSk.391, rootKey.404),
                                                 z.411),
                                            <$Them.390, pk(x.774), $Me.389, pk(~idKey.393)>)),
                                'msg_key')), 
                      $AD.388, msgKeyIndicator.403, theirEcdhPk.406, (%i.408%+%1), 
                      <$Them.390, pk(x.774), $Me.389, pk(~idKey.393)>, maybeTheirNewKemPk.402, 
                      Just(encap(z.411, pqpk(~kemSk.394))), None>,
                     x.774)
        theirEcdhPk
              = theirEcdhPk.406
        theirIdPk
              = pk(x.774)
        z     = z.411
        %i    = %i.408
        z.1   = theirEcdhPk.406^~ecdhSk.391
        z.2   = true
        z.3   = z.420
    
    27. $AD   = $AD.388
        $Me   = $Me.389
        $Them = $Them.390
        ~ecdhSk
              = ~ecdhSk.391
        ~idKey
              = ~idKey.393
        ~kemSk
              = ~kemSk.394
        ciphertext
              = senc(z.420,
                     hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk.406^~ecdhSk.391, rootKey.404),
                                           decap(kemEncap.400, ~kemSk.394)),
                                      <$Them.390, pk(x.774), $Me.389, pk(~idKey.393)>)),
                          'msg_key'))
        kemEncap
              = kemEncap.400
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.402
        msgKeyIndicator
              = msgKeyIndicator.403
        rootKey
              = rootKey.404
        signature
              = sign(<'msg_sig', 
                      senc(z.420,
                           hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk.406^~ecdhSk.391, rootKey.404),
                                                 decap(kemEncap.400, ~kemSk.394)),
                                            <$Them.390, pk(x.774), $Me.389, pk(~idKey.393)>)),
                                'msg_key')), 
                      $AD.388, msgKeyIndicator.403, theirEcdhPk.406, (%i.408%+%1), 
                      <$Them.390, pk(x.774), $Me.389, pk(~idKey.393)>, maybeTheirNewKemPk.402, 
                      Just(kemEncap.400), None>,
                     x.774)
        theirEcdhPk
              = theirEcdhPk.406
        theirIdPk
              = pk(x.774)
        z     = decap(kemEncap.400, ~kemSk.394)
        %i    = %i.408
        z.1   = theirEcdhPk.406^~ecdhSk.391
        z.2   = true
        z.3   = z.420
    
    28. $AD   = $AD.389
        $Me   = $Me.390
        $Them = $Them.391
        ~ecdhSk
              = ~ecdhSk.392
        ~idKey
              = ~idKey.394
        ~kemSk
              = ~kemSk.395
        ciphertext
              = senc(z.421,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.772^x.773, rootKey.405), z.412),
                                      <$Them.391, pk(x.776), $Me.390, pk(~idKey.394)>)),
                          'msg_key'))
        kemEncap
              = encap(z.412, pqpk(~kemSk.395))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.403
        msgKeyIndicator
              = msgKeyIndicator.404
        rootKey
              = rootKey.405
        signature
              = sign(<'msg_sig', 
                      senc(z.421,
                           hkdf(suffix(hkdf(hkdf(hkdf(x.772^x.773, rootKey.405), z.412),
                                            <$Them.391, pk(x.776), $Me.390, pk(~idKey.394)>)),
                                'msg_key')), 
                      $AD.389, msgKeyIndicator.404, x.772^(x.773*inv(~ecdhSk.392)), 
                      (%i.409%+%1), <$Them.391, pk(x.776), $Me.390, pk(~idKey.394)>, 
                      maybeTheirNewKemPk.403, Just(encap(z.412, pqpk(~kemSk.395))), None>,
                     x.776)
        theirEcdhPk
              = x.772^(x.773*inv(~ecdhSk.392))
        theirIdPk
              = pk(x.776)
        z     = z.412
        %i    = %i.409
        z.1   = x.772^x.773
        z.2   = true
        z.3   = z.421
    
    29. $AD   = $AD.389
        $Me   = $Me.390
        $Them = $Them.391
        ~ecdhSk
              = ~ecdhSk.392
        ~idKey
              = ~idKey.394
        ~kemSk
              = ~kemSk.395
        ciphertext
              = senc(z.421,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.772^x.773, rootKey.405),
                                           decap(kemEncap.401, ~kemSk.395)),
                                      <$Them.391, pk(x.776), $Me.390, pk(~idKey.394)>)),
                          'msg_key'))
        kemEncap
              = kemEncap.401
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.403
        msgKeyIndicator
              = msgKeyIndicator.404
        rootKey
              = rootKey.405
        signature
              = sign(<'msg_sig', 
                      senc(z.421,
                           hkdf(suffix(hkdf(hkdf(hkdf(x.772^x.773, rootKey.405),
                                                 decap(kemEncap.401, ~kemSk.395)),
                                            <$Them.391, pk(x.776), $Me.390, pk(~idKey.394)>)),
                                'msg_key')), 
                      $AD.389, msgKeyIndicator.404, x.772^(x.773*inv(~ecdhSk.392)), 
                      (%i.409%+%1), <$Them.391, pk(x.776), $Me.390, pk(~idKey.394)>, 
                      maybeTheirNewKemPk.403, Just(kemEncap.401), None>,
                     x.776)
        theirEcdhPk
              = x.772^(x.773*inv(~ecdhSk.392))
        theirIdPk
              = pk(x.776)
        z     = decap(kemEncap.401, ~kemSk.395)
        %i    = %i.409
        z.1   = x.772^x.773
        z.2   = true
        z.3   = z.421
    
    30. $AD   = $AD.389
        $Me   = $Me.390
        $Them = $Them.391
        ~ecdhSk
              = ~ecdhSk.392
        ~idKey
              = ~idKey.394
        ~kemSk
              = ~kemSk.395
        ciphertext
              = senc(z.421,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.772^inv(x.773), rootKey.405), z.412),
                                      <$Them.391, pk(x.776), $Me.390, pk(~idKey.394)>)),
                          'msg_key'))
        kemEncap
              = encap(z.412, pqpk(~kemSk.395))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.403
        msgKeyIndicator
              = msgKeyIndicator.404
        rootKey
              = rootKey.405
        signature
              = sign(<'msg_sig', 
                      senc(z.421,
                           hkdf(suffix(hkdf(hkdf(hkdf(x.772^inv(x.773), rootKey.405), z.412),
                                            <$Them.391, pk(x.776), $Me.390, pk(~idKey.394)>)),
                                'msg_key')), 
                      $AD.389, msgKeyIndicator.404, x.772^inv((~ecdhSk.392*x.773)), 
                      (%i.409%+%1), <$Them.391, pk(x.776), $Me.390, pk(~idKey.394)>, 
                      maybeTheirNewKemPk.403, Just(encap(z.412, pqpk(~kemSk.395))), None>,
                     x.776)
        theirEcdhPk
              = x.772^inv((~ecdhSk.392*x.773))
        theirIdPk
              = pk(x.776)
        z     = z.412
        %i    = %i.409
        z.1   = x.772^inv(x.773)
        z.2   = true
        z.3   = z.421
    
    31. $AD   = $AD.389
        $Me   = $Me.390
        $Them = $Them.391
        ~ecdhSk
              = ~ecdhSk.392
        ~idKey
              = ~idKey.394
        ~kemSk
              = ~kemSk.395
        ciphertext
              = senc(z.421,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.772^inv(x.773), rootKey.405),
                                           decap(kemEncap.401, ~kemSk.395)),
                                      <$Them.391, pk(x.776), $Me.390, pk(~idKey.394)>)),
                          'msg_key'))
        kemEncap
              = kemEncap.401
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.403
        msgKeyIndicator
              = msgKeyIndicator.404
        rootKey
              = rootKey.405
        signature
              = sign(<'msg_sig', 
                      senc(z.421,
                           hkdf(suffix(hkdf(hkdf(hkdf(x.772^inv(x.773), rootKey.405),
                                                 decap(kemEncap.401, ~kemSk.395)),
                                            <$Them.391, pk(x.776), $Me.390, pk(~idKey.394)>)),
                                'msg_key')), 
                      $AD.389, msgKeyIndicator.404, x.772^inv((~ecdhSk.392*x.773)), 
                      (%i.409%+%1), <$Them.391, pk(x.776), $Me.390, pk(~idKey.394)>, 
                      maybeTheirNewKemPk.403, Just(kemEncap.401), None>,
                     x.776)
        theirEcdhPk
              = x.772^inv((~ecdhSk.392*x.773))
        theirIdPk
              = pk(x.776)
        z     = decap(kemEncap.401, ~kemSk.395)
        %i    = %i.409
        z.1   = x.772^inv(x.773)
        z.2   = true
        z.3   = z.421
    
    32. $AD   = $AD.389
        $Me   = $Me.390
        $Them = $Them.391
        ~ecdhSk
              = ~ecdhSk.392
        ~idKey
              = ~idKey.394
        ~kemSk
              = ~kemSk.395
        ciphertext
              = senc(z.421,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.772^(~ecdhSk.392*x.773), rootKey.405),
                                           z.412),
                                      <$Them.391, pk(x.776), $Me.390, pk(~idKey.394)>)),
                          'msg_key'))
        kemEncap
              = encap(z.412, pqpk(~kemSk.395))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.403
        msgKeyIndicator
              = msgKeyIndicator.404
        rootKey
              = rootKey.405
        signature
              = sign(<'msg_sig', 
                      senc(z.421,
                           hkdf(suffix(hkdf(hkdf(hkdf(x.772^(~ecdhSk.392*x.773), rootKey.405),
                                                 z.412),
                                            <$Them.391, pk(x.776), $Me.390, pk(~idKey.394)>)),
                                'msg_key')), 
                      $AD.389, msgKeyIndicator.404, x.772^x.773, (%i.409%+%1), 
                      <$Them.391, pk(x.776), $Me.390, pk(~idKey.394)>, maybeTheirNewKemPk.403, 
                      Just(encap(z.412, pqpk(~kemSk.395))), None>,
                     x.776)
        theirEcdhPk
              = x.772^x.773
        theirIdPk
              = pk(x.776)
        z     = z.412
        %i    = %i.409
        z.1   = x.772^(~ecdhSk.392*x.773)
        z.2   = true
        z.3   = z.421
    
    33. $AD   = $AD.389
        $Me   = $Me.390
        $Them = $Them.391
        ~ecdhSk
              = ~ecdhSk.392
        ~idKey
              = ~idKey.394
        ~kemSk
              = ~kemSk.395
        ciphertext
              = senc(z.421,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.772^(~ecdhSk.392*x.773), rootKey.405),
                                           decap(kemEncap.401, ~kemSk.395)),
                                      <$Them.391, pk(x.776), $Me.390, pk(~idKey.394)>)),
                          'msg_key'))
        kemEncap
              = kemEncap.401
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.403
        msgKeyIndicator
              = msgKeyIndicator.404
        rootKey
              = rootKey.405
        signature
              = sign(<'msg_sig', 
                      senc(z.421,
                           hkdf(suffix(hkdf(hkdf(hkdf(x.772^(~ecdhSk.392*x.773), rootKey.405),
                                                 decap(kemEncap.401, ~kemSk.395)),
                                            <$Them.391, pk(x.776), $Me.390, pk(~idKey.394)>)),
                                'msg_key')), 
                      $AD.389, msgKeyIndicator.404, x.772^x.773, (%i.409%+%1), 
                      <$Them.391, pk(x.776), $Me.390, pk(~idKey.394)>, maybeTheirNewKemPk.403, 
                      Just(kemEncap.401), None>,
                     x.776)
        theirEcdhPk
              = x.772^x.773
        theirIdPk
              = pk(x.776)
        z     = decap(kemEncap.401, ~kemSk.395)
        %i    = %i.409
        z.1   = x.772^(~ecdhSk.392*x.773)
        z.2   = true
        z.3   = z.421
    
    34. $AD   = $AD.390
        $Me   = $Me.391
        $Them = $Them.392
        ~ecdhSk
              = ~ecdhSk.393
        ~idKey
              = ~idKey.395
        ~kemSk
              = ~kemSk.396
        ciphertext
              = ciphertext.397
        kemEncap
              = encap(z.413, pqpk(~kemSk.396))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.404
        msgKeyIndicator
              = msgKeyIndicator.405
        rootKey
              = rootKey.406
        signature
              = signature.407
        theirEcdhPk
              = x.777^x.778
        theirIdPk
              = theirIdPk.409
        z     = z.413
        %i    = %i.410
        z.1   = x.777^(~ecdhSk.393*x.778)
        z.2   = verify(signature.407,
                       <'msg_sig', ciphertext.397, $AD.390, msgKeyIndicator.405, x.777^x.778, 
                        (%i.410%+%1), <$Them.392, theirIdPk.409, $Me.391, pk(~idKey.395)>, 
                        maybeTheirNewKemPk.404, Just(encap(z.413, pqpk(~kemSk.396))), None>,
                       theirIdPk.409)
        z.3   = sdec(ciphertext.397,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.777^(~ecdhSk.393*x.778), rootKey.406),
                                           z.413),
                                      <$Them.392, theirIdPk.409, $Me.391, pk(~idKey.395)>)),
                          'msg_key'))
    
    35. $AD   = $AD.390
        $Me   = $Me.391
        $Them = $Them.392
        ~ecdhSk
              = ~ecdhSk.393
        ~idKey
              = ~idKey.395
        ~kemSk
              = ~kemSk.396
        ciphertext
              = senc(z.422,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.773^(x.774*inv(x.775)), rootKey.406),
                                           z.413),
                                      <$Them.392, pk(x.778), $Me.391, pk(~idKey.395)>)),
                          'msg_key'))
        kemEncap
              = encap(z.413, pqpk(~kemSk.396))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.404
        msgKeyIndicator
              = msgKeyIndicator.405
        rootKey
              = rootKey.406
        signature
              = sign(<'msg_sig', 
                      senc(z.422,
                           hkdf(suffix(hkdf(hkdf(hkdf(x.773^(x.774*inv(x.775)), rootKey.406),
                                                 z.413),
                                            <$Them.392, pk(x.778), $Me.391, pk(~idKey.395)>)),
                                'msg_key')), 
                      $AD.390, msgKeyIndicator.405, x.773^(x.774*inv((~ecdhSk.393*x.775))), 
                      (%i.410%+%1), <$Them.392, pk(x.778), $Me.391, pk(~idKey.395)>, 
                      maybeTheirNewKemPk.404, Just(encap(z.413, pqpk(~kemSk.396))), None>,
                     x.778)
        theirEcdhPk
              = x.773^(x.774*inv((~ecdhSk.393*x.775)))
        theirIdPk
              = pk(x.778)
        z     = z.413
        %i    = %i.410
        z.1   = x.773^(x.774*inv(x.775))
        z.2   = true
        z.3   = z.422
    
    36. $AD   = $AD.390
        $Me   = $Me.391
        $Them = $Them.392
        ~ecdhSk
              = ~ecdhSk.393
        ~idKey
              = ~idKey.395
        ~kemSk
              = ~kemSk.396
        ciphertext
              = senc(z.422,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.773^(x.774*inv(x.775)), rootKey.406),
                                           decap(kemEncap.402, ~kemSk.396)),
                                      <$Them.392, pk(x.778), $Me.391, pk(~idKey.395)>)),
                          'msg_key'))
        kemEncap
              = kemEncap.402
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.404
        msgKeyIndicator
              = msgKeyIndicator.405
        rootKey
              = rootKey.406
        signature
              = sign(<'msg_sig', 
                      senc(z.422,
                           hkdf(suffix(hkdf(hkdf(hkdf(x.773^(x.774*inv(x.775)), rootKey.406),
                                                 decap(kemEncap.402, ~kemSk.396)),
                                            <$Them.392, pk(x.778), $Me.391, pk(~idKey.395)>)),
                                'msg_key')), 
                      $AD.390, msgKeyIndicator.405, x.773^(x.774*inv((~ecdhSk.393*x.775))), 
                      (%i.410%+%1), <$Them.392, pk(x.778), $Me.391, pk(~idKey.395)>, 
                      maybeTheirNewKemPk.404, Just(kemEncap.402), None>,
                     x.778)
        theirEcdhPk
              = x.773^(x.774*inv((~ecdhSk.393*x.775)))
        theirIdPk
              = pk(x.778)
        z     = decap(kemEncap.402, ~kemSk.396)
        %i    = %i.410
        z.1   = x.773^(x.774*inv(x.775))
        z.2   = true
        z.3   = z.422
    
    37. $AD   = $AD.393
        $Me   = $Me.394
        $Them = $Them.395
        ~ecdhSk
              = ~ecdhSk.396
        ~idKey
              = ~idKey.398
        ~kemSk
              = ~kemSk.399
        ciphertext
              = ciphertext.400
        kemEncap
              = kemEncap.405
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.407
        msgKeyIndicator
              = msgKeyIndicator.408
        rootKey
              = rootKey.409
        signature
              = signature.410
        theirEcdhPk
              = x.783^inv((~ecdhSk.396*x.784))
        theirIdPk
              = theirIdPk.412
        z     = decap(kemEncap.405, ~kemSk.399)
        %i    = %i.413
        z.1   = x.783^inv(x.784)
        z.2   = verify(signature.410,
                       <'msg_sig', ciphertext.400, $AD.393, msgKeyIndicator.408, 
                        x.783^inv((~ecdhSk.396*x.784)), (%i.413%+%1), 
                        <$Them.395, theirIdPk.412, $Me.394, pk(~idKey.398)>, 
                        maybeTheirNewKemPk.407, Just(kemEncap.405), None>,
                       theirIdPk.412)
        z.3   = sdec(ciphertext.400,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.783^inv(x.784), rootKey.409),
                                           decap(kemEncap.405, ~kemSk.399)),
                                      <$Them.395, theirIdPk.412, $Me.394, pk(~idKey.398)>)),
                          'msg_key'))
    
    38. $AD   = $AD.393
        $Me   = $Me.394
        $Them = $Them.395
        ~ecdhSk
              = ~ecdhSk.396
        ~idKey
              = ~idKey.398
        ~kemSk
              = ~kemSk.399
        ciphertext
              = ciphertext.400
        kemEncap
              = kemEncap.405
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.407
        msgKeyIndicator
              = msgKeyIndicator.408
        rootKey
              = rootKey.409
        signature
              = signature.410
        theirEcdhPk
              = x.783^(x.784*inv(~ecdhSk.396))
        theirIdPk
              = theirIdPk.412
        z     = decap(kemEncap.405, ~kemSk.399)
        %i    = %i.413
        z.1   = x.783^x.784
        z.2   = verify(signature.410,
                       <'msg_sig', ciphertext.400, $AD.393, msgKeyIndicator.408, 
                        x.783^(x.784*inv(~ecdhSk.396)), (%i.413%+%1), 
                        <$Them.395, theirIdPk.412, $Me.394, pk(~idKey.398)>, 
                        maybeTheirNewKemPk.407, Just(kemEncap.405), None>,
                       theirIdPk.412)
        z.3   = sdec(ciphertext.400,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.783^x.784, rootKey.409),
                                           decap(kemEncap.405, ~kemSk.399)),
                                      <$Them.395, theirIdPk.412, $Me.394, pk(~idKey.398)>)),
                          'msg_key'))
    
    39. $AD   = $AD.393
        $Me   = $Me.394
        $Them = $Them.395
        ~ecdhSk
              = ~ecdhSk.396
        ~idKey
              = ~idKey.398
        ~kemSk
              = ~kemSk.399
        ciphertext
              = ciphertext.400
        kemEncap
              = encap(z.416, pqpk(~kemSk.399))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.407
        msgKeyIndicator
              = msgKeyIndicator.408
        rootKey
              = rootKey.409
        signature
              = signature.410
        theirEcdhPk
              = x.783^inv((~ecdhSk.396*x.784))
        theirIdPk
              = theirIdPk.412
        z     = z.416
        %i    = %i.413
        z.1   = x.783^inv(x.784)
        z.2   = verify(signature.410,
                       <'msg_sig', ciphertext.400, $AD.393, msgKeyIndicator.408, 
                        x.783^inv((~ecdhSk.396*x.784)), (%i.413%+%1), 
                        <$Them.395, theirIdPk.412, $Me.394, pk(~idKey.398)>, 
                        maybeTheirNewKemPk.407, Just(encap(z.416, pqpk(~kemSk.399))), None>,
                       theirIdPk.412)
        z.3   = sdec(ciphertext.400,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.783^inv(x.784), rootKey.409), z.416),
                                      <$Them.395, theirIdPk.412, $Me.394, pk(~idKey.398)>)),
                          'msg_key'))
    
    40. $AD   = $AD.393
        $Me   = $Me.394
        $Them = $Them.395
        ~ecdhSk
              = ~ecdhSk.396
        ~idKey
              = ~idKey.398
        ~kemSk
              = ~kemSk.399
        ciphertext
              = ciphertext.400
        kemEncap
              = encap(z.416, pqpk(~kemSk.399))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.407
        msgKeyIndicator
              = msgKeyIndicator.408
        rootKey
              = rootKey.409
        signature
              = signature.410
        theirEcdhPk
              = x.783^(x.784*inv(~ecdhSk.396))
        theirIdPk
              = theirIdPk.412
        z     = z.416
        %i    = %i.413
        z.1   = x.783^x.784
        z.2   = verify(signature.410,
                       <'msg_sig', ciphertext.400, $AD.393, msgKeyIndicator.408, 
                        x.783^(x.784*inv(~ecdhSk.396)), (%i.413%+%1), 
                        <$Them.395, theirIdPk.412, $Me.394, pk(~idKey.398)>, 
                        maybeTheirNewKemPk.407, Just(encap(z.416, pqpk(~kemSk.399))), None>,
                       theirIdPk.412)
        z.3   = sdec(ciphertext.400,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.783^x.784, rootKey.409), z.416),
                                      <$Them.395, theirIdPk.412, $Me.394, pk(~idKey.398)>)),
                          'msg_key'))
    
    41. $AD   = $AD.394
        $Me   = $Me.395
        $Them = $Them.396
        ~ecdhSk
              = ~ecdhSk.397
        ~idKey
              = ~idKey.399
        ~kemSk
              = ~kemSk.400
        ciphertext
              = ciphertext.401
        kemEncap
              = kemEncap.406
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.408
        msgKeyIndicator
              = msgKeyIndicator.409
        rootKey
              = rootKey.410
        signature
              = signature.411
        theirEcdhPk
              = x.784^(x.785*inv((~ecdhSk.397*x.786)))
        theirIdPk
              = theirIdPk.413
        z     = decap(kemEncap.406, ~kemSk.400)
        %i    = %i.414
        z.1   = x.784^(x.785*inv(x.786))
        z.2   = verify(signature.411,
                       <'msg_sig', ciphertext.401, $AD.394, msgKeyIndicator.409, 
                        x.784^(x.785*inv((~ecdhSk.397*x.786))), (%i.414%+%1), 
                        <$Them.396, theirIdPk.413, $Me.395, pk(~idKey.399)>, 
                        maybeTheirNewKemPk.408, Just(kemEncap.406), None>,
                       theirIdPk.413)
        z.3   = sdec(ciphertext.401,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.784^(x.785*inv(x.786)), rootKey.410),
                                           decap(kemEncap.406, ~kemSk.400)),
                                      <$Them.396, theirIdPk.413, $Me.395, pk(~idKey.399)>)),
                          'msg_key'))
    
    42. $AD   = $AD.394
        $Me   = $Me.395
        $Them = $Them.396
        ~ecdhSk
              = ~ecdhSk.397
        ~idKey
              = ~idKey.399
        ~kemSk
              = ~kemSk.400
        ciphertext
              = ciphertext.401
        kemEncap
              = encap(z.417, pqpk(~kemSk.400))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.408
        msgKeyIndicator
              = msgKeyIndicator.409
        rootKey
              = rootKey.410
        signature
              = signature.411
        theirEcdhPk
              = x.784^(x.785*inv((~ecdhSk.397*x.786)))
        theirIdPk
              = theirIdPk.413
        z     = z.417
        %i    = %i.414
        z.1   = x.784^(x.785*inv(x.786))
        z.2   = verify(signature.411,
                       <'msg_sig', ciphertext.401, $AD.394, msgKeyIndicator.409, 
                        x.784^(x.785*inv((~ecdhSk.397*x.786))), (%i.414%+%1), 
                        <$Them.396, theirIdPk.413, $Me.395, pk(~idKey.399)>, 
                        maybeTheirNewKemPk.408, Just(encap(z.417, pqpk(~kemSk.400))), None>,
                       theirIdPk.413)
        z.3   = sdec(ciphertext.401,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.784^(x.785*inv(x.786)), rootKey.410),
                                           z.417),
                                      <$Them.396, theirIdPk.413, $Me.395, pk(~idKey.399)>)),
                          'msg_key'))
    
    43. $AD   = $AD.395
        $Me   = $Me.396
        $Them = $Them.397
        ~idKey
              = ~idKey.400
        ~kemSk
              = ~kemSk.401
        ciphertext
              = ciphertext.402
        kemEncap
              = kemEncap.407
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.409
        msgKeyIndicator
              = msgKeyIndicator.410
        rootKey
              = rootKey.411
        signature
              = sign(<'msg_sig', ciphertext.402, $AD.395, msgKeyIndicator.410, 
                      DH_neutral, (%i.415%+%1), 
                      <$Them.397, pk(x.788), $Me.396, pk(~idKey.400)>, maybeTheirNewKemPk.409, 
                      Just(kemEncap.407), None>,
                     x.788)
        theirEcdhPk
              = DH_neutral
        theirIdPk
              = pk(x.788)
        z     = decap(kemEncap.407, ~kemSk.401)
        %i    = %i.415
        z.1   = DH_neutral
        z.2   = true
        z.3   = sdec(ciphertext.402,
                     hkdf(suffix(hkdf(hkdf(hkdf(DH_neutral, rootKey.411),
                                           decap(kemEncap.407, ~kemSk.401)),
                                      <$Them.397, pk(x.788), $Me.396, pk(~idKey.400)>)),
                          'msg_key'))
    
    44. $AD   = $AD.395
        $Me   = $Me.396
        $Them = $Them.397
        ~idKey
              = ~idKey.400
        ~kemSk
              = ~kemSk.401
        ciphertext
              = ciphertext.402
        kemEncap
              = encap(z.418, pqpk(~kemSk.401))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.409
        msgKeyIndicator
              = msgKeyIndicator.410
        rootKey
              = rootKey.411
        signature
              = sign(<'msg_sig', ciphertext.402, $AD.395, msgKeyIndicator.410, 
                      DH_neutral, (%i.415%+%1), 
                      <$Them.397, pk(x.788), $Me.396, pk(~idKey.400)>, maybeTheirNewKemPk.409, 
                      Just(encap(z.418, pqpk(~kemSk.401))), None>,
                     x.788)
        theirEcdhPk
              = DH_neutral
        theirIdPk
              = pk(x.788)
        z     = z.418
        %i    = %i.415
        z.1   = DH_neutral
        z.2   = true
        z.3   = sdec(ciphertext.402,
                     hkdf(suffix(hkdf(hkdf(hkdf(DH_neutral, rootKey.411), z.418),
                                      <$Them.397, pk(x.788), $Me.396, pk(~idKey.400)>)),
                          'msg_key'))
    
    45. $AD   = $AD.396
        $Me   = $Me.397
        $Them = $Them.398
        ~ecdhSk
              = ~ecdhSk.399
        ~idKey
              = ~idKey.401
        ~kemSk
              = ~kemSk.402
        ciphertext
              = ciphertext.403
        kemEncap
              = kemEncap.408
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.410
        msgKeyIndicator
              = msgKeyIndicator.411
        rootKey
              = rootKey.412
        signature
              = sign(<'msg_sig', ciphertext.403, $AD.396, msgKeyIndicator.411, 
                      theirEcdhPk.414, (%i.416%+%1), 
                      <$Them.398, pk(x.790), $Me.397, pk(~idKey.401)>, maybeTheirNewKemPk.410, 
                      Just(kemEncap.408), None>,
                     x.790)
        theirEcdhPk
              = theirEcdhPk.414
        theirIdPk
              = pk(x.790)
        z     = decap(kemEncap.408, ~kemSk.402)
        %i    = %i.416
        z.1   = theirEcdhPk.414^~ecdhSk.399
        z.2   = true
        z.3   = sdec(ciphertext.403,
                     hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk.414^~ecdhSk.399, rootKey.412),
                                           decap(kemEncap.408, ~kemSk.402)),
                                      <$Them.398, pk(x.790), $Me.397, pk(~idKey.401)>)),
                          'msg_key'))
    
    46. $AD   = $AD.396
        $Me   = $Me.397
        $Them = $Them.398
        ~ecdhSk
              = ~ecdhSk.399
        ~idKey
              = ~idKey.401
        ~kemSk
              = ~kemSk.402
        ciphertext
              = ciphertext.403
        kemEncap
              = kemEncap.408
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.410
        msgKeyIndicator
              = msgKeyIndicator.411
        rootKey
              = rootKey.412
        signature
              = sign(<'msg_sig', ciphertext.403, $AD.396, msgKeyIndicator.411, 
                      z.420^inv(~ecdhSk.399), (%i.416%+%1), 
                      <$Them.398, pk(x.790), $Me.397, pk(~idKey.401)>, maybeTheirNewKemPk.410, 
                      Just(kemEncap.408), None>,
                     x.790)
        theirEcdhPk
              = z.420^inv(~ecdhSk.399)
        theirIdPk
              = pk(x.790)
        z     = decap(kemEncap.408, ~kemSk.402)
        %i    = %i.416
        z.1   = z.420
        z.2   = true
        z.3   = sdec(ciphertext.403,
                     hkdf(suffix(hkdf(hkdf(hkdf(z.420, rootKey.412),
                                           decap(kemEncap.408, ~kemSk.402)),
                                      <$Them.398, pk(x.790), $Me.397, pk(~idKey.401)>)),
                          'msg_key'))
    
    47. $AD   = $AD.396
        $Me   = $Me.397
        $Them = $Them.398
        ~ecdhSk
              = ~ecdhSk.399
        ~idKey
              = ~idKey.401
        ~kemSk
              = ~kemSk.402
        ciphertext
              = ciphertext.403
        kemEncap
              = encap(z.419, pqpk(~kemSk.402))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.410
        msgKeyIndicator
              = msgKeyIndicator.411
        rootKey
              = rootKey.412
        signature
              = sign(<'msg_sig', ciphertext.403, $AD.396, msgKeyIndicator.411, 
                      theirEcdhPk.414, (%i.416%+%1), 
                      <$Them.398, pk(x.790), $Me.397, pk(~idKey.401)>, maybeTheirNewKemPk.410, 
                      Just(encap(z.419, pqpk(~kemSk.402))), None>,
                     x.790)
        theirEcdhPk
              = theirEcdhPk.414
        theirIdPk
              = pk(x.790)
        z     = z.419
        %i    = %i.416
        z.1   = theirEcdhPk.414^~ecdhSk.399
        z.2   = true
        z.3   = sdec(ciphertext.403,
                     hkdf(suffix(hkdf(hkdf(hkdf(theirEcdhPk.414^~ecdhSk.399, rootKey.412),
                                           z.419),
                                      <$Them.398, pk(x.790), $Me.397, pk(~idKey.401)>)),
                          'msg_key'))
    
    48. $AD   = $AD.396
        $Me   = $Me.397
        $Them = $Them.398
        ~ecdhSk
              = ~ecdhSk.399
        ~idKey
              = ~idKey.401
        ~kemSk
              = ~kemSk.402
        ciphertext
              = ciphertext.403
        kemEncap
              = encap(z.419, pqpk(~kemSk.402))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.410
        msgKeyIndicator
              = msgKeyIndicator.411
        rootKey
              = rootKey.412
        signature
              = sign(<'msg_sig', ciphertext.403, $AD.396, msgKeyIndicator.411, 
                      z.420^inv(~ecdhSk.399), (%i.416%+%1), 
                      <$Them.398, pk(x.790), $Me.397, pk(~idKey.401)>, maybeTheirNewKemPk.410, 
                      Just(encap(z.419, pqpk(~kemSk.402))), None>,
                     x.790)
        theirEcdhPk
              = z.420^inv(~ecdhSk.399)
        theirIdPk
              = pk(x.790)
        z     = z.419
        %i    = %i.416
        z.1   = z.420
        z.2   = true
        z.3   = sdec(ciphertext.403,
                     hkdf(suffix(hkdf(hkdf(hkdf(z.420, rootKey.412), z.419),
                                      <$Them.398, pk(x.790), $Me.397, pk(~idKey.401)>)),
                          'msg_key'))
    
    49. $AD   = $AD.397
        $Me   = $Me.398
        $Them = $Them.399
        ~ecdhSk
              = ~ecdhSk.400
        ~idKey
              = ~idKey.402
        ~kemSk
              = ~kemSk.403
        ciphertext
              = ciphertext.404
        kemEncap
              = kemEncap.409
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.411
        msgKeyIndicator
              = msgKeyIndicator.412
        rootKey
              = rootKey.413
        signature
              = sign(<'msg_sig', ciphertext.404, $AD.397, msgKeyIndicator.412, 
                      x.789^x.790, (%i.417%+%1), 
                      <$Them.399, pk(x.792), $Me.398, pk(~idKey.402)>, maybeTheirNewKemPk.411, 
                      Just(kemEncap.409), None>,
                     x.792)
        theirEcdhPk
              = x.789^x.790
        theirIdPk
              = pk(x.792)
        z     = decap(kemEncap.409, ~kemSk.403)
        %i    = %i.417
        z.1   = x.789^(~ecdhSk.400*x.790)
        z.2   = true
        z.3   = sdec(ciphertext.404,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.789^(~ecdhSk.400*x.790), rootKey.413),
                                           decap(kemEncap.409, ~kemSk.403)),
                                      <$Them.399, pk(x.792), $Me.398, pk(~idKey.402)>)),
                          'msg_key'))
    
    50. $AD   = $AD.397
        $Me   = $Me.398
        $Them = $Them.399
        ~ecdhSk
              = ~ecdhSk.400
        ~idKey
              = ~idKey.402
        ~kemSk
              = ~kemSk.403
        ciphertext
              = ciphertext.404
        kemEncap
              = kemEncap.409
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.411
        msgKeyIndicator
              = msgKeyIndicator.412
        rootKey
              = rootKey.413
        signature
              = sign(<'msg_sig', ciphertext.404, $AD.397, msgKeyIndicator.412, 
                      x.789^inv((~ecdhSk.400*x.790)), (%i.417%+%1), 
                      <$Them.399, pk(x.792), $Me.398, pk(~idKey.402)>, maybeTheirNewKemPk.411, 
                      Just(kemEncap.409), None>,
                     x.792)
        theirEcdhPk
              = x.789^inv((~ecdhSk.400*x.790))
        theirIdPk
              = pk(x.792)
        z     = decap(kemEncap.409, ~kemSk.403)
        %i    = %i.417
        z.1   = x.789^inv(x.790)
        z.2   = true
        z.3   = sdec(ciphertext.404,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.789^inv(x.790), rootKey.413),
                                           decap(kemEncap.409, ~kemSk.403)),
                                      <$Them.399, pk(x.792), $Me.398, pk(~idKey.402)>)),
                          'msg_key'))
    
    51. $AD   = $AD.397
        $Me   = $Me.398
        $Them = $Them.399
        ~ecdhSk
              = ~ecdhSk.400
        ~idKey
              = ~idKey.402
        ~kemSk
              = ~kemSk.403
        ciphertext
              = ciphertext.404
        kemEncap
              = kemEncap.409
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.411
        msgKeyIndicator
              = msgKeyIndicator.412
        rootKey
              = rootKey.413
        signature
              = sign(<'msg_sig', ciphertext.404, $AD.397, msgKeyIndicator.412, 
                      x.789^(x.790*inv(~ecdhSk.400)), (%i.417%+%1), 
                      <$Them.399, pk(x.792), $Me.398, pk(~idKey.402)>, maybeTheirNewKemPk.411, 
                      Just(kemEncap.409), None>,
                     x.792)
        theirEcdhPk
              = x.789^(x.790*inv(~ecdhSk.400))
        theirIdPk
              = pk(x.792)
        z     = decap(kemEncap.409, ~kemSk.403)
        %i    = %i.417
        z.1   = x.789^x.790
        z.2   = true
        z.3   = sdec(ciphertext.404,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.789^x.790, rootKey.413),
                                           decap(kemEncap.409, ~kemSk.403)),
                                      <$Them.399, pk(x.792), $Me.398, pk(~idKey.402)>)),
                          'msg_key'))
    
    52. $AD   = $AD.397
        $Me   = $Me.398
        $Them = $Them.399
        ~ecdhSk
              = ~ecdhSk.400
        ~idKey
              = ~idKey.402
        ~kemSk
              = ~kemSk.403
        ciphertext
              = ciphertext.404
        kemEncap
              = encap(z.420, pqpk(~kemSk.403))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.411
        msgKeyIndicator
              = msgKeyIndicator.412
        rootKey
              = rootKey.413
        signature
              = sign(<'msg_sig', ciphertext.404, $AD.397, msgKeyIndicator.412, 
                      x.789^x.790, (%i.417%+%1), 
                      <$Them.399, pk(x.792), $Me.398, pk(~idKey.402)>, maybeTheirNewKemPk.411, 
                      Just(encap(z.420, pqpk(~kemSk.403))), None>,
                     x.792)
        theirEcdhPk
              = x.789^x.790
        theirIdPk
              = pk(x.792)
        z     = z.420
        %i    = %i.417
        z.1   = x.789^(~ecdhSk.400*x.790)
        z.2   = true
        z.3   = sdec(ciphertext.404,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.789^(~ecdhSk.400*x.790), rootKey.413),
                                           z.420),
                                      <$Them.399, pk(x.792), $Me.398, pk(~idKey.402)>)),
                          'msg_key'))
    
    53. $AD   = $AD.397
        $Me   = $Me.398
        $Them = $Them.399
        ~ecdhSk
              = ~ecdhSk.400
        ~idKey
              = ~idKey.402
        ~kemSk
              = ~kemSk.403
        ciphertext
              = ciphertext.404
        kemEncap
              = encap(z.420, pqpk(~kemSk.403))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.411
        msgKeyIndicator
              = msgKeyIndicator.412
        rootKey
              = rootKey.413
        signature
              = sign(<'msg_sig', ciphertext.404, $AD.397, msgKeyIndicator.412, 
                      x.789^inv((~ecdhSk.400*x.790)), (%i.417%+%1), 
                      <$Them.399, pk(x.792), $Me.398, pk(~idKey.402)>, maybeTheirNewKemPk.411, 
                      Just(encap(z.420, pqpk(~kemSk.403))), None>,
                     x.792)
        theirEcdhPk
              = x.789^inv((~ecdhSk.400*x.790))
        theirIdPk
              = pk(x.792)
        z     = z.420
        %i    = %i.417
        z.1   = x.789^inv(x.790)
        z.2   = true
        z.3   = sdec(ciphertext.404,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.789^inv(x.790), rootKey.413), z.420),
                                      <$Them.399, pk(x.792), $Me.398, pk(~idKey.402)>)),
                          'msg_key'))
    
    54. $AD   = $AD.397
        $Me   = $Me.398
        $Them = $Them.399
        ~ecdhSk
              = ~ecdhSk.400
        ~idKey
              = ~idKey.402
        ~kemSk
              = ~kemSk.403
        ciphertext
              = ciphertext.404
        kemEncap
              = encap(z.420, pqpk(~kemSk.403))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.411
        msgKeyIndicator
              = msgKeyIndicator.412
        rootKey
              = rootKey.413
        signature
              = sign(<'msg_sig', ciphertext.404, $AD.397, msgKeyIndicator.412, 
                      x.789^(x.790*inv(~ecdhSk.400)), (%i.417%+%1), 
                      <$Them.399, pk(x.792), $Me.398, pk(~idKey.402)>, maybeTheirNewKemPk.411, 
                      Just(encap(z.420, pqpk(~kemSk.403))), None>,
                     x.792)
        theirEcdhPk
              = x.789^(x.790*inv(~ecdhSk.400))
        theirIdPk
              = pk(x.792)
        z     = z.420
        %i    = %i.417
        z.1   = x.789^x.790
        z.2   = true
        z.3   = sdec(ciphertext.404,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.789^x.790, rootKey.413), z.420),
                                      <$Them.399, pk(x.792), $Me.398, pk(~idKey.402)>)),
                          'msg_key'))
    
    55. $AD   = $AD.398
        $Me   = $Me.399
        $Them = $Them.400
        ~ecdhSk
              = ~ecdhSk.401
        ~idKey
              = ~idKey.403
        ~kemSk
              = ~kemSk.404
        ciphertext
              = ciphertext.405
        kemEncap
              = kemEncap.410
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.412
        msgKeyIndicator
              = msgKeyIndicator.413
        rootKey
              = rootKey.414
        signature
              = sign(<'msg_sig', ciphertext.405, $AD.398, msgKeyIndicator.413, 
                      x.790^(x.791*inv((~ecdhSk.401*x.792))), (%i.418%+%1), 
                      <$Them.400, pk(x.794), $Me.399, pk(~idKey.403)>, maybeTheirNewKemPk.412, 
                      Just(kemEncap.410), None>,
                     x.794)
        theirEcdhPk
              = x.790^(x.791*inv((~ecdhSk.401*x.792)))
        theirIdPk
              = pk(x.794)
        z     = decap(kemEncap.410, ~kemSk.404)
        %i    = %i.418
        z.1   = x.790^(x.791*inv(x.792))
        z.2   = true
        z.3   = sdec(ciphertext.405,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.790^(x.791*inv(x.792)), rootKey.414),
                                           decap(kemEncap.410, ~kemSk.404)),
                                      <$Them.400, pk(x.794), $Me.399, pk(~idKey.403)>)),
                          'msg_key'))
    
    56. $AD   = $AD.398
        $Me   = $Me.399
        $Them = $Them.400
        ~ecdhSk
              = ~ecdhSk.401
        ~idKey
              = ~idKey.403
        ~kemSk
              = ~kemSk.404
        ciphertext
              = ciphertext.405
        kemEncap
              = encap(z.421, pqpk(~kemSk.404))
        maybeTheirNewKemPk
              = maybeTheirNewKemPk.412
        msgKeyIndicator
              = msgKeyIndicator.413
        rootKey
              = rootKey.414
        signature
              = sign(<'msg_sig', ciphertext.405, $AD.398, msgKeyIndicator.413, 
                      x.790^(x.791*inv((~ecdhSk.401*x.792))), (%i.418%+%1), 
                      <$Them.400, pk(x.794), $Me.399, pk(~idKey.403)>, maybeTheirNewKemPk.412, 
                      Just(encap(z.421, pqpk(~kemSk.404))), None>,
                     x.794)
        theirEcdhPk
              = x.790^(x.791*inv((~ecdhSk.401*x.792)))
        theirIdPk
              = pk(x.794)
        z     = z.421
        %i    = %i.418
        z.1   = x.790^(x.791*inv(x.792))
        z.2   = true
        z.3   = sdec(ciphertext.405,
                     hkdf(suffix(hkdf(hkdf(hkdf(x.790^(x.791*inv(x.792)), rootKey.414),
                                           z.421),
                                      <$Them.400, pk(x.794), $Me.399, pk(~idKey.403)>)),
                          'msg_key'))
    // loop breaker: [1]
  */

lemma ExecutabilityPublicKeyRatchetSomeNewKEMSS:
  exists-trace
  "∃ id1 id2 i s r rk m ad #t1 #t2 #t3.
    (((((PublicKeyRatchetNewReceiver( id2, i, s, r, rk ) @ #t3) ∧
        (∃ decap pk. DecapKemSS( id2, s, r, decap, pk ) @ #t3)) ∧
       (MessageReceived( id2, i, s, r, m, ad ) @ #t3)) ∧
      (PublicKeyRatchetNewSender( id1, i, s, r, rk ) @ #t1)) ∧
     (MessageSent( id1, i, s, r, m, ad ) @ #t2)) ∧
    (¬(∃ #x. SomeCompromise( ) @ #x))"
/*
guarded formula characterizing all satisfying traces:
"∃ id1 id2 i s r rk m ad #t1 #t2 #t3.
  (PublicKeyRatchetNewReceiver( id2, i, s, r, rk ) @ #t3) ∧
  (MessageReceived( id2, i, s, r, m, ad ) @ #t3) ∧
  (PublicKeyRatchetNewSender( id1, i, s, r, rk ) @ #t1) ∧
  (MessageSent( id1, i, s, r, m, ad ) @ #t2)
 ∧
  (∃ decap pk. (DecapKemSS( id2, s, r, decap, pk ) @ #t3)) ∧
  (∀ #x. (SomeCompromise( ) @ #x) ⇒ ⊥)"
*/
by sorry

lemma ExecutabilityPublicKeyRatchetNoNewKEMSS:
  exists-trace
  "∃ id1 id2 i s r rk m ad #t1 #t2 #t3.
    (((((PublicKeyRatchetNewReceiver( id2, i, s, r, rk ) @ #t3) ∧
        (¬(∃ decap pk. DecapKemSS( id2, s, r, decap, pk ) @ #t3))) ∧
       (MessageReceived( id2, i, s, r, m, ad ) @ #t3)) ∧
      (PublicKeyRatchetNewSender( id1, i, s, r, rk ) @ #t1)) ∧
     (MessageSent( id1, i, s, r, m, ad ) @ #t2)) ∧
    (¬(∃ #x. SomeCompromise( ) @ #x))"
/*
guarded formula characterizing all satisfying traces:
"∃ id1 id2 i s r rk m ad #t1 #t2 #t3.
  (PublicKeyRatchetNewReceiver( id2, i, s, r, rk ) @ #t3) ∧
  (MessageReceived( id2, i, s, r, m, ad ) @ #t3) ∧
  (PublicKeyRatchetNewSender( id1, i, s, r, rk ) @ #t1) ∧
  (MessageSent( id1, i, s, r, m, ad ) @ #t2)
 ∧
  (∀ decap pk. (DecapKemSS( id2, s, r, decap, pk ) @ #t3) ⇒ ⊥) ∧
  (∀ #x. (SomeCompromise( ) @ #x) ⇒ ⊥)"
*/
by sorry

lemma Auto_SessionStart [reuse, use_induction]:
  all-traces
  "∀ id li me them theirIdPk a b c d e f g h i j k #t.
    ((SessionInfo( id, li, me, them ) @ #t) ∧
     (KeysUsed( theirIdPk, a, b, c, d, e, f, g, h, i, j, k ) @ #t)) ⇒
    (∃ #x.
      (SessionStart( theirIdPk ) @ #x) ∧
      (SessionInfo( id, %1, me, them ) @ #x))"
/*
guarded formula characterizing all counter-examples:
"∃ id li me them theirIdPk a b c d e f g h i j k #t.
  (SessionInfo( id, li, me, them ) @ #t) ∧
  (KeysUsed( theirIdPk, a, b, c, d, e, f, g, h, i, j, k ) @ #t)
 ∧
  ∀ #x.
   (SessionStart( theirIdPk ) @ #x) ∧ (SessionInfo( id, %1, me, them ) @ #x)
  ⇒
   ⊥"
*/
by sorry

lemma Auto_SessionStartUnique [reuse]:
  all-traces
  "∀ id a1 a2 b1 b2 #t1 #t2.
    ((SessionInfo( id, %1, a1, b1 ) @ #t1) ∧
     (SessionInfo( id, %1, a2, b2 ) @ #t2)) ⇒
    (#t1 = #t2)"
/*
guarded formula characterizing all counter-examples:
"∃ id a1 a2 b1 b2 #t1 #t2.
  (SessionInfo( id, %1, a1, b1 ) @ #t1) ∧
  (SessionInfo( id, %1, a2, b2 ) @ #t2)
 ∧
  ¬(#t1 = #t2)"
*/
by sorry

lemma Auto_ECDHSkOrigin [reuse, use_induction]:
  all-traces
  "∀ id li me them myPk a b c d e f g h i j k #t.
    ((SessionInfo( id, li, me, them ) @ #t) ∧
     (KeysUsed( a, myPk, b, c, d, e, f, g, h, i, j, k ) @ #t)) ⇒
    ((∃ #x.
       (ECDHKeyGen( id, me, them, myPk ) @ #x) ∧ ((#x < #t) ∨ (#x = #t))) ∨
     (∃ #x. (ECDHPreKeyGen( me, myPk ) @ #x) ∧ (#x < #t)))"
/*
guarded formula characterizing all counter-examples:
"∃ id li me them myPk a b c d e f g h i j k #t.
  (SessionInfo( id, li, me, them ) @ #t) ∧
  (KeysUsed( a, myPk, b, c, d, e, f, g, h, i, j, k ) @ #t)
 ∧
  (∀ #x.
    (ECDHKeyGen( id, me, them, myPk ) @ #x) ⇒ (¬(#x < #t)) ∧ (¬(#x = #t))) ∧
  (∀ #x. (ECDHPreKeyGen( me, myPk ) @ #x) ⇒ ¬(#x < #t))"
*/
by sorry

lemma Auto_RootKeyConnectionSend [reuse, use_induction]:
  all-traces
  "∀ id i me them m ad theirIdPk myPk theirPk maybeNewKemPk ecdhSS myKemPk
     maybeTheirKemPk kemSS encapPk rk ck mk #t.
    (((MessageSent( id, i, me, them, m, ad ) @ #t) ∧
      (SymmetricRatchet( ) @ #t)) ∧
     (KeysUsed( theirIdPk, myPk, theirPk, ecdhSS, maybeNewKemPk, myKemPk,
                maybeTheirKemPk, kemSS, encapPk, rk, ck, mk
      ) @ #t)) ⇒
    (∃ i2 #x.
      ((((SessionInfo( id, i2, me, them ) @ #x) ∧
         (PublicKeyRatchet( theirIdPk, myPk, theirPk, ecdhSS, maybeNewKemPk,
                            myKemPk, maybeTheirKemPk, kemSS, encapPk, rk
          ) @ #x)) ∧
        (ToSender( ) @ #x)) ∧
       (#x < #t)) ∧
      (i2 ⊏ i))"
/*
guarded formula characterizing all counter-examples:
"∃ id i me them m ad theirIdPk myPk theirPk maybeNewKemPk ecdhSS myKemPk
   maybeTheirKemPk kemSS encapPk rk ck mk #t.
  (MessageSent( id, i, me, them, m, ad ) @ #t) ∧
  (SymmetricRatchet( ) @ #t) ∧
  (KeysUsed( theirIdPk, myPk, theirPk, ecdhSS, maybeNewKemPk, myKemPk,
             maybeTheirKemPk, kemSS, encapPk, rk, ck, mk
   ) @ #t)
 ∧
  ∀ i2 #x.
   (SessionInfo( id, i2, me, them ) @ #x) ∧
   (PublicKeyRatchet( theirIdPk, myPk, theirPk, ecdhSS, maybeNewKemPk,
                      myKemPk, maybeTheirKemPk, kemSS, encapPk, rk
    ) @ #x) ∧
   (ToSender( ) @ #x)
  ⇒
   ((¬(#x < #t)) ∨ (¬(i2 ⊏ i)))"
*/
by sorry

lemma Auto_RootKeyConnectionReceive [reuse, use_induction]:
  all-traces
  "∀ id i me them m ad theirIdPk myPk theirPk ecdhSS myKemPk
     maybeTheirKemPk maybeNewKemPk kemSS encapPk rk ck mk #t.
    (((MessageReceived( id, i, them, me, m, ad ) @ #t) ∧
      (SymmetricRatchet( ) @ #t)) ∧
     (KeysUsed( theirIdPk, myPk, theirPk, ecdhSS, myKemPk, maybeTheirKemPk,
                maybeNewKemPk, kemSS, encapPk, rk, ck, mk
      ) @ #t)) ⇒
    (∃ i2 #x.
      ((((SessionInfo( id, i2, me, them ) @ #x) ∧
         (PublicKeyRatchet( theirIdPk, myPk, theirPk, ecdhSS, myKemPk,
                            maybeTheirKemPk, maybeNewKemPk, kemSS, encapPk, rk
          ) @ #x)) ∧
        (ToReceiver( ) @ #x)) ∧
       (#x < #t)) ∧
      (i2 ⊏ i))"
/*
guarded formula characterizing all counter-examples:
"∃ id i me them m ad theirIdPk myPk theirPk ecdhSS myKemPk
   maybeTheirKemPk maybeNewKemPk kemSS encapPk rk ck mk #t.
  (MessageReceived( id, i, them, me, m, ad ) @ #t) ∧
  (SymmetricRatchet( ) @ #t) ∧
  (KeysUsed( theirIdPk, myPk, theirPk, ecdhSS, myKemPk, maybeTheirKemPk,
             maybeNewKemPk, kemSS, encapPk, rk, ck, mk
   ) @ #t)
 ∧
  ∀ i2 #x.
   (SessionInfo( id, i2, me, them ) @ #x) ∧
   (PublicKeyRatchet( theirIdPk, myPk, theirPk, ecdhSS, myKemPk,
                      maybeTheirKemPk, maybeNewKemPk, kemSS, encapPk, rk
    ) @ #x) ∧
   (ToReceiver( ) @ #x)
  ⇒
   ((¬(#x < #t)) ∨ (¬(i2 ⊏ i)))"
*/
by sorry

lemma Auto_RootKeyMonotonicity [reuse, use_induction]:
  all-traces
  "∀ id li1 li2 me1 me2 them1 them2 a1 a2 b1 b2 c1 c2 d1 d2 e1 e2 f1 f2 g1
     g2 h1 h2 i1 i2 rk1 rk2 j1 j2 k1 k2 #t1 #t2.
    (((((SessionInfo( id, li1, me1, them1 ) @ #t1) ∧
        (KeysUsed( a1, b1, c1, d1, e1, f1, g1, h1, i1, rk1, j1, k1 ) @ #t1)) ∧
       (SessionInfo( id, li2, me2, them2 ) @ #t2)) ∧
      (KeysUsed( a2, b2, c2, d2, e2, f2, g2, h2, i2, rk2, j2, k2 ) @ #t2)) ∧
     (#t1 < #t2)) ⇒
    ((rk1 ⊏ rk2) ∨ (rk1 = rk2))"
/*
guarded formula characterizing all counter-examples:
"∃ id li1 li2 me1 me2 them1 them2 a1 a2 b1 b2 c1 c2 d1 d2 e1 e2 f1 f2 g1
   g2 h1 h2 i1 i2 rk1 rk2 j1 j2 k1 k2 #t1 #t2.
  (SessionInfo( id, li1, me1, them1 ) @ #t1) ∧
  (KeysUsed( a1, b1, c1, d1, e1, f1, g1, h1, i1, rk1, j1, k1 ) @ #t1) ∧
  (SessionInfo( id, li2, me2, them2 ) @ #t2) ∧
  (KeysUsed( a2, b2, c2, d2, e2, f2, g2, h2, i2, rk2, j2, k2 ) @ #t2)
 ∧
  (#t1 < #t2) ∧ (¬(rk1 ⊏ rk2)) ∧ (¬(rk1 = rk2))"
*/
by sorry

lemma Auto_ChainKeyMonotonicity [reuse, use_induction,
                                 hide_lemma=Auto_SessionStart, hide_lemma=Auto_SessionStartUnique,
                                 hide_lemma=Auto_RootKeyConnectionSend, hide_lemma=Auto_ECDHSkOrigin,
                                 hide_lemma=Auto_RootKeyConnectionReceive,
                                 hide_lemma=Auto_RootKeyMonotonicity]:
  all-traces
  "∀ rkCK ck a b c d e f g h i j #t.
    (KeysUsed( a, b, c, d, e, f, g, h, i, prefix(rkCK), ck, j ) @ #t) ⇒
    (rkCK ⊏ ck)"
/*
guarded formula characterizing all counter-examples:
"∃ rkCK ck a b c d e f g h i j #t.
  (KeysUsed( a, b, c, d, e, f, g, h, i, prefix(rkCK), ck, j ) @ #t)
 ∧
  ¬(rkCK ⊏ ck)"
*/
by sorry

lemma Auto_RootKeyConnectionInjectivity [reuse, use_induction,
                                         hide_lemma=Auto_RootKeyConnectionSend,
                                         hide_lemma=Auto_RootKeyConnectionReceive,
                                         hide_lemma=Auto_ChainKeyMonotonicity]:
  all-traces
  "∀ id i1 i2 me them theirIdPk myPk theirPk ecdhSS myKemPk maybeTheirKemPk
     maybeNewKemPk kemSS encapPk rk #t1 #t2.
    ((((SessionInfo( id, i1, me, them ) @ #t1) ∧
       (PublicKeyRatchet( theirIdPk, myPk, theirPk, ecdhSS, myKemPk,
                          maybeTheirKemPk, maybeNewKemPk, kemSS, encapPk, rk
        ) @ #t1)) ∧
      (SessionInfo( id, i2, me, them ) @ #t2)) ∧
     (PublicKeyRatchet( theirIdPk, myPk, theirPk, ecdhSS, myKemPk,
                        maybeTheirKemPk, maybeNewKemPk, kemSS, encapPk, rk
      ) @ #t2)) ⇒
    (#t1 = #t2)"
/*
guarded formula characterizing all counter-examples:
"∃ id i1 i2 me them theirIdPk myPk theirPk ecdhSS myKemPk maybeTheirKemPk
   maybeNewKemPk kemSS encapPk rk #t1 #t2.
  (SessionInfo( id, i1, me, them ) @ #t1) ∧
  (PublicKeyRatchet( theirIdPk, myPk, theirPk, ecdhSS, myKemPk,
                     maybeTheirKemPk, maybeNewKemPk, kemSS, encapPk, rk
   ) @ #t1) ∧
  (SessionInfo( id, i2, me, them ) @ #t2) ∧
  (PublicKeyRatchet( theirIdPk, myPk, theirPk, ecdhSS, myKemPk,
                     maybeTheirKemPk, maybeNewKemPk, kemSS, encapPk, rk
   ) @ #t2)
 ∧
  ¬(#t1 = #t2)"
*/
by sorry

lemma Auto_MkCkRelation [reuse, use_induction]:
  all-traces
  "∀ a1 b1 c1 d1 e1 f1 g1 h1 i1 j1 a2 b2 c2 d2 e2 f2 g2 h2 i2 j2 ck1 ck2 mk
     #t1 #t2.
    ((KeysUsed( a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, ck1, mk ) @ #t1) ∧
     (KeysUsed( a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, ck2, mk ) @ #t2)) ⇒
    (ck1 = ck2)"
/*
guarded formula characterizing all counter-examples:
"∃ a1 b1 c1 d1 e1 f1 g1 h1 i1 j1 a2 b2 c2 d2 e2 f2 g2 h2 i2 j2 ck1 ck2 mk
   #t1 #t2.
  (KeysUsed( a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, ck1, mk ) @ #t1) ∧
  (KeysUsed( a2, b2, c2, d2, e2, f2, g2, h2, i2, j2, ck2, mk ) @ #t2)
 ∧
  ¬(ck1 = ck2)"
*/
by sorry

lemma Auto_CkRkRelation [reuse, use_induction]:
  all-traces
  "∀ a1 b1 c1 d1 e1 f1 g1 h1 i1 j1 a2 b2 c2 d2 e2 f2 g2 h2 i2 j2 rk1 rk2 ck
     #t1 #t2.
    ((KeysUsed( a1, b1, c1, d1, e1, f1, g1, h1, i1, rk1, ck, j1 ) @ #t1) ∧
     (KeysUsed( a2, b2, c2, d2, e2, f2, g2, h2, i2, rk2, ck, j2 ) @ #t2)) ⇒
    (rk1 = rk2)"
/*
guarded formula characterizing all counter-examples:
"∃ a1 b1 c1 d1 e1 f1 g1 h1 i1 j1 a2 b2 c2 d2 e2 f2 g2 h2 i2 j2 rk1 rk2 ck
   #t1 #t2.
  (KeysUsed( a1, b1, c1, d1, e1, f1, g1, h1, i1, rk1, ck, j1 ) @ #t1) ∧
  (KeysUsed( a2, b2, c2, d2, e2, f2, g2, h2, i2, rk2, ck, j2 ) @ #t2)
 ∧
  ¬(rk1 = rk2)"
*/
by sorry

lemma ECDHSSCompromise [reuse]:
  all-traces
  "∀ id i me them m ad theirIdPk myPk theirPk ecdhSS myKemPk
     maybeTheirKemPk maybeNewKemPk kemSS encapPk rk ck mk #t1 #t2.
    (((MessageSent( id, i, me, them, m, ad ) @ #t1) ∧
      (KeysUsed( theirIdPk, myPk, theirPk, ecdhSS, myKemPk, maybeTheirKemPk,
                 maybeNewKemPk, kemSS, encapPk, rk, ck, mk
       ) @ #t1)) ∧
     (!KU( ecdhSS ) @ #t2)) ⇒
    (((((∃ #x. RevealECDHPreKey( them, theirPk ) @ #x) ∨
        (∃ #x. RevealECDHKey( id, me, myPk ) @ #x)) ∨
       (∃ id2 #x. RevealECDHKey( id2, them, theirPk ) @ #x)) ∨
      (∃ #x. (RevealIdentityKey( them ) @ #x) ∧ (#x < #t1))) ∨
     (∃ #x. PQAttack( ) @ #x))"
/*
guarded formula characterizing all counter-examples:
"∃ id i me them m ad theirIdPk myPk theirPk ecdhSS myKemPk
   maybeTheirKemPk maybeNewKemPk kemSS encapPk rk ck mk #t1 #t2.
  (MessageSent( id, i, me, them, m, ad ) @ #t1) ∧
  (KeysUsed( theirIdPk, myPk, theirPk, ecdhSS, myKemPk, maybeTheirKemPk,
             maybeNewKemPk, kemSS, encapPk, rk, ck, mk
   ) @ #t1) ∧
  (!KU( ecdhSS ) @ #t2)
 ∧
  (∀ #x. (RevealECDHPreKey( them, theirPk ) @ #x) ⇒ ⊥) ∧
  (∀ #x. (RevealECDHKey( id, me, myPk ) @ #x) ⇒ ⊥) ∧
  (∀ id2 #x. (RevealECDHKey( id2, them, theirPk ) @ #x) ⇒ ⊥) ∧
  (∀ #x. (RevealIdentityKey( them ) @ #x) ⇒ ¬(#x < #t1)) ∧
  (∀ #x. (PQAttack( ) @ #x) ⇒ ⊥)"
*/
by sorry

lemma Auto_MyKemKeyOrigin [reuse, use_induction,
                           hide_lemma=ECDHSSCompromise, hide_lemma=Auto_SessionStart,
                           hide_lemma=Auto_ECDHSkOrigin]:
  all-traces
  "∀ id i me them theirIdPk myPk theirPk ecdhSS myKemPk maybeTheirKemPk
     maybeNewKemPk kemSS encapPk rk ck mk #t.
    (((SessionInfo( id, i, me, them ) @ #t) ∧
      (KeysUsed( theirIdPk, myPk, theirPk, ecdhSS, myKemPk, maybeTheirKemPk,
                 maybeNewKemPk, kemSS, encapPk, rk, ck, mk
       ) @ #t)) ∧
     (¬(KemKeyGen( id, me, them, Just(myKemPk) ) @ #t))) ⇒
    ((∃ #x. (KemKeyGen( id, me, them, Just(myKemPk) ) @ #x) ∧ (#x < #t)) ∨
     (∃ #x. (KemPreKeyGen( me, myKemPk ) @ #x) ∧ (#x < #t)))"
/*
guarded formula characterizing all counter-examples:
"∃ id i me them theirIdPk myPk theirPk ecdhSS myKemPk maybeTheirKemPk
   maybeNewKemPk kemSS encapPk rk ck mk #t.
  (SessionInfo( id, i, me, them ) @ #t) ∧
  (KeysUsed( theirIdPk, myPk, theirPk, ecdhSS, myKemPk, maybeTheirKemPk,
             maybeNewKemPk, kemSS, encapPk, rk, ck, mk
   ) @ #t)
 ∧
  (¬(KemKeyGen( id, me, them, Just(myKemPk) ) @ #t)) ∧
  (∀ #x. (KemKeyGen( id, me, them, Just(myKemPk) ) @ #x) ⇒ ¬(#x < #t)) ∧
  (∀ #x. (KemPreKeyGen( me, myKemPk ) @ #x) ⇒ ¬(#x < #t))"
*/
by sorry

lemma Auto_MaybeNewKemKeyOrigin [reuse, use_induction,
                                 hide_lemma=ECDHSSCompromise, hide_lemma=Auto_SessionStart,
                                 hide_lemma=Auto_ECDHSkOrigin, hide_lemma=Auto_MyKemKeyOrigin]:
  all-traces
  "∀ id i me them theirIdPk myPk theirPk ecdhSS myKemPk maybeTheirKemPk
     newKemPk kemSS encapPk rk ck mk #t.
    (((SessionInfo( id, i, me, them ) @ #t) ∧
      (KeysUsed( theirIdPk, myPk, theirPk, ecdhSS, myKemPk, maybeTheirKemPk,
                 Just(newKemPk), kemSS, encapPk, rk, ck, mk
       ) @ #t)) ∧
     (¬(NewKemPublicKey( id, me, them, Just(newKemPk) ) @ #t))) ⇒
    (∃ #x.
      (NewKemPublicKey( id, me, them, Just(newKemPk) ) @ #x) ∧ (#x < #t))"
/*
guarded formula characterizing all counter-examples:
"∃ id i me them theirIdPk myPk theirPk ecdhSS myKemPk maybeTheirKemPk
   newKemPk kemSS encapPk rk ck mk #t.
  (SessionInfo( id, i, me, them ) @ #t) ∧
  (KeysUsed( theirIdPk, myPk, theirPk, ecdhSS, myKemPk, maybeTheirKemPk,
             Just(newKemPk), kemSS, encapPk, rk, ck, mk
   ) @ #t)
 ∧
  (¬(NewKemPublicKey( id, me, them, Just(newKemPk) ) @ #t)) ∧
  (∀ #x.
    (NewKemPublicKey( id, me, them, Just(newKemPk) ) @ #x) ⇒ ¬(#x < #t))"
*/
by sorry

lemma Auto_TheirKemKeyOrigin [reuse, use_induction,
                              hide_lemma=ECDHSSCompromise, hide_lemma=Auto_SessionStart,
                              hide_lemma=Auto_ECDHSkOrigin, hide_lemma=Auto_MyKemKeyOrigin]:
  all-traces
  "∀ id i me them theirIdPk myPk theirPk ecdhSS myKemPk theirKemPk
     maybeNewKemPk kemSS encapPk rk ck mk #t.
    (((SessionInfo( id, i, me, them ) @ #t) ∧
      (KeysUsed( theirIdPk, myPk, theirPk, ecdhSS, myKemPk, Just(theirKemPk),
                 maybeNewKemPk, kemSS, encapPk, rk, ck, mk
       ) @ #t)) ∧
     (¬(NewKemPublicKey( id, me, them, Just(theirKemPk) ) @ #t))) ⇒
    (∃ #x.
      (NewKemPublicKey( id, me, them, Just(theirKemPk) ) @ #x) ∧ (#x < #t))"
/*
guarded formula characterizing all counter-examples:
"∃ id i me them theirIdPk myPk theirPk ecdhSS myKemPk theirKemPk
   maybeNewKemPk kemSS encapPk rk ck mk #t.
  (SessionInfo( id, i, me, them ) @ #t) ∧
  (KeysUsed( theirIdPk, myPk, theirPk, ecdhSS, myKemPk, Just(theirKemPk),
             maybeNewKemPk, kemSS, encapPk, rk, ck, mk
   ) @ #t)
 ∧
  (¬(NewKemPublicKey( id, me, them, Just(theirKemPk) ) @ #t)) ∧
  (∀ #x.
    (NewKemPublicKey( id, me, them, Just(theirKemPk) ) @ #x) ⇒ ¬(#x < #t))"
*/
by sorry

lemma Auto_KemSSOrigin [reuse, use_induction,
                        hide_lemma=ECDHSSCompromise, hide_lemma=Auto_SessionStart,
                        hide_lemma=Auto_ECDHSkOrigin, hide_lemma=Auto_MyKemKeyOrigin,
                        hide_lemma=Auto_MaybeNewKemKeyOrigin, hide_lemma=Auto_TheirKemKeyOrigin]:
  all-traces
  "∀ id i me them theirIdPk myPk theirPk ecdhSS myKemPk maybeTheirKemPk
     maybeNewKemPk kemSS encapPk rk ck mk #t.
    ((((SessionInfo( id, i, me, them ) @ #t) ∧
       (KeysUsed( theirIdPk, myPk, theirPk, ecdhSS, myKemPk, maybeTheirKemPk,
                  maybeNewKemPk, kemSS, encapPk, rk, ck, mk
        ) @ #t)) ∧
      (¬(NewKemSS( id, me, them, kemSS, encapPk ) @ #t))) ∧
     (¬(DecapKemSS( id, me, them, kemSS, encapPk ) @ #t))) ⇒
    ((∃ #x. (NewKemSS( id, me, them, kemSS, encapPk ) @ #x) ∧ (#x < #t)) ∨
     (∃ #x. (DecapKemSS( id, me, them, kemSS, encapPk ) @ #x) ∧ (#x < #t)))"
/*
guarded formula characterizing all counter-examples:
"∃ id i me them theirIdPk myPk theirPk ecdhSS myKemPk maybeTheirKemPk
   maybeNewKemPk kemSS encapPk rk ck mk #t.
  (SessionInfo( id, i, me, them ) @ #t) ∧
  (KeysUsed( theirIdPk, myPk, theirPk, ecdhSS, myKemPk, maybeTheirKemPk,
             maybeNewKemPk, kemSS, encapPk, rk, ck, mk
   ) @ #t)
 ∧
  (¬(NewKemSS( id, me, them, kemSS, encapPk ) @ #t)) ∧
  (¬(DecapKemSS( id, me, them, kemSS, encapPk ) @ #t)) ∧
  (∀ #x. (NewKemSS( id, me, them, kemSS, encapPk ) @ #x) ⇒ ¬(#x < #t)) ∧
  (∀ #x. (DecapKemSS( id, me, them, kemSS, encapPk ) @ #x) ⇒ ¬(#x < #t))"
*/
by sorry

lemma Auto_KemKeyOriginEncap [reuse, hide_lemma=ECDHSSCompromise,
                              hide_lemma=Auto_SessionStart, hide_lemma=Auto_ECDHSkOrigin,
                              hide_lemma=Auto_KemSSOrigin]:
  all-traces
  "∀ id i me them theirIdPk myPk theirPk ecdhSS myKemPk maybeTheirKemPk
     maybeNewKemPk kemSS encapPk rk ck mk #t.
    ((((SessionInfo( id, i, me, them ) @ #t) ∧
       (KeysUsed( theirIdPk, myPk, theirPk, ecdhSS, myKemPk, maybeTheirKemPk,
                  maybeNewKemPk, kemSS, encapPk, rk, ck, mk
        ) @ #t)) ∧
      (NewKemSS( id, me, them, kemSS, encapPk ) @ #t)) ∧
     (¬(NewKemPublicKey( id, me, them, Just(encapPk) ) @ #t))) ⇒
    (∃ #x.
      (NewKemPublicKey( id, me, them, Just(encapPk) ) @ #x) ∧ (#x < #t))"
/*
guarded formula characterizing all counter-examples:
"∃ id i me them theirIdPk myPk theirPk ecdhSS myKemPk maybeTheirKemPk
   maybeNewKemPk kemSS encapPk rk ck mk #t.
  (SessionInfo( id, i, me, them ) @ #t) ∧
  (KeysUsed( theirIdPk, myPk, theirPk, ecdhSS, myKemPk, maybeTheirKemPk,
             maybeNewKemPk, kemSS, encapPk, rk, ck, mk
   ) @ #t) ∧
  (NewKemSS( id, me, them, kemSS, encapPk ) @ #t)
 ∧
  (¬(NewKemPublicKey( id, me, them, Just(encapPk) ) @ #t)) ∧
  (∀ #x.
    (NewKemPublicKey( id, me, them, Just(encapPk) ) @ #x) ⇒ ¬(#x < #t))"
*/
by sorry

lemma Auto_KemKeyOriginDecap [reuse, hide_lemma=ECDHSSCompromise,
                              hide_lemma=Auto_SessionStart, hide_lemma=Auto_ECDHSkOrigin,
                              hide_lemma=Auto_KemSSOrigin]:
  all-traces
  "∀ id i me them theirIdPk myPk theirPk ecdhSS myKemPk maybeTheirKemPk
     maybeNewKemPk kemSS encapPk rk ck mk #t.
    (((SessionInfo( id, i, me, them ) @ #t) ∧
      (KeysUsed( theirIdPk, myPk, theirPk, ecdhSS, myKemPk, maybeTheirKemPk,
                 maybeNewKemPk, kemSS, encapPk, rk, ck, mk
       ) @ #t)) ∧
     (DecapKemSS( id, me, them, kemSS, encapPk ) @ #t)) ⇒
    ((∃ #x. (KemKeyGen( id, me, them, Just(encapPk) ) @ #x) ∧ (#x < #t)) ∨
     (∃ #x. (KemPreKeyGen( me, encapPk ) @ #x) ∧ (#x < #t)))"
/*
guarded formula characterizing all counter-examples:
"∃ id i me them theirIdPk myPk theirPk ecdhSS myKemPk maybeTheirKemPk
   maybeNewKemPk kemSS encapPk rk ck mk #t.
  (SessionInfo( id, i, me, them ) @ #t) ∧
  (KeysUsed( theirIdPk, myPk, theirPk, ecdhSS, myKemPk, maybeTheirKemPk,
             maybeNewKemPk, kemSS, encapPk, rk, ck, mk
   ) @ #t) ∧
  (DecapKemSS( id, me, them, kemSS, encapPk ) @ #t)
 ∧
  (∀ #x. (KemKeyGen( id, me, them, Just(encapPk) ) @ #x) ⇒ ¬(#x < #t)) ∧
  (∀ #x. (KemPreKeyGen( me, encapPk ) @ #x) ⇒ ¬(#x < #t))"
*/
by sorry

lemma RkFixesKEMSS [reuse, use_induction, hide_lemma=ECDHSSCompromise,
                    hide_lemma=Auto_SessionStart, hide_lemma=Auto_ECDHSkOrigin]:
  all-traces
  "∀ rk kemSS1 kemSS2 a1 b1 c1 d1 e1 f1 g1 h1 i1 j1 a2 b2 c2 d2 e2 f2 g2 h2
     i2 j2 id1 li1 me1 them1 id2 li2 me2 them2 #t1 #t2.
    ((((SessionInfo( id1, li1, me1, them1 ) @ #t1) ∧
       (KeysUsed( a1, b1, c1, d1, e1, f1, g1, kemSS1, h1, rk, i1, j1 ) @ #t1)) ∧
      (SessionInfo( id2, li2, me2, them2 ) @ #t2)) ∧
     (KeysUsed( a2, b2, c2, d2, e2, f2, g2, kemSS2, h2, rk, i2, j2 ) @ #t2)) ⇒
    (kemSS1 = kemSS2)"
/*
guarded formula characterizing all counter-examples:
"∃ rk kemSS1 kemSS2 a1 b1 c1 d1 e1 f1 g1 h1 i1 j1 a2 b2 c2 d2 e2 f2 g2 h2
   i2 j2 id1 li1 me1 them1 id2 li2 me2 them2 #t1 #t2.
  (SessionInfo( id1, li1, me1, them1 ) @ #t1) ∧
  (KeysUsed( a1, b1, c1, d1, e1, f1, g1, kemSS1, h1, rk, i1, j1 ) @ #t1) ∧
  (SessionInfo( id2, li2, me2, them2 ) @ #t2) ∧
  (KeysUsed( a2, b2, c2, d2, e2, f2, g2, kemSS2, h2, rk, i2, j2 ) @ #t2)
 ∧
  ¬(kemSS1 = kemSS2)"
*/
by sorry

lemma Auto_RkFixesEcdhSS [reuse, use_induction,
                          hide_lemma=Auto_MyKemKeyOrigin, hide_lemma=Auto_MaybeNewKemKeyOrigin,
                          hide_lemma=Auto_TheirKemKeyOrigin, hide_lemma=Auto_KemSSOrigin,
                          hide_lemma=Auto_KemKeyOriginEncap, hide_lemma=Auto_KemKeyOriginDecap,
                          hide_lemma=RkFixesKEMSS, hide_lemma=ECDHSSCompromise]:
  all-traces
  "∀ rk ecdhSS1 ecdhSS2 a1 b1 c1 d1 e1 f1 g1 h1 i1 j1 a2 b2 c2 d2 e2 f2 g2
     h2 i2 j2 id1 li1 me1 them1 id2 li2 me2 them2 #t1 #t2.
    ((((SessionInfo( id1, li1, me1, them1 ) @ #t1) ∧
       (KeysUsed( a1, b1, c1, ecdhSS1, d1, e1, f1, g1, h1, rk, i1, j1
        ) @ #t1)) ∧
      (SessionInfo( id2, li2, me2, them2 ) @ #t2)) ∧
     (KeysUsed( a2, b2, c2, ecdhSS2, d2, e2, f2, g2, h2, rk, i2, j2
      ) @ #t2)) ⇒
    (ecdhSS1 = ecdhSS2)"
/*
guarded formula characterizing all counter-examples:
"∃ rk ecdhSS1 ecdhSS2 a1 b1 c1 d1 e1 f1 g1 h1 i1 j1 a2 b2 c2 d2 e2 f2 g2
   h2 i2 j2 id1 li1 me1 them1 id2 li2 me2 them2 #t1 #t2.
  (SessionInfo( id1, li1, me1, them1 ) @ #t1) ∧
  (KeysUsed( a1, b1, c1, ecdhSS1, d1, e1, f1, g1, h1, rk, i1, j1 ) @ #t1) ∧
  (SessionInfo( id2, li2, me2, them2 ) @ #t2) ∧
  (KeysUsed( a2, b2, c2, ecdhSS2, d2, e2, f2, g2, h2, rk, i2, j2 ) @ #t2)
 ∧
  ¬(ecdhSS1 = ecdhSS2)"
*/
by sorry

lemma KemSSCompromise [reuse, hide_lemma=ECDHSSCompromise,
                       hide_lemma=Auto_ECDHSkOrigin, hide_lemma=Auto_MyKemKeyOrigin,
                       hide_lemma=Auto_MaybeNewKemKeyOrigin, hide_lemma=Auto_TheirKemKeyOrigin]:
  all-traces
  "∀ id i me them theirIdPk myPk theirPk ecdhSS myKemPk maybeTheirKemPk
     maybeNewKemPk kemSS encapPk rk ck mk #t1 #t2.
    (((SessionInfo( id, i, me, them ) @ #t1) ∧
      (KeysUsed( theirIdPk, myPk, theirPk, ecdhSS, myKemPk, maybeTheirKemPk,
                 maybeNewKemPk, kemSS, encapPk, rk, ck, mk
       ) @ #t1)) ∧
     (!KU( kemSS ) @ #t2)) ⇒
    (((((∃ #x. RevealKemKey( me, encapPk ) @ #x) ∨
        (∃ #x. RevealKemKey( them, encapPk ) @ #x)) ∨
       (∃ #x. RevealKemPreKey( me, encapPk ) @ #x)) ∨
      (∃ #x. RevealKemPreKey( them, encapPk ) @ #x)) ∨
     (∃ #x. (RevealIdentityKey( them ) @ #x) ∧ (#x < #t1)))"
/*
guarded formula characterizing all counter-examples:
"∃ id i me them theirIdPk myPk theirPk ecdhSS myKemPk maybeTheirKemPk
   maybeNewKemPk kemSS encapPk rk ck mk #t1 #t2.
  (SessionInfo( id, i, me, them ) @ #t1) ∧
  (KeysUsed( theirIdPk, myPk, theirPk, ecdhSS, myKemPk, maybeTheirKemPk,
             maybeNewKemPk, kemSS, encapPk, rk, ck, mk
   ) @ #t1) ∧
  (!KU( kemSS ) @ #t2)
 ∧
  (∀ #x. (RevealKemKey( me, encapPk ) @ #x) ⇒ ⊥) ∧
  (∀ #x. (RevealKemKey( them, encapPk ) @ #x) ⇒ ⊥) ∧
  (∀ #x. (RevealKemPreKey( me, encapPk ) @ #x) ⇒ ⊥) ∧
  (∀ #x. (RevealKemPreKey( them, encapPk ) @ #x) ⇒ ⊥) ∧
  (∀ #x. (RevealIdentityKey( them ) @ #x) ⇒ ¬(#x < #t1))"
*/
simplify
solve( KeysUsed( theirIdPk, myPk, theirPk, ecdhSS, myKemPk,
                 maybeTheirKemPk, maybeNewKemPk, kemSS, encapPk, rk, ck, mk
       ) @ #t1 )
  case PublicKeyRatchetNewReceiverNoNewKemSS
  solve( SessionInfo( id.1, i.1, me, them ) @ #t1 )
    case PublicKeyRatchetNewReceiverNoNewKemSS
    solve( SessionInfo( ~id, %1, $Me, $Them ) @ #x.1 )
      case ReceiverStart
      solve( IDSQuery( $Them, pk(x.2), sprePk, skemPrePk, preKeySig ) ▶₅ #x.1 )
        case QueryIDS
        solve( SessionStart( pk(x) ) @ #x.1 )
          case ReceiverStart
          solve( (∃ #x.
                   (NewKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x) ∧ #x < #t1)  ∥
                 (∃ #x. (DecapKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x) ∧ #x < #t1) )
            case case_1
            solve( NewKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x.1 )
              case PublicKeyRatchetNewSenderSomeNewKemSS
              solve( NewKemPublicKey( ~id, $Me, $Them, Just(encapPk) ) @ #x.2 )
                case PublicKeyRatchetNewReceiverNoNewKemSS
                solve( !KU( sign(<'msg_sig', ciphertext.2, $AD.3, 
                                  hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.7, rootKey.2), '0'),
                                                        <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>)),
                                            'msg_key'),
                                       'msg_key_ind'), 
                                  theirEcdhPk.2, (%i.2%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>, 
                                  Just(encapPk), None, None>,
                                 ~idKey.1)
                       ) @ #vk.38 )
                  case PublicKeyRatchetNewSenderNoNewKemSS_case_1
                  solve( !KU( sign(<'msg_sig', ciphertext.1, $AD.1, 
                                    hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.1, '0'), z.2),
                                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>)),
                                              'msg_key'),
                                         'msg_key_ind'), 
                                    theirEcdhPk, %1, <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>, None, 
                                    Just(kemEncap), 
                                    Just(h(<'g'^~ecdhSk.1, pqpk(~kemSk.1), 
                                            sign(<'nf_reg', pqpk(~kemSk.1), 'g'^~ecdhSk.1>, ~idKey.2)>))
                                   >,
                                   ~idKey.1)
                         ) @ #vk.29 )
                    case SessionStartAsASender
                    solve( !KU( ~kemSS ) @ #t2 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.64 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.64 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                      solve( !KU( ~newKemSk ) @ #vk.63 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                      solve( !KU( ~newKemSk ) @ #vk.63 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.65 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.65 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.63 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.63 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                      solve( !KU( ~newKemSk ) @ #vk.62 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                      solve( !KU( ~newKemSk ) @ #vk.62 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.64 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.64 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~idKey.1 ) @ #vk.68 )
                      case IdentityKeyLeak
                      by contradiction /* from formulas */
                    next
                      case PQAttacker
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderNoNewKemSS_case_2
                  solve( !KU( sign(<'msg_sig', ciphertext.1, $AD.1, 
                                    hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.1, '0'), z.2),
                                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>)),
                                              'msg_key'),
                                         'msg_key_ind'), 
                                    theirEcdhPk, %1, <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>, None, 
                                    Just(kemEncap), 
                                    Just(h(<'g'^~ecdhSk.1, pqpk(~kemSk.1), 
                                            sign(<'nf_reg', pqpk(~kemSk.1), 'g'^~ecdhSk.1>, ~idKey.2)>))
                                   >,
                                   ~idKey.1)
                         ) @ #vk.29 )
                    case SessionStartAsASender
                    solve( !KU( ~kemSS ) @ #t2 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.62 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.62 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                      solve( !KU( ~newKemSk ) @ #vk.61 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                      solve( !KU( ~newKemSk ) @ #vk.61 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.63 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.63 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.61 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.61 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                      solve( !KU( ~newKemSk ) @ #vk.60 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                      solve( !KU( ~newKemSk ) @ #vk.60 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.62 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.62 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~idKey.1 ) @ #vk.66 )
                      case IdentityKeyLeak
                      by contradiction /* from formulas */
                    next
                      case PQAttacker
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderNoNewKemSS_case_3
                  solve( !KU( sign(<'msg_sig', ciphertext.1, $AD.1, 
                                    hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.1, '0'), z.2),
                                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>)),
                                              'msg_key'),
                                         'msg_key_ind'), 
                                    theirEcdhPk, %1, <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>, None, 
                                    Just(kemEncap), 
                                    Just(h(<'g'^~ecdhSk.1, pqpk(~kemSk.1), 
                                            sign(<'nf_reg', pqpk(~kemSk.1), 'g'^~ecdhSk.1>, ~idKey.2)>))
                                   >,
                                   ~idKey.1)
                         ) @ #vk.29 )
                    case SessionStartAsASender
                    solve( !KU( ~kemSS ) @ #t2 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.62 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.62 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                      solve( !KU( ~newKemSk ) @ #vk.61 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                      solve( !KU( ~newKemSk ) @ #vk.61 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.63 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.63 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.61 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.61 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                      solve( !KU( ~newKemSk ) @ #vk.60 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                      solve( !KU( ~newKemSk ) @ #vk.60 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.62 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.62 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~idKey.1 ) @ #vk.66 )
                      case IdentityKeyLeak
                      by contradiction /* from formulas */
                    next
                      case PQAttacker
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderNoNewKemSS_case_4
                  solve( !KU( sign(<'msg_sig', ciphertext.1, $AD.1, 
                                    hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.1, '0'), z.2),
                                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>)),
                                              'msg_key'),
                                         'msg_key_ind'), 
                                    theirEcdhPk, %1, <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>, None, 
                                    Just(kemEncap), 
                                    Just(h(<'g'^~ecdhSk.1, pqpk(~kemSk.1), 
                                            sign(<'nf_reg', pqpk(~kemSk.1), 'g'^~ecdhSk.1>, ~idKey.2)>))
                                   >,
                                   ~idKey.1)
                         ) @ #vk.30 )
                    case SessionStartAsASender
                    solve( !KU( ~kemSS ) @ #t2 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.64 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.64 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                      solve( !KU( ~newKemSk ) @ #vk.63 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                      solve( !KU( ~newKemSk ) @ #vk.63 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.65 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.65 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.63 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.63 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                      solve( !KU( ~newKemSk ) @ #vk.62 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                      solve( !KU( ~newKemSk ) @ #vk.62 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.64 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.64 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~idKey.1 ) @ #vk.68 )
                      case IdentityKeyLeak
                      by contradiction /* from formulas */
                    next
                      case PQAttacker
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~idKey.1 ) @ #vk.53 )
                    case IdentityKeyLeak
                    by contradiction /* from formulas */
                  next
                    case PQAttacker
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case PublicKeyRatchetNewReceiverWithSomeNewKemSS
                solve( !KU( sign(<'msg_sig', ciphertext.2, $AD.3, 
                                  hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.7, rootKey.2), z.8),
                                                        <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>)),
                                            'msg_key'),
                                       'msg_key_ind'), 
                                  theirEcdhPk.2, (%i.2%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>, 
                                  Just(encapPk), Just(kemEncap.1), None>,
                                 ~idKey.1)
                       ) @ #vk.38 )
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.64 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.64 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.64 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.64 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    solve( !KU( ~newKemSk ) @ #vk.64 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    solve( !KU( ~newKemSk ) @ #vk.64 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.63 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.63 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.63 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.63 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    solve( !KU( ~newKemSk ) @ #vk.63 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    solve( !KU( ~newKemSk ) @ #vk.63 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.65 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.65 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.65 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.65 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    solve( !KU( ~newKemSk ) @ #vk.65 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    solve( !KU( ~newKemSk ) @ #vk.65 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.64 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.64 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.64 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.64 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    solve( !KU( ~newKemSk ) @ #vk.64 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    solve( !KU( ~newKemSk ) @ #vk.64 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.67 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.67 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.67 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.67 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    solve( !KU( ~newKemSk ) @ #vk.67 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    solve( !KU( ~newKemSk ) @ #vk.67 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.66 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.66 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.66 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.66 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    solve( !KU( ~newKemSk ) @ #vk.66 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    solve( !KU( ~newKemSk ) @ #vk.66 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~idKey.1 ) @ #vk.55 )
                    case IdentityKeyLeak
                    by contradiction /* from formulas */
                  next
                    case PQAttacker
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case case_2
            solve( (∃ #x.1.
                     (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.1)
                    ∧
                     #x.1 < #x)  ∥
                   (∃ #x.1. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.1) ∧ #x.1 < #x) )
              case case_1
              solve( DecapKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x.1 )
                case PublicKeyRatchetNewReceiverWithSomeNewKemSS
                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.2)) ) @ #x.2 )
                  case PublicKeyRatchetNewSenderNoNewKemSS
                  by contradiction
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS
                  by contradiction
                qed
              next
                case ReceiverStart
                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.1 )
                  case PublicKeyRatchetNewSenderNoNewKemSS
                  by contradiction
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS
                  by contradiction
                qed
              qed
            next
              case case_2
              solve( DecapKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x.2 )
                case PublicKeyRatchetNewReceiverWithSomeNewKemSS
                solve( !KU( sign(<'msg_sig', ciphertext.2, $AD.2, 
                                  hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.4, rootKey.1), kemSS),
                                                        <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>)),
                                            'msg_key'),
                                       'msg_key_ind'), 
                                  theirEcdhPk.1, (%i.1%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>, 
                                  maybeTheirNewKemPk, Just(kemEncap.1), None>,
                                 ~idKey.1)
                       ) @ #vk.38 )
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk.1 ) @ #vk.62 )
                      case ECDHKeyLeak_case_01
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_02
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_03
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_04
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_05
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_06
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_07
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_08
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_09
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_10
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_11
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_12
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_13
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_14
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_15
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHPreKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case IdentityKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case KemKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                   ) ▶₄ #x.3 )
                              case SomeFreshKemSk
                              by contradiction /* from formulas */
                            qed
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                   ) ▶₅ #x.3 )
                              case SomeFreshKemSk
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case KemPreKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PQAttacker_case_01
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_02
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_03
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_04
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_05
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_06
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_07
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_08
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_09
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_10
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_11
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_12
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_13
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_14
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_15
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_16
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_17
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_1
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_2
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_3
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_4
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_5
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_6
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_7
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_8
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_13
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_14
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_15
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_16
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_17
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_18
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case SendSymmetricRatchet
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( theirIdPk ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk.1, theirEcdhPk.1, theirKemPk,
                                         preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( theirIdPk ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_1
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_2
                      solve( !KU( ~kemPreKey.1 ) @ #vk.64 )
                        case KemPreKeyLeak
                        solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                               (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                          case case_1
                          solve( (∃ #x.3.
                                   (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                  ∧
                                   #x.3 < #x.2)  ∥
                                 (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                            case case_1
                            solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                              case PublicKeyRatchetNewSenderNoNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₄ #x.3 )
                            next
                              case PublicKeyRatchetNewSenderSomeNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₅ #x.3 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_3
                      solve( !KU( ~kemPreKey.1 ) @ #vk.63 )
                        case KemPreKeyLeak
                        solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                               (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                          case case_1
                          solve( (∃ #x.3.
                                   (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                  ∧
                                   #x.3 < #x.2)  ∥
                                 (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                            case case_1
                            solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                              case PublicKeyRatchetNewSenderNoNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₄ #x.3 )
                            next
                              case PublicKeyRatchetNewSenderSomeNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₅ #x.3 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case fresh
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk.1 ) @ #vk.61 )
                      case ECDHKeyLeak_case_01
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_02
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_03
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_04
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_05
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_06
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_07
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_08
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_09
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_10
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_11
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_12
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_13
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_14
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_15
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHPreKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case IdentityKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case KemKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                   ) ▶₄ #x.3 )
                              case SomeFreshKemSk
                              by contradiction /* from formulas */
                            qed
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                   ) ▶₅ #x.3 )
                              case SomeFreshKemSk
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case KemPreKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PQAttacker_case_01
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_02
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_03
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_04
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_05
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_06
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_07
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_08
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_09
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_10
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_11
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_12
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_13
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_14
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_15
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_16
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_17
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_1
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_2
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_3
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_4
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_5
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_6
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_7
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_8
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_13
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_14
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_15
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_16
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_17
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_18
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case SendSymmetricRatchet
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( theirIdPk ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk.1, theirEcdhPk.1, theirKemPk,
                                         preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( theirIdPk ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_1
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_2
                      solve( !KU( ~kemPreKey.1 ) @ #vk.63 )
                        case KemPreKeyLeak
                        solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                               (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                          case case_1
                          solve( (∃ #x.3.
                                   (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                  ∧
                                   #x.3 < #x.2)  ∥
                                 (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                            case case_1
                            solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                              case PublicKeyRatchetNewSenderNoNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₄ #x.3 )
                            next
                              case PublicKeyRatchetNewSenderSomeNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₅ #x.3 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_3
                      solve( !KU( ~kemPreKey.1 ) @ #vk.62 )
                        case KemPreKeyLeak
                        solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                               (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                          case case_1
                          solve( (∃ #x.3.
                                   (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                  ∧
                                   #x.3 < #x.2)  ∥
                                 (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                            case case_1
                            solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                              case PublicKeyRatchetNewSenderNoNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₄ #x.3 )
                            next
                              case PublicKeyRatchetNewSenderSomeNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₅ #x.3 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case fresh
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk.1 ) @ #vk.61 )
                      case ECDHKeyLeak_case_01
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_02
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_03
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_04
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_05
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_06
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_07
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_08
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_09
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_10
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_11
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_12
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_13
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_14
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_15
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHPreKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case IdentityKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case KemKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                   ) ▶₄ #x.3 )
                              case SomeFreshKemSk
                              by contradiction /* from formulas */
                            qed
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                   ) ▶₅ #x.3 )
                              case SomeFreshKemSk
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case KemPreKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PQAttacker_case_01
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_02
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_03
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_04
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_05
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_06
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_07
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_08
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_09
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_10
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_11
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_12
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_13
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_14
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_15
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_16
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_17
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_1
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_2
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_3
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_4
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_5
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_6
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_7
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_8
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_13
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_14
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_15
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_16
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_17
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_18
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case SendSymmetricRatchet
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( theirIdPk ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk.1, theirEcdhPk.1, theirKemPk,
                                         preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( theirIdPk ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_1
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_2
                      solve( !KU( ~kemPreKey.1 ) @ #vk.63 )
                        case KemPreKeyLeak
                        solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                               (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                          case case_1
                          solve( (∃ #x.3.
                                   (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                  ∧
                                   #x.3 < #x.2)  ∥
                                 (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                            case case_1
                            solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                              case PublicKeyRatchetNewSenderNoNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₄ #x.3 )
                            next
                              case PublicKeyRatchetNewSenderSomeNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₅ #x.3 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_3
                      solve( !KU( ~kemPreKey.1 ) @ #vk.62 )
                        case KemPreKeyLeak
                        solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                               (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                          case case_1
                          solve( (∃ #x.3.
                                   (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                  ∧
                                   #x.3 < #x.2)  ∥
                                 (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                            case case_1
                            solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                              case PublicKeyRatchetNewSenderNoNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₄ #x.3 )
                            next
                              case PublicKeyRatchetNewSenderSomeNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₅ #x.3 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case fresh
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk.1 ) @ #vk.60 )
                      case ECDHKeyLeak_case_01
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_02
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_03
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_04
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_05
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_06
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_07
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_08
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_09
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_10
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_11
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_12
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_13
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_14
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_15
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHPreKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case IdentityKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case KemKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                   ) ▶₄ #x.3 )
                              case SomeFreshKemSk
                              by contradiction /* from formulas */
                            qed
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                   ) ▶₅ #x.3 )
                              case SomeFreshKemSk
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case KemPreKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PQAttacker_case_01
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_02
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_03
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_04
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_05
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_06
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_07
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_08
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_09
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_10
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_11
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_12
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_13
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_14
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_15
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_16
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_17
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_1
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_2
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_3
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_4
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_5
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_6
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_7
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_8
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_13
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_14
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.10 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.9 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_15
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_16
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_17
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_18
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case SendSymmetricRatchet
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( theirIdPk ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk.1, theirEcdhPk.1, theirKemPk,
                                         preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( theirIdPk ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_1
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_2
                      solve( !KU( ~kemPreKey.1 ) @ #vk.62 )
                        case KemPreKeyLeak
                        solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                               (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                          case case_1
                          solve( (∃ #x.3.
                                   (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                  ∧
                                   #x.3 < #x.2)  ∥
                                 (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                            case case_1
                            solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                              case PublicKeyRatchetNewSenderNoNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₄ #x.3 )
                            next
                              case PublicKeyRatchetNewSenderSomeNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₅ #x.3 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_3
                      solve( !KU( ~kemPreKey.1 ) @ #vk.61 )
                        case KemPreKeyLeak
                        solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                               (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                          case case_1
                          solve( (∃ #x.3.
                                   (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                  ∧
                                   #x.3 < #x.2)  ∥
                                 (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                            case case_1
                            solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                              case PublicKeyRatchetNewSenderNoNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₄ #x.3 )
                            next
                              case PublicKeyRatchetNewSenderSomeNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₅ #x.3 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case fresh
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk.1 ) @ #vk.63 )
                      case ECDHKeyLeak_case_01
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_02
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_03
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_04
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_05
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_06
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_07
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_08
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_09
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_10
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_11
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_12
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_13
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_14
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_15
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHPreKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case IdentityKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case KemKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                   ) ▶₄ #x.3 )
                              case SomeFreshKemSk
                              by contradiction /* from formulas */
                            qed
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                   ) ▶₅ #x.3 )
                              case SomeFreshKemSk
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case KemPreKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PQAttacker_case_01
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_02
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_03
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_04
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_05
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_06
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_07
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_08
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_09
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_10
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_11
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_12
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_13
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_14
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_15
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_16
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_17
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_1
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_2
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_3
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_4
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_5
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_6
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_7
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_8
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_13
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_14
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_15
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_16
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_17
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_18
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case SendSymmetricRatchet
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( theirIdPk ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk.1, theirEcdhPk.1, theirKemPk,
                                         preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( theirIdPk ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_1
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_2
                      solve( !KU( ~kemPreKey.1 ) @ #vk.65 )
                        case KemPreKeyLeak
                        solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                               (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                          case case_1
                          solve( (∃ #x.3.
                                   (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                  ∧
                                   #x.3 < #x.2)  ∥
                                 (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                            case case_1
                            solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                              case PublicKeyRatchetNewSenderNoNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₄ #x.3 )
                            next
                              case PublicKeyRatchetNewSenderSomeNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₅ #x.3 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_3
                      solve( !KU( ~kemPreKey.1 ) @ #vk.64 )
                        case KemPreKeyLeak
                        solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                               (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                          case case_1
                          solve( (∃ #x.3.
                                   (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                  ∧
                                   #x.3 < #x.2)  ∥
                                 (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                            case case_1
                            solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                              case PublicKeyRatchetNewSenderNoNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₄ #x.3 )
                            next
                              case PublicKeyRatchetNewSenderSomeNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₅ #x.3 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case fresh
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk.1 ) @ #vk.62 )
                      case ECDHKeyLeak_case_01
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_02
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_03
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_04
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_05
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_06
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_07
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_08
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_09
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_10
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_11
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_12
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_13
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_14
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_15
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHPreKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case IdentityKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case KemKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                   ) ▶₄ #x.3 )
                              case SomeFreshKemSk
                              by contradiction /* from formulas */
                            qed
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                   ) ▶₅ #x.3 )
                              case SomeFreshKemSk
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case KemPreKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PQAttacker_case_01
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_02
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_03
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_04
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_05
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_06
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_07
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_08
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_09
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_10
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_11
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_12
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_13
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_14
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_15
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_16
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_17
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_1
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_2
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_3
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_4
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_5
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_6
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_7
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_8
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_13
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_14
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_15
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_16
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_17
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_18
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case SendSymmetricRatchet
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( theirIdPk ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk.1, theirEcdhPk.1, theirKemPk,
                                         preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( theirIdPk ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_1
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_2
                      solve( !KU( ~kemPreKey.1 ) @ #vk.64 )
                        case KemPreKeyLeak
                        solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                               (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                          case case_1
                          solve( (∃ #x.3.
                                   (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                  ∧
                                   #x.3 < #x.2)  ∥
                                 (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                            case case_1
                            solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                              case PublicKeyRatchetNewSenderNoNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₄ #x.3 )
                            next
                              case PublicKeyRatchetNewSenderSomeNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₅ #x.3 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_3
                      solve( !KU( ~kemPreKey.1 ) @ #vk.63 )
                        case KemPreKeyLeak
                        solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                               (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                          case case_1
                          solve( (∃ #x.3.
                                   (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                  ∧
                                   #x.3 < #x.2)  ∥
                                 (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                            case case_1
                            solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                              case PublicKeyRatchetNewSenderNoNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₄ #x.3 )
                            next
                              case PublicKeyRatchetNewSenderSomeNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₅ #x.3 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case fresh
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_4
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk.1 ) @ #vk.62 )
                      case ECDHKeyLeak_case_01
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_02
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_03
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_04
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_05
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_06
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_07
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_08
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_09
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_10
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_11
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_12
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_13
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_14
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_15
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHPreKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case IdentityKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case KemKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                   ) ▶₄ #x.3 )
                              case SomeFreshKemSk
                              by contradiction /* from formulas */
                            qed
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                   ) ▶₅ #x.3 )
                              case SomeFreshKemSk
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case KemPreKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PQAttacker_case_01
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_02
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_03
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_04
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_05
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_06
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_07
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_08
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_09
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_10
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_11
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_12
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_13
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_14
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_15
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_16
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_17
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_1
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_2
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_3
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_4
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_5
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_6
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_7
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_8
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_13
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_14
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_15
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_16
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_17
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_18
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case SendSymmetricRatchet
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( theirIdPk ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk.1, theirEcdhPk.1, theirKemPk,
                                         preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( theirIdPk ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_1
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_2
                      solve( !KU( ~kemPreKey.1 ) @ #vk.64 )
                        case KemPreKeyLeak
                        solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                               (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                          case case_1
                          solve( (∃ #x.3.
                                   (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                  ∧
                                   #x.3 < #x.2)  ∥
                                 (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                            case case_1
                            solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                              case PublicKeyRatchetNewSenderNoNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₄ #x.3 )
                            next
                              case PublicKeyRatchetNewSenderSomeNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₅ #x.3 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_3
                      solve( !KU( ~kemPreKey.1 ) @ #vk.63 )
                        case KemPreKeyLeak
                        solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                               (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                          case case_1
                          solve( (∃ #x.3.
                                   (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                  ∧
                                   #x.3 < #x.2)  ∥
                                 (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                            case case_1
                            solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                              case PublicKeyRatchetNewSenderNoNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₄ #x.3 )
                            next
                              case PublicKeyRatchetNewSenderSomeNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₅ #x.3 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case fresh
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk.1 ) @ #vk.61 )
                      case ECDHKeyLeak_case_01
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_02
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_03
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_04
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_05
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_06
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_07
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_08
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_09
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_10
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_11
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_12
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_13
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_14
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_15
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHPreKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case IdentityKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case KemKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                   ) ▶₄ #x.3 )
                              case SomeFreshKemSk
                              by contradiction /* from formulas */
                            qed
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                   ) ▶₅ #x.3 )
                              case SomeFreshKemSk
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case KemPreKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PQAttacker_case_01
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_02
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_03
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_04
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_05
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_06
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_07
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_08
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_09
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_10
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_11
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_12
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_13
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_14
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_15
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_16
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_17
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_1
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_2
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_3
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_4
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_5
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_6
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_7
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_8
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_13
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_14
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_15
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_16
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_17
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_18
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case SendSymmetricRatchet
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( theirIdPk ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk.1, theirEcdhPk.1, theirKemPk,
                                         preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( theirIdPk ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_1
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_2
                      solve( !KU( ~kemPreKey.1 ) @ #vk.63 )
                        case KemPreKeyLeak
                        solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                               (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                          case case_1
                          solve( (∃ #x.3.
                                   (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                  ∧
                                   #x.3 < #x.2)  ∥
                                 (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                            case case_1
                            solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                              case PublicKeyRatchetNewSenderNoNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₄ #x.3 )
                            next
                              case PublicKeyRatchetNewSenderSomeNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₅ #x.3 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_3
                      solve( !KU( ~kemPreKey.1 ) @ #vk.62 )
                        case KemPreKeyLeak
                        solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                               (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                          case case_1
                          solve( (∃ #x.3.
                                   (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                  ∧
                                   #x.3 < #x.2)  ∥
                                 (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                            case case_1
                            solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                              case PublicKeyRatchetNewSenderNoNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₄ #x.3 )
                            next
                              case PublicKeyRatchetNewSenderSomeNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₅ #x.3 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case fresh
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_5
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk.1 ) @ #vk.65 )
                      case ECDHKeyLeak_case_01
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_02
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_03
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_04
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_05
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_06
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_07
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_08
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_09
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_10
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_11
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_12
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_13
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_14
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_15
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHPreKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case IdentityKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case KemKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                   ) ▶₄ #x.3 )
                              case SomeFreshKemSk
                              by contradiction /* from formulas */
                            qed
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                   ) ▶₅ #x.3 )
                              case SomeFreshKemSk
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case KemPreKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PQAttacker_case_01
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_02
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_03
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_04
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_05
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_06
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_07
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_08
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_09
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_10
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_11
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_12
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_13
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_14
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_15
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_16
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_17
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_1
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_2
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_3
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_4
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_5
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_6
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_7
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_8
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_13
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_14
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_15
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_16
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_17
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_18
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case SendSymmetricRatchet
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( theirIdPk ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk.1, theirEcdhPk.1, theirKemPk,
                                         preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( theirIdPk ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_1
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_2
                      solve( !KU( ~kemPreKey.1 ) @ #vk.67 )
                        case KemPreKeyLeak
                        solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                               (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                          case case_1
                          solve( (∃ #x.3.
                                   (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                  ∧
                                   #x.3 < #x.2)  ∥
                                 (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                            case case_1
                            solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                              case PublicKeyRatchetNewSenderNoNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₄ #x.3 )
                            next
                              case PublicKeyRatchetNewSenderSomeNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₅ #x.3 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_3
                      solve( !KU( ~kemPreKey.1 ) @ #vk.66 )
                        case KemPreKeyLeak
                        solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                               (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                          case case_1
                          solve( (∃ #x.3.
                                   (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                  ∧
                                   #x.3 < #x.2)  ∥
                                 (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                            case case_1
                            solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                              case PublicKeyRatchetNewSenderNoNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₄ #x.3 )
                            next
                              case PublicKeyRatchetNewSenderSomeNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₅ #x.3 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case fresh
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk.1 ) @ #vk.64 )
                      case ECDHKeyLeak_case_01
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_02
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_03
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_04
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_05
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_06
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_07
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_08
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_09
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_10
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_11
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_12
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_13
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_14
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_15
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHPreKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case IdentityKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case KemKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                   ) ▶₄ #x.3 )
                              case SomeFreshKemSk
                              by contradiction /* from formulas */
                            qed
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                   ) ▶₅ #x.3 )
                              case SomeFreshKemSk
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case KemPreKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PQAttacker_case_01
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_02
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_03
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_04
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_05
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_06
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_07
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_08
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_09
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_10
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_11
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_12
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_13
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_14
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_15
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_16
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_17
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_1
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_2
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_3
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_4
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_5
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_6
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_7
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_8
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_13
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_14
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_15
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_16
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_17
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_18
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case SendSymmetricRatchet
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( theirIdPk ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk.1, theirEcdhPk.1, theirKemPk,
                                         preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( theirIdPk ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_1
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_2
                      solve( !KU( ~kemPreKey.1 ) @ #vk.66 )
                        case KemPreKeyLeak
                        solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                               (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                          case case_1
                          solve( (∃ #x.3.
                                   (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                  ∧
                                   #x.3 < #x.2)  ∥
                                 (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                            case case_1
                            solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                              case PublicKeyRatchetNewSenderNoNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₄ #x.3 )
                            next
                              case PublicKeyRatchetNewSenderSomeNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₅ #x.3 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_3
                      solve( !KU( ~kemPreKey.1 ) @ #vk.65 )
                        case KemPreKeyLeak
                        solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                               (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                          case case_1
                          solve( (∃ #x.3.
                                   (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                  ∧
                                   #x.3 < #x.2)  ∥
                                 (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                            case case_1
                            solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                              case PublicKeyRatchetNewSenderNoNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₄ #x.3 )
                            next
                              case PublicKeyRatchetNewSenderSomeNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₅ #x.3 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case fresh
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_6
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk.1 ) @ #vk.64 )
                      case ECDHKeyLeak_case_01
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_02
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_03
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_04
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_05
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_06
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_07
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_08
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_09
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_10
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_11
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_12
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_13
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_14
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_15
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHPreKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case IdentityKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case KemKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                   ) ▶₄ #x.3 )
                              case SomeFreshKemSk
                              by contradiction /* from formulas */
                            qed
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                   ) ▶₅ #x.3 )
                              case SomeFreshKemSk
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case KemPreKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PQAttacker_case_01
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_02
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_03
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_04
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_05
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_06
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_07
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_08
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_09
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_10
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_11
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_12
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_13
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_14
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_15
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_16
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_17
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_1
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_2
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_3
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_4
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_5
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_6
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_7
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_8
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_13
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_14
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_15
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_16
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_17
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_18
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case SendSymmetricRatchet
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( theirIdPk ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk.1, theirEcdhPk.1, theirKemPk,
                                         preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( theirIdPk ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_1
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_2
                      solve( !KU( ~kemPreKey.1 ) @ #vk.66 )
                        case KemPreKeyLeak
                        solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                               (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                          case case_1
                          solve( (∃ #x.3.
                                   (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                  ∧
                                   #x.3 < #x.2)  ∥
                                 (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                            case case_1
                            solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                              case PublicKeyRatchetNewSenderNoNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₄ #x.3 )
                            next
                              case PublicKeyRatchetNewSenderSomeNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₅ #x.3 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_3
                      solve( !KU( ~kemPreKey.1 ) @ #vk.65 )
                        case KemPreKeyLeak
                        solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                               (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                          case case_1
                          solve( (∃ #x.3.
                                   (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                  ∧
                                   #x.3 < #x.2)  ∥
                                 (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                            case case_1
                            solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                              case PublicKeyRatchetNewSenderNoNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₄ #x.3 )
                            next
                              case PublicKeyRatchetNewSenderSomeNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₅ #x.3 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case fresh
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk.1 ) @ #vk.63 )
                      case ECDHKeyLeak_case_01
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_02
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_03
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_04
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_05
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_06
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_07
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_08
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_09
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_10
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_11
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_12
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_13
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_14
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHKeyLeak_case_15
                      solve( SessionInfo( ~id.2, %1, $A, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ECDHPreKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case IdentityKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case KemKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                   ) ▶₄ #x.3 )
                              case SomeFreshKemSk
                              by contradiction /* from formulas */
                            qed
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                   ) ▶₅ #x.3 )
                              case SomeFreshKemSk
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    next
                      case KemPreKeyLeak
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        next
                          case case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PQAttacker_case_01
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_02
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_03
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_04
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_05
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_06
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_07
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_08
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_09
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_10
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_11
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_12
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_13
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_14
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_15
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_16
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PQAttacker_case_17
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( pk(x.4) ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_1
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_2
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_3
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_4
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_5
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_6
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_7
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderNoNewKemSS_case_8
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.6 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk.1,
                                         preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_13
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_14
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.9 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.8 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_15
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_16
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_17
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_18
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.8 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.5), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk, theirEcdhPk.1, theirKemPk, preKeySig
                               ) ▶₃ #x.4 )
                          case QueryIDS
                          solve( SessionStart( pk(x.1) ) @ #x.4 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case SendSymmetricRatchet
                      solve( SessionInfo( ~id.2, %1, $Me.1, $Them.1 ) @ #x.7 )
                        case ReceiverStart
                        solve( IDSQuery( $Them.1, pk(x.4), sprePk, skemPrePk, preKeySig
                               ) ▶₅ #x.3 )
                          case QueryIDS
                          solve( SessionStart( theirIdPk ) @ #x.3 )
                            case ReceiverStart
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case SessionStartAsASender
                        solve( IDSQuery( $Them.1, theirIdPk.1, theirEcdhPk.1, theirKemPk,
                                         preKeySig
                               ) ▶₃ #x.3 )
                          case QueryIDS
                          solve( SessionStart( theirIdPk ) @ #x.3 )
                            case SessionStartAsASender
                            solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                                   (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                    prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                                <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                              case case_1
                              solve( (∃ #x.3.
                                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                      ∧
                                       #x.3 < #x.2)  ∥
                                     (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                                case case_1
                                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.7 )
                                  case PublicKeyRatchetNewSenderNoNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₄ #x.4 )
                                next
                                  case PublicKeyRatchetNewSenderSomeNewKemSS
                                  by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                            ) ▶₅ #x.4 )
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_1
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_2
                      solve( !KU( ~kemPreKey.1 ) @ #vk.65 )
                        case KemPreKeyLeak
                        solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                               (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                          case case_1
                          solve( (∃ #x.3.
                                   (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                  ∧
                                   #x.3 < #x.2)  ∥
                                 (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                            case case_1
                            solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                              case PublicKeyRatchetNewSenderNoNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₄ #x.3 )
                            next
                              case PublicKeyRatchetNewSenderSomeNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₅ #x.3 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case SessionStartAsASender_case_3
                      solve( !KU( ~kemPreKey.1 ) @ #vk.64 )
                        case KemPreKeyLeak
                        solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                               (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                                prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                            <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                          case case_1
                          solve( (∃ #x.3.
                                   (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                  ∧
                                   #x.3 < #x.2)  ∥
                                 (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                            case case_1
                            solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                              case PublicKeyRatchetNewSenderNoNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₄ #x.3 )
                            next
                              case PublicKeyRatchetNewSenderSomeNewKemSS
                              by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                        ) ▶₅ #x.3 )
                            qed
                          qed
                        qed
                      qed
                    next
                      case fresh
                      solve( (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) ⊏
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>)))  ∥
                             (prefix(hkdf(hkdf(hkdf(z.2, '0'), z.3),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)) =
                              prefix(hkdf(hkdf(hkdf(ecdhSS, rootKey), '0'),
                                          <$Them, pk(~idKey.1), $Me, pk(~idKey)>))) )
                        case case_1
                        solve( (∃ #x.3.
                                 (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                                ∧
                                 #x.3 < #x.2)  ∥
                               (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                          case case_1
                          solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.5 )
                            case PublicKeyRatchetNewSenderNoNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₄ #x.3 )
                          next
                            case PublicKeyRatchetNewSenderSomeNewKemSS
                            by solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                                      ) ▶₅ #x.3 )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~idKey.1 ) @ #vk.55 )
                    case IdentityKeyLeak
                    by contradiction /* from formulas */
                  next
                    case PQAttacker
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case ReceiverStart
                solve( !KU( sign(<'msg_sig', ciphertext.1, $AD.1, 
                                  hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.1, '0'), kemSS),
                                                        <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>)),
                                            'msg_key'),
                                       'msg_key_ind'), 
                                  theirEcdhPk, %1, <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>, None, 
                                  Just(kemEncap), 
                                  Just(h(<'g'^~ecdhSk.1, pqpk(~kemSk.1), 
                                          sign(<'nf_reg', pqpk(~kemSk.1), 'g'^~ecdhSk.1>, ~idKey.2)>))
                                 >,
                                 ~idKey.1)
                       ) @ #vk.25 )
                  case SessionStartAsASender
                  solve( !KU( ~kemSS ) @ #t2 )
                    case SessionStartAsASender_case_1
                    solve( !KU( ~kemSk.1 ) @ #vk.33 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case SessionStartAsASender_case_2
                    solve( !KU( ~kemSk.1 ) @ #vk.32 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~idKey.1 ) @ #vk.39 )
                    case IdentityKeyLeak
                    by contradiction /* from formulas */
                  next
                    case PQAttacker
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case SessionStartAsASender
      solve( IDSQuery( $Them, theirIdPk, theirEcdhPk, theirKemPk, preKeySig
             ) ▶₃ #x.1 )
        case QueryIDS
        solve( SessionStart( pk(x) ) @ #x.1 )
          case SessionStartAsASender
          solve( (∃ #x.
                   (NewKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x) ∧ #x < #t1)  ∥
                 (∃ #x. (DecapKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x) ∧ #x < #t1) )
            case case_1
            solve( NewKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x.1 )
              case PublicKeyRatchetNewSenderSomeNewKemSS
              solve( NewKemPublicKey( ~id, $Me, $Them, Just(encapPk) ) @ #x.2 )
                case PublicKeyRatchetNewReceiverNoNewKemSS
                solve( !KU( sign(<'msg_sig', ciphertext.1, $AD.3, 
                                  hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.4, rootKey.2), '0'),
                                                        <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>)),
                                            'msg_key'),
                                       'msg_key_ind'), 
                                  theirEcdhPk.1, (%i.2%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>, 
                                  Just(encapPk), None, None>,
                                 ~idKey.1)
                       ) @ #vk.22 )
                  case PublicKeyRatchetNewSenderNoNewKemSS_case_1
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    solve( !KU( ~newKemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    solve( !KU( ~newKemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    solve( !KU( ~newKemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    solve( !KU( ~newKemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderNoNewKemSS_case_2
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.46 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.46 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    solve( !KU( ~newKemSk ) @ #vk.45 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    solve( !KU( ~newKemSk ) @ #vk.45 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.45 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.45 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    solve( !KU( ~newKemSk ) @ #vk.44 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    solve( !KU( ~newKemSk ) @ #vk.44 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.46 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.46 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderNoNewKemSS_case_3
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.46 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.46 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    solve( !KU( ~newKemSk ) @ #vk.45 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    solve( !KU( ~newKemSk ) @ #vk.45 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.45 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.45 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    solve( !KU( ~newKemSk ) @ #vk.44 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    solve( !KU( ~newKemSk ) @ #vk.44 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.46 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.46 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderNoNewKemSS_case_4
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    solve( !KU( ~newKemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    solve( !KU( ~newKemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    solve( !KU( ~newKemSk ) @ #vk.46 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    solve( !KU( ~newKemSk ) @ #vk.46 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~idKey.1 ) @ #vk.37 )
                    case IdentityKeyLeak
                    by contradiction /* from formulas */
                  next
                    case PQAttacker
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case PublicKeyRatchetNewReceiverWithSomeNewKemSS
                solve( !KU( sign(<'msg_sig', ciphertext.1, $AD.3, 
                                  hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.4, rootKey.2), z.5),
                                                        <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>)),
                                            'msg_key'),
                                       'msg_key_ind'), 
                                  theirEcdhPk.1, (%i.2%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>, 
                                  Just(encapPk), Just(kemEncap), None>,
                                 ~idKey.1)
                       ) @ #vk.22 )
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    solve( !KU( ~newKemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    solve( !KU( ~newKemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    solve( !KU( ~newKemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    solve( !KU( ~newKemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    solve( !KU( ~newKemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    solve( !KU( ~newKemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    solve( !KU( ~newKemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    solve( !KU( ~newKemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.51 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.51 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.51 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.51 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    solve( !KU( ~newKemSk ) @ #vk.51 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    solve( !KU( ~newKemSk ) @ #vk.51 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~idKey.1 ) @ #vk.39 )
                    case IdentityKeyLeak
                    by contradiction /* from formulas */
                  next
                    case PQAttacker
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case SessionStartAsASender
                solve( !KU( ~kemSS ) @ #t2 )
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                  solve( !KU( ~kemPreKey ) @ #vk.18 )
                    case KemPreKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                  solve( !KU( ~kemPreKey ) @ #vk.18 )
                    case KemPreKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                  solve( !KU( ~kemPreKey ) @ #vk.18 )
                    case KemPreKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                  solve( !KU( ~kemPreKey ) @ #vk.18 )
                    case KemPreKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                  solve( !KU( ~kemPreKey ) @ #vk.18 )
                    case KemPreKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                  solve( !KU( ~kemPreKey ) @ #vk.18 )
                    case KemPreKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                  solve( !KU( ~kemPreKey ) @ #vk.17 )
                    case KemPreKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                  solve( !KU( ~kemPreKey ) @ #vk.17 )
                    case KemPreKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                  solve( !KU( ~kemPreKey ) @ #vk.17 )
                    case KemPreKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                  solve( !KU( ~kemPreKey ) @ #vk.17 )
                    case KemPreKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                  solve( !KU( ~kemPreKey ) @ #vk.17 )
                    case KemPreKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                  solve( !KU( ~kemPreKey ) @ #vk.17 )
                    case KemPreKeyLeak
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case SessionStartAsASender
              solve( !KU( ~kemSS ) @ #t2 )
                case SessionStartAsASender_case_1
                solve( !KU( ~kemPreKey ) @ #vk.17 )
                  case KemPreKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case SessionStartAsASender_case_2
                solve( !KU( ~kemPreKey ) @ #vk.16 )
                  case KemPreKeyLeak
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case case_2
            solve( DecapKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x.1 )
              case PublicKeyRatchetNewReceiverWithSomeNewKemSS
              solve( (∃ #x.2.
                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.2)
                      ∧
                       #x.2 < #x.1)  ∥
                     (∃ #x.2. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.2) ∧ #x.2 < #x.1) )
                case case_1
                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.2 )
                  case PublicKeyRatchetNewSenderNoNewKemSS
                  solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                         ) ▶₄ #x.2 )
                    case SomeFreshKemSk
                    solve( !KU( sign(<'msg_sig', ciphertext.1, $AD.2, 
                                      hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.1, rootKey.1), kemSS),
                                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)),
                                                'msg_key'),
                                           'msg_key_ind'), 
                                      theirEcdhPk, (%i.1%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>, 
                                      maybeTheirNewKemPk, Just(kemEncap), None>,
                                     ~idKey.1)
                           ) @ #vk.25 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.46 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.45 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.45 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.44 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.47 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.46 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_4
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.46 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.45 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_5
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.49 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.48 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_6
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.48 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.47 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_sign
                      solve( !KU( ~idKey.1 ) @ #vk.39 )
                        case IdentityKeyLeak
                        by contradiction /* from formulas */
                      next
                        case PQAttacker
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS
                  solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                         ) ▶₅ #x.2 )
                    case SomeFreshKemSk
                    solve( !KU( sign(<'msg_sig', ciphertext.1, $AD.2, 
                                      hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.1, rootKey.1), kemSS),
                                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)),
                                                'msg_key'),
                                           'msg_key_ind'), 
                                      theirEcdhPk, (%i.1%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>, 
                                      maybeTheirNewKemPk, Just(kemEncap), None>,
                                     ~idKey.1)
                           ) @ #vk.25 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.46 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.45 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.45 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.44 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.47 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.46 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_4
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.46 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.45 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_5
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.49 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.48 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_6
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.48 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.47 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_sign
                      solve( !KU( ~idKey.1 ) @ #vk.39 )
                        case IdentityKeyLeak
                        by contradiction /* from formulas */
                      next
                        case PQAttacker
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( !KU( sign(<'msg_sig', ciphertext.1, $AD.2, 
                                  hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.1, rootKey.1), kemSS),
                                                        <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)),
                                            'msg_key'),
                                       'msg_key_ind'), 
                                  theirEcdhPk, (%i.1%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>, 
                                  maybeTheirNewKemPk, Just(kemEncap), None>,
                                 ~idKey.1)
                       ) @ #vk.23 )
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk.1 ) @ #vk.46 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk.1 ) @ #vk.45 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk.1 ) @ #vk.45 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk.1 ) @ #vk.44 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk.1 ) @ #vk.47 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk.1 ) @ #vk.46 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_4
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk.1 ) @ #vk.46 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk.1 ) @ #vk.45 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_5
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk.1 ) @ #vk.49 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk.1 ) @ #vk.48 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_6
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk.1 ) @ #vk.48 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk.1 ) @ #vk.47 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~idKey.1 ) @ #vk.39 )
                    case IdentityKeyLeak
                    by contradiction /* from formulas */
                  next
                    case PQAttacker
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case PublicKeyRatchetNewReceiverWithSomeNewKemSS
  solve( SessionInfo( id.1, i.1, me, them ) @ #t1 )
    case PublicKeyRatchetNewReceiverWithSomeNewKemSS
    solve( SessionInfo( ~id, %1, $Me, $Them ) @ #x.1 )
      case ReceiverStart
      solve( IDSQuery( $Them, pk(x.2), sprePk, skemPrePk, preKeySig ) ▶₅ #x.1 )
        case QueryIDS
        solve( SessionStart( pk(x) ) @ #x.1 )
          case ReceiverStart
          solve( (∃ #x.
                   (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk)) ) @ #x) ∧ #x < #t1)  ∥
                 (∃ #x. (KemPreKeyGen( $Me, pqpk(~kemSk) ) @ #x) ∧ #x < #t1) )
            case case_1
            solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk)) ) @ #x.1 )
              case PublicKeyRatchetNewSenderNoNewKemSS
              solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk))
                     ) ▶₄ #x.1 )
                case SomeFreshKemSk
                solve( !KU( sign(<'msg_sig', ciphertext, $AD, 
                                  hkdf(hkdf(suffix(hkdf(hkdf(hkdf(ecdhSS, rootKey), kemSS),
                                                        <$Them, pk(~idKey.1), $Me, pk(~idKey)>)),
                                            'msg_key'),
                                       'msg_key_ind'), 
                                  theirPk, (%i%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey)>, 
                                  maybeNewKemPk, Just(kemEncap), None>,
                                 ~idKey.1)
                       ) @ #vk.5 )
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk ) @ #vk.46 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_4
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_5
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_6
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~idKey.1 ) @ #vk.40 )
                    case IdentityKeyLeak
                    by contradiction /* from formulas */
                  next
                    case PQAttacker
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            next
              case PublicKeyRatchetNewSenderSomeNewKemSS
              solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk))
                     ) ▶₅ #x.1 )
                case SomeFreshKemSk
                solve( !KU( sign(<'msg_sig', ciphertext, $AD, 
                                  hkdf(hkdf(suffix(hkdf(hkdf(hkdf(ecdhSS, rootKey), kemSS),
                                                        <$Them, pk(~idKey.1), $Me, pk(~idKey)>)),
                                            'msg_key'),
                                       'msg_key_ind'), 
                                  theirPk, (%i%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey)>, 
                                  maybeNewKemPk, Just(kemEncap), None>,
                                 ~idKey.1)
                       ) @ #vk.5 )
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk ) @ #vk.46 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_4
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_5
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_6
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~idKey.1 ) @ #vk.40 )
                    case IdentityKeyLeak
                    by contradiction /* from formulas */
                  next
                    case PQAttacker
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case case_2
            solve( !KU( sign(<'msg_sig', ciphertext, $AD, 
                              hkdf(hkdf(suffix(hkdf(hkdf(hkdf(ecdhSS, rootKey), kemSS),
                                                    <$Them, pk(~idKey.1), $Me, pk(~idKey)>)),
                                        'msg_key'),
                                   'msg_key_ind'), 
                              theirPk, (%i%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey)>, 
                              maybeNewKemPk, Just(kemEncap), None>,
                             ~idKey.1)
                   ) @ #vk.5 )
              case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
              solve( !KU( ~kemSS ) @ #t2 )
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                solve( !KU( ~kemSk ) @ #vk.48 )
                  case KemPreKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                solve( !KU( ~kemSk ) @ #vk.47 )
                  case KemPreKeyLeak
                  by contradiction /* from formulas */
                qed
              qed
            next
              case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
              solve( !KU( ~kemSS ) @ #t2 )
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                solve( !KU( ~kemSk ) @ #vk.47 )
                  case KemPreKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                solve( !KU( ~kemSk ) @ #vk.46 )
                  case KemPreKeyLeak
                  by contradiction /* from formulas */
                qed
              qed
            next
              case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
              solve( !KU( ~kemSS ) @ #t2 )
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                solve( !KU( ~kemSk ) @ #vk.49 )
                  case KemPreKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                solve( !KU( ~kemSk ) @ #vk.48 )
                  case KemPreKeyLeak
                  by contradiction /* from formulas */
                qed
              qed
            next
              case PublicKeyRatchetNewSenderSomeNewKemSS_case_4
              solve( !KU( ~kemSS ) @ #t2 )
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                solve( !KU( ~kemSk ) @ #vk.48 )
                  case KemPreKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                solve( !KU( ~kemSk ) @ #vk.47 )
                  case KemPreKeyLeak
                  by contradiction /* from formulas */
                qed
              qed
            next
              case PublicKeyRatchetNewSenderSomeNewKemSS_case_5
              solve( !KU( ~kemSS ) @ #t2 )
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                solve( !KU( ~kemSk ) @ #vk.50 )
                  case KemPreKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                solve( !KU( ~kemSk ) @ #vk.49 )
                  case KemPreKeyLeak
                  by contradiction /* from formulas */
                qed
              qed
            next
              case PublicKeyRatchetNewSenderSomeNewKemSS_case_6
              solve( !KU( ~kemSS ) @ #t2 )
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                solve( !KU( ~kemSk ) @ #vk.49 )
                  case KemPreKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                solve( !KU( ~kemSk ) @ #vk.48 )
                  case KemPreKeyLeak
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~idKey.1 ) @ #vk.40 )
                case IdentityKeyLeak
                by contradiction /* from formulas */
              next
                case PQAttacker
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    next
      case SessionStartAsASender
      solve( IDSQuery( $Them, theirIdPk, theirEcdhPk, theirKemPk, preKeySig
             ) ▶₃ #x.1 )
        case QueryIDS
        solve( SessionStart( pk(x) ) @ #x.1 )
          case SessionStartAsASender
          solve( (∃ #x.
                   (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk)) ) @ #x) ∧ #x < #t1)  ∥
                 (∃ #x. (KemPreKeyGen( $Me, pqpk(~kemSk) ) @ #x) ∧ #x < #t1) )
            case case_1
            solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk)) ) @ #x.1 )
              case PublicKeyRatchetNewSenderNoNewKemSS
              solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk))
                     ) ▶₄ #x.1 )
                case SomeFreshKemSk
                solve( !KU( sign(<'msg_sig', ciphertext, $AD, 
                                  hkdf(hkdf(suffix(hkdf(hkdf(hkdf(ecdhSS, rootKey), kemSS),
                                                        <$Them, pk(~idKey.1), $Me, pk(~idKey)>)),
                                            'msg_key'),
                                       'msg_key_ind'), 
                                  theirPk, (%i%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey)>, 
                                  maybeNewKemPk, Just(kemEncap), None>,
                                 ~idKey.1)
                       ) @ #vk.5 )
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk ) @ #vk.32 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk ) @ #vk.31 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk ) @ #vk.31 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk ) @ #vk.30 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk ) @ #vk.32 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_4
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk ) @ #vk.32 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk ) @ #vk.31 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_5
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_6
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk ) @ #vk.32 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~idKey.1 ) @ #vk.24 )
                    case IdentityKeyLeak
                    by contradiction /* from formulas */
                  next
                    case PQAttacker
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            next
              case PublicKeyRatchetNewSenderSomeNewKemSS
              solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk))
                     ) ▶₅ #x.1 )
                case SomeFreshKemSk
                solve( !KU( sign(<'msg_sig', ciphertext, $AD, 
                                  hkdf(hkdf(suffix(hkdf(hkdf(hkdf(ecdhSS, rootKey), kemSS),
                                                        <$Them, pk(~idKey.1), $Me, pk(~idKey)>)),
                                            'msg_key'),
                                       'msg_key_ind'), 
                                  theirPk, (%i%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey)>, 
                                  maybeNewKemPk, Just(kemEncap), None>,
                                 ~idKey.1)
                       ) @ #vk.5 )
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk ) @ #vk.32 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk ) @ #vk.31 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk ) @ #vk.31 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk ) @ #vk.30 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk ) @ #vk.32 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_4
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk ) @ #vk.32 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk ) @ #vk.31 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_5
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_6
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk ) @ #vk.32 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~idKey.1 ) @ #vk.24 )
                    case IdentityKeyLeak
                    by contradiction /* from formulas */
                  next
                    case PQAttacker
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case case_2
            solve( !KU( sign(<'msg_sig', ciphertext, $AD, 
                              hkdf(hkdf(suffix(hkdf(hkdf(hkdf(ecdhSS, rootKey), kemSS),
                                                    <$Them, pk(~idKey.1), $Me, pk(~idKey)>)),
                                        'msg_key'),
                                   'msg_key_ind'), 
                              theirPk, (%i%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey)>, 
                              maybeNewKemPk, Just(kemEncap), None>,
                             ~idKey.1)
                   ) @ #vk.5 )
              case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
              solve( !KU( ~kemSS ) @ #t2 )
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                solve( !KU( ~kemSk ) @ #vk.32 )
                  case KemPreKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                solve( !KU( ~kemSk ) @ #vk.31 )
                  case KemPreKeyLeak
                  by contradiction /* from formulas */
                qed
              qed
            next
              case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
              solve( !KU( ~kemSS ) @ #t2 )
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                solve( !KU( ~kemSk ) @ #vk.31 )
                  case KemPreKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                solve( !KU( ~kemSk ) @ #vk.30 )
                  case KemPreKeyLeak
                  by contradiction /* from formulas */
                qed
              qed
            next
              case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
              solve( !KU( ~kemSS ) @ #t2 )
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                solve( !KU( ~kemSk ) @ #vk.33 )
                  case KemPreKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                solve( !KU( ~kemSk ) @ #vk.32 )
                  case KemPreKeyLeak
                  by contradiction /* from formulas */
                qed
              qed
            next
              case PublicKeyRatchetNewSenderSomeNewKemSS_case_4
              solve( !KU( ~kemSS ) @ #t2 )
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                solve( !KU( ~kemSk ) @ #vk.32 )
                  case KemPreKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                solve( !KU( ~kemSk ) @ #vk.31 )
                  case KemPreKeyLeak
                  by contradiction /* from formulas */
                qed
              qed
            next
              case PublicKeyRatchetNewSenderSomeNewKemSS_case_5
              solve( !KU( ~kemSS ) @ #t2 )
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                solve( !KU( ~kemSk ) @ #vk.34 )
                  case KemPreKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                solve( !KU( ~kemSk ) @ #vk.33 )
                  case KemPreKeyLeak
                  by contradiction /* from formulas */
                qed
              qed
            next
              case PublicKeyRatchetNewSenderSomeNewKemSS_case_6
              solve( !KU( ~kemSS ) @ #t2 )
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                solve( !KU( ~kemSk ) @ #vk.33 )
                  case KemPreKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                solve( !KU( ~kemSk ) @ #vk.32 )
                  case KemPreKeyLeak
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~idKey.1 ) @ #vk.24 )
                case IdentityKeyLeak
                by contradiction /* from formulas */
              next
                case PQAttacker
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case PublicKeyRatchetNewSenderNoNewKemSS
  solve( SessionInfo( id.1, i.1, me, them ) @ #t1 )
    case PublicKeyRatchetNewSenderNoNewKemSS
    solve( SessionInfo( ~id, %1, $Me, $Them ) @ #x )
      case ReceiverStart
      solve( IDSQuery( $Them, pk(x.1), sprePk, skemPrePk, preKeySig ) ▶₅ #x )
        case QueryIDS
        solve( SessionStart( theirIdPk ) @ #x )
          case ReceiverStart
          solve( (∃ #x.
                   (NewKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x) ∧ #x < #t1)  ∥
                 (∃ #x. (DecapKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x) ∧ #x < #t1) )
            case case_1
            solve( NewKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x.1 )
              case PublicKeyRatchetNewSenderSomeNewKemSS
              solve( NewKemPublicKey( ~id, $Me, $Them, Just(encapPk) ) @ #x.2 )
                case PublicKeyRatchetNewReceiverNoNewKemSS
                solve( !KU( sign(<'msg_sig', ciphertext.1, $AD.3, 
                                  hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.7, rootKey.2), '0'),
                                                        <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>)),
                                            'msg_key'),
                                       'msg_key_ind'), 
                                  theirEcdhPk.2, (%i.2%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>, 
                                  Just(encapPk), None, None>,
                                 ~idKey.1)
                       ) @ #vk.23 )
                  case PublicKeyRatchetNewSenderNoNewKemSS_case_1
                  solve( !KU( sign(<'msg_sig', ciphertext, $AD.1, 
                                    hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.1, '0'), z.2),
                                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>)),
                                              'msg_key'),
                                         'msg_key_ind'), 
                                    theirEcdhPk, %1, <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>, None, 
                                    Just(kemEncap), 
                                    Just(h(<'g'^~ecdhSk.1, pqpk(~kemSk), 
                                            sign(<'nf_reg', pqpk(~kemSk), 'g'^~ecdhSk.1>, ~idKey.2)>))
                                   >,
                                   ~idKey.1)
                         ) @ #vk.6 )
                    case SessionStartAsASender
                    solve( !KU( ~kemSS ) @ #t2 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.50 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.50 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                      solve( !KU( ~newKemSk ) @ #vk.49 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                      solve( !KU( ~newKemSk ) @ #vk.49 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.51 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.51 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.49 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.49 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                      solve( !KU( ~newKemSk ) @ #vk.48 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                      solve( !KU( ~newKemSk ) @ #vk.48 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.50 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.50 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~idKey.1 ) @ #vk.54 )
                      case IdentityKeyLeak
                      by contradiction /* from formulas */
                    next
                      case PQAttacker
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderNoNewKemSS_case_2
                  solve( !KU( sign(<'msg_sig', ciphertext, $AD.1, 
                                    hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.1, '0'), z.2),
                                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>)),
                                              'msg_key'),
                                         'msg_key_ind'), 
                                    theirEcdhPk, %1, <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>, None, 
                                    Just(kemEncap), 
                                    Just(h(<'g'^~ecdhSk.1, pqpk(~kemSk), 
                                            sign(<'nf_reg', pqpk(~kemSk), 'g'^~ecdhSk.1>, ~idKey.2)>))
                                   >,
                                   ~idKey.1)
                         ) @ #vk.6 )
                    case SessionStartAsASender
                    solve( !KU( ~kemSS ) @ #t2 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.48 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.48 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                      solve( !KU( ~newKemSk ) @ #vk.47 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                      solve( !KU( ~newKemSk ) @ #vk.47 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.49 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.49 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.47 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.47 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                      solve( !KU( ~newKemSk ) @ #vk.46 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                      solve( !KU( ~newKemSk ) @ #vk.46 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.48 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.48 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~idKey.1 ) @ #vk.52 )
                      case IdentityKeyLeak
                      by contradiction /* from formulas */
                    next
                      case PQAttacker
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderNoNewKemSS_case_3
                  solve( !KU( sign(<'msg_sig', ciphertext, $AD.1, 
                                    hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.1, '0'), z.2),
                                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>)),
                                              'msg_key'),
                                         'msg_key_ind'), 
                                    theirEcdhPk, %1, <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>, None, 
                                    Just(kemEncap), 
                                    Just(h(<'g'^~ecdhSk.1, pqpk(~kemSk), 
                                            sign(<'nf_reg', pqpk(~kemSk), 'g'^~ecdhSk.1>, ~idKey.2)>))
                                   >,
                                   ~idKey.1)
                         ) @ #vk.6 )
                    case SessionStartAsASender
                    solve( !KU( ~kemSS ) @ #t2 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.48 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.48 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                      solve( !KU( ~newKemSk ) @ #vk.47 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                      solve( !KU( ~newKemSk ) @ #vk.47 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.49 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.49 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.47 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.47 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                      solve( !KU( ~newKemSk ) @ #vk.46 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                      solve( !KU( ~newKemSk ) @ #vk.46 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.48 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.48 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~idKey.1 ) @ #vk.52 )
                      case IdentityKeyLeak
                      by contradiction /* from formulas */
                    next
                      case PQAttacker
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderNoNewKemSS_case_4
                  solve( !KU( sign(<'msg_sig', ciphertext, $AD.1, 
                                    hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.1, '0'), z.2),
                                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>)),
                                              'msg_key'),
                                         'msg_key_ind'), 
                                    theirEcdhPk, %1, <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>, None, 
                                    Just(kemEncap), 
                                    Just(h(<'g'^~ecdhSk.1, pqpk(~kemSk), 
                                            sign(<'nf_reg', pqpk(~kemSk), 'g'^~ecdhSk.1>, ~idKey.2)>))
                                   >,
                                   ~idKey.1)
                         ) @ #vk.6 )
                    case SessionStartAsASender
                    solve( !KU( ~kemSS ) @ #t2 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.50 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.50 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                      solve( !KU( ~newKemSk ) @ #vk.49 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                      solve( !KU( ~newKemSk ) @ #vk.49 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.51 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.51 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.49 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.49 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                      solve( !KU( ~newKemSk ) @ #vk.48 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                      solve( !KU( ~newKemSk ) @ #vk.48 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.50 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.50 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~idKey.1 ) @ #vk.54 )
                      case IdentityKeyLeak
                      by contradiction /* from formulas */
                    next
                      case PQAttacker
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~idKey.1 ) @ #vk.39 )
                    case IdentityKeyLeak
                    by contradiction /* from formulas */
                  next
                    case PQAttacker
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case PublicKeyRatchetNewReceiverWithSomeNewKemSS
                solve( !KU( sign(<'msg_sig', ciphertext.1, $AD.3, 
                                  hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.7, rootKey.2), z.8),
                                                        <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>)),
                                            'msg_key'),
                                       'msg_key_ind'), 
                                  theirEcdhPk.2, (%i.2%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>, 
                                  Just(encapPk), Just(kemEncap.1), None>,
                                 ~idKey.1)
                       ) @ #vk.23 )
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    solve( !KU( ~newKemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    solve( !KU( ~newKemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.51 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.51 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.51 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.51 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    solve( !KU( ~newKemSk ) @ #vk.51 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    solve( !KU( ~newKemSk ) @ #vk.51 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.53 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.53 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.53 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.53 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    solve( !KU( ~newKemSk ) @ #vk.52 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    solve( !KU( ~newKemSk ) @ #vk.52 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.52 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.52 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.52 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.52 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    solve( !KU( ~newKemSk ) @ #vk.51 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    solve( !KU( ~newKemSk ) @ #vk.51 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~idKey.1 ) @ #vk.40 )
                    case IdentityKeyLeak
                    by contradiction /* from formulas */
                  next
                    case PQAttacker
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case case_2
            solve( (∃ #x.1.
                     (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk)) ) @ #x.1) ∧ #x.1 < #x)  ∥
                   (∃ #x.1. (KemPreKeyGen( $Me, pqpk(~kemSk) ) @ #x.1) ∧ #x.1 < #x) )
              case case_1
              solve( DecapKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x.1 )
                case PublicKeyRatchetNewReceiverWithSomeNewKemSS
                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.2 )
                  case PublicKeyRatchetNewSenderNoNewKemSS
                  by contradiction
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS
                  by contradiction
                qed
              next
                case ReceiverStart
                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk)) ) @ #x.1 )
                  case PublicKeyRatchetNewSenderNoNewKemSS
                  by contradiction
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS
                  by contradiction
                qed
              qed
            next
              case case_2
              solve( DecapKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x.2 )
                case PublicKeyRatchetNewReceiverWithSomeNewKemSS
                solve( (∃ #x.3.
                         (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk)) ) @ #x.3)
                        ∧
                         #x.3 < #x.2)  ∥
                       (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk) ) @ #x.3) ∧ #x.3 < #x.2) )
                  case case_1
                  solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk)) ) @ #x.3 )
                    case PublicKeyRatchetNewSenderNoNewKemSS
                    solve( NewKemKey( $Me, $Them, maybeNewKemSk.1, Just(pqpk(~kemSk))
                           ) ▶₄ #x.3 )
                      case SomeFreshKemSk
                      solve( !KU( sign(<'msg_sig', ciphertext.1, $AD.2, 
                                        hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.4, rootKey.1), kemSS),
                                                              <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>)),
                                                  'msg_key'),
                                             'msg_key_ind'), 
                                        theirEcdhPk.1, (%i.1%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>, 
                                        maybeTheirNewKemPk, Just(kemEncap.1), None>,
                                       ~idKey.1)
                             ) @ #vk.26 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk ) @ #vk.48 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk ) @ #vk.47 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk ) @ #vk.47 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk ) @ #vk.46 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk ) @ #vk.49 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk ) @ #vk.48 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_4
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk ) @ #vk.48 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk ) @ #vk.47 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_5
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk ) @ #vk.50 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk ) @ #vk.49 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_6
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk ) @ #vk.49 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk ) @ #vk.48 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~idKey.1 ) @ #vk.40 )
                          case IdentityKeyLeak
                          by contradiction /* from formulas */
                        next
                          case PQAttacker
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS
                    solve( NewKemKey( $Me, $Them, maybeNewKemSk.1, Just(pqpk(~kemSk))
                           ) ▶₅ #x.3 )
                      case SomeFreshKemSk
                      solve( !KU( sign(<'msg_sig', ciphertext.1, $AD.2, 
                                        hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.4, rootKey.1), kemSS),
                                                              <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>)),
                                                  'msg_key'),
                                             'msg_key_ind'), 
                                        theirEcdhPk.1, (%i.1%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>, 
                                        maybeTheirNewKemPk, Just(kemEncap.1), None>,
                                       ~idKey.1)
                             ) @ #vk.26 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk ) @ #vk.48 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk ) @ #vk.47 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk ) @ #vk.47 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk ) @ #vk.46 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk ) @ #vk.49 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk ) @ #vk.48 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_4
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk ) @ #vk.48 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk ) @ #vk.47 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_5
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk ) @ #vk.50 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk ) @ #vk.49 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_6
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk ) @ #vk.49 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk ) @ #vk.48 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~idKey.1 ) @ #vk.40 )
                          case IdentityKeyLeak
                          by contradiction /* from formulas */
                        next
                          case PQAttacker
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !KU( sign(<'msg_sig', ciphertext.1, $AD.2, 
                                    hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.4, rootKey.1), kemSS),
                                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>)),
                                              'msg_key'),
                                         'msg_key_ind'), 
                                    theirEcdhPk.1, (%i.1%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>, 
                                    maybeTheirNewKemPk, Just(kemEncap.1), None>,
                                   ~idKey.1)
                         ) @ #vk.24 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSS ) @ #t2 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                      solve( !KU( ~kemSk ) @ #vk.48 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                      solve( !KU( ~kemSk ) @ #vk.47 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSS ) @ #t2 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                      solve( !KU( ~kemSk ) @ #vk.47 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                      solve( !KU( ~kemSk ) @ #vk.46 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
                    solve( !KU( ~kemSS ) @ #t2 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                      solve( !KU( ~kemSk ) @ #vk.49 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                      solve( !KU( ~kemSk ) @ #vk.48 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_4
                    solve( !KU( ~kemSS ) @ #t2 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                      solve( !KU( ~kemSk ) @ #vk.48 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                      solve( !KU( ~kemSk ) @ #vk.47 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_5
                    solve( !KU( ~kemSS ) @ #t2 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                      solve( !KU( ~kemSk ) @ #vk.50 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                      solve( !KU( ~kemSk ) @ #vk.49 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_6
                    solve( !KU( ~kemSS ) @ #t2 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                      solve( !KU( ~kemSk ) @ #vk.49 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                      solve( !KU( ~kemSk ) @ #vk.48 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~idKey.1 ) @ #vk.40 )
                      case IdentityKeyLeak
                      by contradiction /* from formulas */
                    next
                      case PQAttacker
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              next
                case ReceiverStart
                solve( !KU( sign(<'msg_sig', ciphertext, $AD.1, 
                                  hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.1, '0'), kemSS),
                                                        <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>)),
                                            'msg_key'),
                                       'msg_key_ind'), 
                                  theirEcdhPk, %1, <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>, None, 
                                  Just(kemEncap), 
                                  Just(h(<'g'^~ecdhSk.1, pqpk(~kemSk), 
                                          sign(<'nf_reg', pqpk(~kemSk), 'g'^~ecdhSk.1>, ~idKey.2)>))
                                 >,
                                 ~idKey.1)
                       ) @ #vk.5 )
                  case SessionStartAsASender
                  solve( !KU( ~kemSS ) @ #t2 )
                    case SessionStartAsASender_case_1
                    solve( !KU( ~kemSk ) @ #vk.18 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case SessionStartAsASender_case_2
                    solve( !KU( ~kemSk ) @ #vk.17 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~idKey.1 ) @ #vk.24 )
                    case IdentityKeyLeak
                    by contradiction /* from formulas */
                  next
                    case PQAttacker
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case SessionStartAsASender
      solve( IDSQuery( $Them, theirIdPk.1, theirEcdhPk, theirKemPk, preKeySig
             ) ▶₃ #x )
        case QueryIDS
        solve( SessionStart( theirIdPk ) @ #x )
          case SessionStartAsASender
          solve( (∃ #x.
                   (NewKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x) ∧ #x < #t1)  ∥
                 (∃ #x. (DecapKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x) ∧ #x < #t1) )
            case case_1
            solve( NewKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x.1 )
              case PublicKeyRatchetNewSenderSomeNewKemSS
              solve( NewKemPublicKey( ~id, $Me, $Them, Just(encapPk) ) @ #x.2 )
                case PublicKeyRatchetNewReceiverNoNewKemSS
                solve( !KU( sign(<'msg_sig', ciphertext, $AD.3, 
                                  hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.4, rootKey.2), '0'),
                                                        <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>)),
                                            'msg_key'),
                                       'msg_key_ind'), 
                                  theirEcdhPk.1, (%i.2%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>, 
                                  Just(encapPk), None, None>,
                                 ~idKey.1)
                       ) @ #vk.5 )
                  case PublicKeyRatchetNewSenderNoNewKemSS_case_1
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.35 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.35 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.36 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.36 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    solve( !KU( ~newKemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    solve( !KU( ~newKemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.35 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.35 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderNoNewKemSS_case_2
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.32 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.32 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    solve( !KU( ~newKemSk ) @ #vk.31 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    solve( !KU( ~newKemSk ) @ #vk.31 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.31 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.31 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    solve( !KU( ~newKemSk ) @ #vk.30 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    solve( !KU( ~newKemSk ) @ #vk.30 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.32 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.32 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderNoNewKemSS_case_3
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.32 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.32 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    solve( !KU( ~newKemSk ) @ #vk.31 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    solve( !KU( ~newKemSk ) @ #vk.31 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.31 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.31 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    solve( !KU( ~newKemSk ) @ #vk.30 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    solve( !KU( ~newKemSk ) @ #vk.30 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.32 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.32 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderNoNewKemSS_case_4
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    solve( !KU( ~newKemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    solve( !KU( ~newKemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.35 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.35 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    solve( !KU( ~newKemSk ) @ #vk.32 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    solve( !KU( ~newKemSk ) @ #vk.32 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~idKey.1 ) @ #vk.23 )
                    case IdentityKeyLeak
                    by contradiction /* from formulas */
                  next
                    case PQAttacker
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case PublicKeyRatchetNewReceiverWithSomeNewKemSS
                solve( !KU( sign(<'msg_sig', ciphertext, $AD.3, 
                                  hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.4, rootKey.2), z.5),
                                                        <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>)),
                                            'msg_key'),
                                       'msg_key_ind'), 
                                  theirEcdhPk.1, (%i.2%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>, 
                                  Just(encapPk), Just(kemEncap), None>,
                                 ~idKey.1)
                       ) @ #vk.5 )
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    solve( !KU( ~newKemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    solve( !KU( ~newKemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.35 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.35 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.35 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.35 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    solve( !KU( ~newKemSk ) @ #vk.35 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    solve( !KU( ~newKemSk ) @ #vk.35 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.37 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.37 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.37 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.37 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    solve( !KU( ~newKemSk ) @ #vk.36 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    solve( !KU( ~newKemSk ) @ #vk.36 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.36 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.36 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.36 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.36 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    solve( !KU( ~newKemSk ) @ #vk.35 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    solve( !KU( ~newKemSk ) @ #vk.35 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~idKey.1 ) @ #vk.24 )
                    case IdentityKeyLeak
                    by contradiction /* from formulas */
                  next
                    case PQAttacker
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case SessionStartAsASender
                solve( !KU( ~kemSS ) @ #t2 )
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                  solve( !KU( ~kemPreKey ) @ #vk.1 )
                    case KemPreKeyLeak
                    by contradiction
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                  solve( !KU( ~kemPreKey ) @ #vk.1 )
                    case KemPreKeyLeak
                    by contradiction
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                  solve( !KU( ~kemPreKey ) @ #vk.1 )
                    case KemPreKeyLeak
                    by contradiction
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                  solve( !KU( ~kemPreKey ) @ #vk.1 )
                    case KemPreKeyLeak
                    by contradiction
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                  solve( !KU( ~kemPreKey ) @ #vk.1 )
                    case KemPreKeyLeak
                    by contradiction
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                  solve( !KU( ~kemPreKey ) @ #vk.1 )
                    case KemPreKeyLeak
                    by contradiction
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                  solve( !KU( ~kemPreKey ) @ #vk )
                    case KemPreKeyLeak
                    by contradiction
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                  solve( !KU( ~kemPreKey ) @ #vk )
                    case KemPreKeyLeak
                    by contradiction
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                  solve( !KU( ~kemPreKey ) @ #vk )
                    case KemPreKeyLeak
                    by contradiction
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                  solve( !KU( ~kemPreKey ) @ #vk )
                    case KemPreKeyLeak
                    by contradiction
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                  solve( !KU( ~kemPreKey ) @ #vk )
                    case KemPreKeyLeak
                    by contradiction
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                  solve( !KU( ~kemPreKey ) @ #vk )
                    case KemPreKeyLeak
                    by contradiction
                  qed
                qed
              qed
            next
              case SessionStartAsASender
              solve( !KU( ~kemSS ) @ #t2 )
                case SessionStartAsASender_case_1
                solve( !KU( ~kemPreKey ) @ #vk.1 )
                  case KemPreKeyLeak
                  by contradiction
                qed
              next
                case SessionStartAsASender_case_2
                solve( !KU( ~kemPreKey ) @ #vk )
                  case KemPreKeyLeak
                  by contradiction
                qed
              qed
            qed
          next
            case case_2
            solve( DecapKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x.1 )
              case PublicKeyRatchetNewReceiverWithSomeNewKemSS
              solve( (∃ #x.2.
                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk)) ) @ #x.2)
                      ∧
                       #x.2 < #x.1)  ∥
                     (∃ #x.2. (KemPreKeyGen( $Me, pqpk(~kemSk) ) @ #x.2) ∧ #x.2 < #x.1) )
                case case_1
                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk)) ) @ #x.2 )
                  case PublicKeyRatchetNewSenderNoNewKemSS
                  solve( NewKemKey( $Me, $Them, maybeNewKemSk.1, Just(pqpk(~kemSk))
                         ) ▶₄ #x.2 )
                    case SomeFreshKemSk
                    solve( !KU( sign(<'msg_sig', ciphertext, $AD.2, 
                                      hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.1, rootKey.1), kemSS),
                                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)),
                                                'msg_key'),
                                           'msg_key_ind'), 
                                      theirEcdhPk, (%i.1%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>, 
                                      maybeTheirNewKemPk, Just(kemEncap), None>,
                                     ~idKey.1)
                           ) @ #vk.5 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk ) @ #vk.32 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk ) @ #vk.31 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk ) @ #vk.31 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk ) @ #vk.30 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk ) @ #vk.33 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk ) @ #vk.32 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_4
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk ) @ #vk.32 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk ) @ #vk.31 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_5
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk ) @ #vk.34 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk ) @ #vk.33 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_6
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk ) @ #vk.33 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk ) @ #vk.32 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_sign
                      solve( !KU( ~idKey.1 ) @ #vk.24 )
                        case IdentityKeyLeak
                        by contradiction /* from formulas */
                      next
                        case PQAttacker
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS
                  solve( NewKemKey( $Me, $Them, maybeNewKemSk.1, Just(pqpk(~kemSk))
                         ) ▶₅ #x.2 )
                    case SomeFreshKemSk
                    solve( !KU( sign(<'msg_sig', ciphertext, $AD.2, 
                                      hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.1, rootKey.1), kemSS),
                                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)),
                                                'msg_key'),
                                           'msg_key_ind'), 
                                      theirEcdhPk, (%i.1%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>, 
                                      maybeTheirNewKemPk, Just(kemEncap), None>,
                                     ~idKey.1)
                           ) @ #vk.5 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk ) @ #vk.32 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk ) @ #vk.31 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk ) @ #vk.31 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk ) @ #vk.30 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk ) @ #vk.33 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk ) @ #vk.32 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_4
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk ) @ #vk.32 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk ) @ #vk.31 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_5
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk ) @ #vk.34 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk ) @ #vk.33 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_6
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk ) @ #vk.33 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk ) @ #vk.32 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_sign
                      solve( !KU( ~idKey.1 ) @ #vk.24 )
                        case IdentityKeyLeak
                        by contradiction /* from formulas */
                      next
                        case PQAttacker
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( !KU( sign(<'msg_sig', ciphertext, $AD.2, 
                                  hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.1, rootKey.1), kemSS),
                                                        <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)),
                                            'msg_key'),
                                       'msg_key_ind'), 
                                  theirEcdhPk, (%i.1%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>, 
                                  maybeTheirNewKemPk, Just(kemEncap), None>,
                                 ~idKey.1)
                       ) @ #vk.5 )
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk ) @ #vk.32 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk ) @ #vk.31 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk ) @ #vk.31 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk ) @ #vk.30 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk ) @ #vk.33 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk ) @ #vk.32 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_4
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk ) @ #vk.32 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk ) @ #vk.31 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_5
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk ) @ #vk.34 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk ) @ #vk.33 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_6
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk ) @ #vk.33 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk ) @ #vk.32 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~idKey.1 ) @ #vk.24 )
                    case IdentityKeyLeak
                    by contradiction /* from formulas */
                  next
                    case PQAttacker
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case PublicKeyRatchetNewSenderSomeNewKemSS
  solve( SessionInfo( id.1, i.1, me, them ) @ #t1 )
    case PublicKeyRatchetNewSenderSomeNewKemSS
    solve( SessionInfo( ~id, %1, $Me, $Them ) @ #x.1 )
      case ReceiverStart
      solve( IDSQuery( $Them, pk(x.1), sprePk, skemPrePk, preKeySig ) ▶₅ #x )
        case QueryIDS
        solve( SessionStart( theirIdPk ) @ #x )
          case ReceiverStart
          solve( NewKemPublicKey( ~id, $Me, $Them, Just(encapPk) ) @ #x.1 )
            case PublicKeyRatchetNewReceiverNoNewKemSS
            solve( !KU( sign(<'msg_sig', ciphertext.1, $AD.2, 
                              hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.4, rootKey.1), '0'),
                                                    <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)),
                                        'msg_key'),
                                   'msg_key_ind'), 
                              theirEcdhPk.1, (%i.1%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>, 
                              Just(encapPk), None, None>,
                             ~idKey.1)
                   ) @ #vk.23 )
              case PublicKeyRatchetNewSenderNoNewKemSS_case_1
              solve( !KU( sign(<'msg_sig', ciphertext, $AD.1, 
                                hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.1, '0'), z.2),
                                                      <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>)),
                                          'msg_key'),
                                     'msg_key_ind'), 
                                theirEcdhPk, %1, <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>, None, 
                                Just(kemEncap), 
                                Just(h(<'g'^~ecdhSk.1, pqpk(~kemSk), 
                                        sign(<'nf_reg', pqpk(~kemSk), 'g'^~ecdhSk.1>, ~idKey.2)>))
                               >,
                               ~idKey.1)
                     ) @ #vk.6 )
                case SessionStartAsASender
                solve( !KU( ~kemSS ) @ #t2 )
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                  simplify
                  solve( !KU( ~newKemSk ) @ #vk.50 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                  simplify
                  solve( !KU( ~newKemSk ) @ #vk.50 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                  solve( !KU( ~newKemSk ) @ #vk.49 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                  solve( !KU( ~newKemSk ) @ #vk.49 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                  simplify
                  solve( !KU( ~newKemSk ) @ #vk.51 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                  simplify
                  solve( !KU( ~newKemSk ) @ #vk.51 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                  simplify
                  solve( !KU( ~newKemSk ) @ #vk.49 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                  simplify
                  solve( !KU( ~newKemSk ) @ #vk.49 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                  solve( !KU( ~newKemSk ) @ #vk.48 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                  solve( !KU( ~newKemSk ) @ #vk.48 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                  simplify
                  solve( !KU( ~newKemSk ) @ #vk.50 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                  simplify
                  solve( !KU( ~newKemSk ) @ #vk.50 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~idKey.1 ) @ #vk.54 )
                  case IdentityKeyLeak
                  by contradiction /* from formulas */
                next
                  case PQAttacker
                  by contradiction /* cyclic */
                qed
              qed
            next
              case PublicKeyRatchetNewSenderNoNewKemSS_case_2
              solve( !KU( sign(<'msg_sig', ciphertext, $AD.1, 
                                hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.1, '0'), z.2),
                                                      <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>)),
                                          'msg_key'),
                                     'msg_key_ind'), 
                                theirEcdhPk, %1, <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>, None, 
                                Just(kemEncap), 
                                Just(h(<'g'^~ecdhSk.1, pqpk(~kemSk), 
                                        sign(<'nf_reg', pqpk(~kemSk), 'g'^~ecdhSk.1>, ~idKey.2)>))
                               >,
                               ~idKey.1)
                     ) @ #vk.6 )
                case SessionStartAsASender
                solve( !KU( ~kemSS ) @ #t2 )
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                  simplify
                  solve( !KU( ~newKemSk ) @ #vk.48 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                  simplify
                  solve( !KU( ~newKemSk ) @ #vk.48 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                  solve( !KU( ~newKemSk ) @ #vk.47 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                  solve( !KU( ~newKemSk ) @ #vk.47 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                  simplify
                  solve( !KU( ~newKemSk ) @ #vk.49 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                  simplify
                  solve( !KU( ~newKemSk ) @ #vk.49 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                  simplify
                  solve( !KU( ~newKemSk ) @ #vk.47 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                  simplify
                  solve( !KU( ~newKemSk ) @ #vk.47 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                  solve( !KU( ~newKemSk ) @ #vk.46 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                  solve( !KU( ~newKemSk ) @ #vk.46 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                  simplify
                  solve( !KU( ~newKemSk ) @ #vk.48 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                  simplify
                  solve( !KU( ~newKemSk ) @ #vk.48 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~idKey.1 ) @ #vk.52 )
                  case IdentityKeyLeak
                  by contradiction /* from formulas */
                next
                  case PQAttacker
                  by contradiction /* cyclic */
                qed
              qed
            next
              case PublicKeyRatchetNewSenderNoNewKemSS_case_3
              solve( !KU( sign(<'msg_sig', ciphertext, $AD.1, 
                                hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.1, '0'), z.2),
                                                      <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>)),
                                          'msg_key'),
                                     'msg_key_ind'), 
                                theirEcdhPk, %1, <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>, None, 
                                Just(kemEncap), 
                                Just(h(<'g'^~ecdhSk.1, pqpk(~kemSk), 
                                        sign(<'nf_reg', pqpk(~kemSk), 'g'^~ecdhSk.1>, ~idKey.2)>))
                               >,
                               ~idKey.1)
                     ) @ #vk.6 )
                case SessionStartAsASender
                solve( !KU( ~kemSS ) @ #t2 )
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                  simplify
                  solve( !KU( ~newKemSk ) @ #vk.48 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                  simplify
                  solve( !KU( ~newKemSk ) @ #vk.48 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                  solve( !KU( ~newKemSk ) @ #vk.47 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                  solve( !KU( ~newKemSk ) @ #vk.47 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                  simplify
                  solve( !KU( ~newKemSk ) @ #vk.49 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                  simplify
                  solve( !KU( ~newKemSk ) @ #vk.49 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                  simplify
                  solve( !KU( ~newKemSk ) @ #vk.47 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                  simplify
                  solve( !KU( ~newKemSk ) @ #vk.47 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                  solve( !KU( ~newKemSk ) @ #vk.46 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                  solve( !KU( ~newKemSk ) @ #vk.46 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                  simplify
                  solve( !KU( ~newKemSk ) @ #vk.48 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                  simplify
                  solve( !KU( ~newKemSk ) @ #vk.48 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~idKey.1 ) @ #vk.52 )
                  case IdentityKeyLeak
                  by contradiction /* from formulas */
                next
                  case PQAttacker
                  by contradiction /* cyclic */
                qed
              qed
            next
              case PublicKeyRatchetNewSenderNoNewKemSS_case_4
              solve( !KU( sign(<'msg_sig', ciphertext, $AD.1, 
                                hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.1, '0'), z.2),
                                                      <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>)),
                                          'msg_key'),
                                     'msg_key_ind'), 
                                theirEcdhPk, %1, <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>, None, 
                                Just(kemEncap), 
                                Just(h(<'g'^~ecdhSk.1, pqpk(~kemSk), 
                                        sign(<'nf_reg', pqpk(~kemSk), 'g'^~ecdhSk.1>, ~idKey.2)>))
                               >,
                               ~idKey.1)
                     ) @ #vk.6 )
                case SessionStartAsASender
                solve( !KU( ~kemSS ) @ #t2 )
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                  simplify
                  solve( !KU( ~newKemSk ) @ #vk.50 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                  simplify
                  solve( !KU( ~newKemSk ) @ #vk.50 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                  solve( !KU( ~newKemSk ) @ #vk.49 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                  solve( !KU( ~newKemSk ) @ #vk.49 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                  simplify
                  solve( !KU( ~newKemSk ) @ #vk.51 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                  simplify
                  solve( !KU( ~newKemSk ) @ #vk.51 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                  simplify
                  solve( !KU( ~newKemSk ) @ #vk.49 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                  simplify
                  solve( !KU( ~newKemSk ) @ #vk.49 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                  solve( !KU( ~newKemSk ) @ #vk.48 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                  solve( !KU( ~newKemSk ) @ #vk.48 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                  simplify
                  solve( !KU( ~newKemSk ) @ #vk.50 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                  simplify
                  solve( !KU( ~newKemSk ) @ #vk.50 )
                    case KemKeyLeak
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case c_sign
                solve( !KU( ~idKey.1 ) @ #vk.54 )
                  case IdentityKeyLeak
                  by contradiction /* from formulas */
                next
                  case PQAttacker
                  by contradiction /* cyclic */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~idKey.1 ) @ #vk.39 )
                case IdentityKeyLeak
                by contradiction /* from formulas */
              next
                case PQAttacker
                by contradiction /* cyclic */
              qed
            qed
          next
            case PublicKeyRatchetNewReceiverWithSomeNewKemSS
            solve( !KU( sign(<'msg_sig', ciphertext.1, $AD.2, 
                              hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.4, rootKey.1), z.5),
                                                    <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)),
                                        'msg_key'),
                                   'msg_key_ind'), 
                              theirEcdhPk.1, (%i.1%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>, 
                              Just(encapPk), Just(kemEncap.1), None>,
                             ~idKey.1)
                   ) @ #vk.23 )
              case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
              solve( !KU( ~kemSS ) @ #t2 )
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                simplify
                solve( !KU( ~newKemSk ) @ #vk.50 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                simplify
                solve( !KU( ~newKemSk ) @ #vk.50 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                simplify
                solve( !KU( ~newKemSk ) @ #vk.50 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                simplify
                solve( !KU( ~newKemSk ) @ #vk.50 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                solve( !KU( ~newKemSk ) @ #vk.50 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                solve( !KU( ~newKemSk ) @ #vk.50 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                simplify
                solve( !KU( ~newKemSk ) @ #vk.49 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                simplify
                solve( !KU( ~newKemSk ) @ #vk.49 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                simplify
                solve( !KU( ~newKemSk ) @ #vk.49 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                simplify
                solve( !KU( ~newKemSk ) @ #vk.49 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                solve( !KU( ~newKemSk ) @ #vk.49 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                solve( !KU( ~newKemSk ) @ #vk.49 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              qed
            next
              case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
              solve( !KU( ~kemSS ) @ #t2 )
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                simplify
                solve( !KU( ~newKemSk ) @ #vk.51 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                simplify
                solve( !KU( ~newKemSk ) @ #vk.51 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                simplify
                solve( !KU( ~newKemSk ) @ #vk.51 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                simplify
                solve( !KU( ~newKemSk ) @ #vk.51 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                solve( !KU( ~newKemSk ) @ #vk.51 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                solve( !KU( ~newKemSk ) @ #vk.51 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                simplify
                solve( !KU( ~newKemSk ) @ #vk.50 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                simplify
                solve( !KU( ~newKemSk ) @ #vk.50 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                simplify
                solve( !KU( ~newKemSk ) @ #vk.50 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                simplify
                solve( !KU( ~newKemSk ) @ #vk.50 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                solve( !KU( ~newKemSk ) @ #vk.50 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                solve( !KU( ~newKemSk ) @ #vk.50 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              qed
            next
              case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
              solve( !KU( ~kemSS ) @ #t2 )
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                simplify
                solve( !KU( ~newKemSk ) @ #vk.53 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                simplify
                solve( !KU( ~newKemSk ) @ #vk.53 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                simplify
                solve( !KU( ~newKemSk ) @ #vk.53 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                simplify
                solve( !KU( ~newKemSk ) @ #vk.53 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                solve( !KU( ~newKemSk ) @ #vk.52 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                solve( !KU( ~newKemSk ) @ #vk.52 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                simplify
                solve( !KU( ~newKemSk ) @ #vk.52 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                simplify
                solve( !KU( ~newKemSk ) @ #vk.52 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                simplify
                solve( !KU( ~newKemSk ) @ #vk.52 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                simplify
                solve( !KU( ~newKemSk ) @ #vk.52 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                solve( !KU( ~newKemSk ) @ #vk.51 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                solve( !KU( ~newKemSk ) @ #vk.51 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~idKey.1 ) @ #vk.40 )
                case IdentityKeyLeak
                by contradiction /* from formulas */
              next
                case PQAttacker
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    next
      case SessionStartAsASender
      solve( IDSQuery( $Them, theirIdPk.1, theirEcdhPk, theirKemPk, preKeySig
             ) ▶₃ #x )
        case QueryIDS
        solve( SessionStart( theirIdPk ) @ #x )
          case SessionStartAsASender
          solve( NewKemPublicKey( ~id, $Me, $Them, Just(encapPk) ) @ #x.1 )
            case PublicKeyRatchetNewReceiverNoNewKemSS
            solve( !KU( sign(<'msg_sig', ciphertext, $AD.2, 
                              hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.1, rootKey.1), '0'),
                                                    <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)),
                                        'msg_key'),
                                   'msg_key_ind'), 
                              theirEcdhPk, (%i.1%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>, 
                              Just(encapPk), None, None>,
                             ~idKey.1)
                   ) @ #vk.5 )
              case PublicKeyRatchetNewSenderNoNewKemSS_case_1
              solve( !KU( ~kemSS ) @ #t2 )
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                simplify
                solve( !KU( ~newKemSk ) @ #vk.35 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                simplify
                solve( !KU( ~newKemSk ) @ #vk.35 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                solve( !KU( ~newKemSk ) @ #vk.34 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                solve( !KU( ~newKemSk ) @ #vk.34 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                simplify
                solve( !KU( ~newKemSk ) @ #vk.36 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                simplify
                solve( !KU( ~newKemSk ) @ #vk.36 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                simplify
                solve( !KU( ~newKemSk ) @ #vk.34 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                simplify
                solve( !KU( ~newKemSk ) @ #vk.34 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                solve( !KU( ~newKemSk ) @ #vk.33 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                solve( !KU( ~newKemSk ) @ #vk.33 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                simplify
                solve( !KU( ~newKemSk ) @ #vk.35 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                simplify
                solve( !KU( ~newKemSk ) @ #vk.35 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              qed
            next
              case PublicKeyRatchetNewSenderNoNewKemSS_case_2
              solve( !KU( ~kemSS ) @ #t2 )
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                simplify
                solve( !KU( ~newKemSk ) @ #vk.32 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                simplify
                solve( !KU( ~newKemSk ) @ #vk.32 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                solve( !KU( ~newKemSk ) @ #vk.31 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                solve( !KU( ~newKemSk ) @ #vk.31 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                simplify
                solve( !KU( ~newKemSk ) @ #vk.33 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                simplify
                solve( !KU( ~newKemSk ) @ #vk.33 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                simplify
                solve( !KU( ~newKemSk ) @ #vk.31 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                simplify
                solve( !KU( ~newKemSk ) @ #vk.31 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                solve( !KU( ~newKemSk ) @ #vk.30 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                solve( !KU( ~newKemSk ) @ #vk.30 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                simplify
                solve( !KU( ~newKemSk ) @ #vk.32 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                simplify
                solve( !KU( ~newKemSk ) @ #vk.32 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              qed
            next
              case PublicKeyRatchetNewSenderNoNewKemSS_case_3
              solve( !KU( ~kemSS ) @ #t2 )
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                simplify
                solve( !KU( ~newKemSk ) @ #vk.32 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                simplify
                solve( !KU( ~newKemSk ) @ #vk.32 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                solve( !KU( ~newKemSk ) @ #vk.31 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                solve( !KU( ~newKemSk ) @ #vk.31 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                simplify
                solve( !KU( ~newKemSk ) @ #vk.33 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                simplify
                solve( !KU( ~newKemSk ) @ #vk.33 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                simplify
                solve( !KU( ~newKemSk ) @ #vk.31 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                simplify
                solve( !KU( ~newKemSk ) @ #vk.31 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                solve( !KU( ~newKemSk ) @ #vk.30 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                solve( !KU( ~newKemSk ) @ #vk.30 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                simplify
                solve( !KU( ~newKemSk ) @ #vk.32 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                simplify
                solve( !KU( ~newKemSk ) @ #vk.32 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              qed
            next
              case PublicKeyRatchetNewSenderNoNewKemSS_case_4
              solve( !KU( ~kemSS ) @ #t2 )
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                simplify
                solve( !KU( ~newKemSk ) @ #vk.34 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                simplify
                solve( !KU( ~newKemSk ) @ #vk.34 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                solve( !KU( ~newKemSk ) @ #vk.33 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                solve( !KU( ~newKemSk ) @ #vk.33 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                simplify
                solve( !KU( ~newKemSk ) @ #vk.35 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                simplify
                solve( !KU( ~newKemSk ) @ #vk.35 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                simplify
                solve( !KU( ~newKemSk ) @ #vk.33 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                simplify
                solve( !KU( ~newKemSk ) @ #vk.33 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                solve( !KU( ~newKemSk ) @ #vk.32 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                solve( !KU( ~newKemSk ) @ #vk.32 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                simplify
                solve( !KU( ~newKemSk ) @ #vk.34 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                simplify
                solve( !KU( ~newKemSk ) @ #vk.34 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~idKey.1 ) @ #vk.23 )
                case IdentityKeyLeak
                by contradiction /* from formulas */
              next
                case PQAttacker
                by contradiction /* cyclic */
              qed
            qed
          next
            case PublicKeyRatchetNewReceiverWithSomeNewKemSS
            solve( !KU( sign(<'msg_sig', ciphertext, $AD.2, 
                              hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.1, rootKey.1), z.2),
                                                    <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)),
                                        'msg_key'),
                                   'msg_key_ind'), 
                              theirEcdhPk, (%i.1%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>, 
                              Just(encapPk), Just(kemEncap), None>,
                             ~idKey.1)
                   ) @ #vk.5 )
              case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
              solve( !KU( ~kemSS ) @ #t2 )
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                simplify
                solve( !KU( ~newKemSk ) @ #vk.34 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                simplify
                solve( !KU( ~newKemSk ) @ #vk.34 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                simplify
                solve( !KU( ~newKemSk ) @ #vk.34 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                simplify
                solve( !KU( ~newKemSk ) @ #vk.34 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                solve( !KU( ~newKemSk ) @ #vk.34 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                solve( !KU( ~newKemSk ) @ #vk.34 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                simplify
                solve( !KU( ~newKemSk ) @ #vk.33 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                simplify
                solve( !KU( ~newKemSk ) @ #vk.33 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                simplify
                solve( !KU( ~newKemSk ) @ #vk.33 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                simplify
                solve( !KU( ~newKemSk ) @ #vk.33 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                solve( !KU( ~newKemSk ) @ #vk.33 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                solve( !KU( ~newKemSk ) @ #vk.33 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              qed
            next
              case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
              solve( !KU( ~kemSS ) @ #t2 )
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                simplify
                solve( !KU( ~newKemSk ) @ #vk.35 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                simplify
                solve( !KU( ~newKemSk ) @ #vk.35 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                simplify
                solve( !KU( ~newKemSk ) @ #vk.35 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                simplify
                solve( !KU( ~newKemSk ) @ #vk.35 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                solve( !KU( ~newKemSk ) @ #vk.35 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                solve( !KU( ~newKemSk ) @ #vk.35 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                simplify
                solve( !KU( ~newKemSk ) @ #vk.34 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                simplify
                solve( !KU( ~newKemSk ) @ #vk.34 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                simplify
                solve( !KU( ~newKemSk ) @ #vk.34 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                simplify
                solve( !KU( ~newKemSk ) @ #vk.34 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                solve( !KU( ~newKemSk ) @ #vk.34 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                solve( !KU( ~newKemSk ) @ #vk.34 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              qed
            next
              case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
              solve( !KU( ~kemSS ) @ #t2 )
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                simplify
                solve( !KU( ~newKemSk ) @ #vk.37 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                simplify
                solve( !KU( ~newKemSk ) @ #vk.37 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                simplify
                solve( !KU( ~newKemSk ) @ #vk.37 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                simplify
                solve( !KU( ~newKemSk ) @ #vk.37 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                solve( !KU( ~newKemSk ) @ #vk.36 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                solve( !KU( ~newKemSk ) @ #vk.36 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                simplify
                solve( !KU( ~newKemSk ) @ #vk.36 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                simplify
                solve( !KU( ~newKemSk ) @ #vk.36 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                simplify
                solve( !KU( ~newKemSk ) @ #vk.36 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                simplify
                solve( !KU( ~newKemSk ) @ #vk.36 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                solve( !KU( ~newKemSk ) @ #vk.35 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                solve( !KU( ~newKemSk ) @ #vk.35 )
                  case KemKeyLeak
                  by contradiction /* from formulas */
                qed
              qed
            next
              case c_sign
              solve( !KU( ~idKey.1 ) @ #vk.24 )
                case IdentityKeyLeak
                by contradiction /* from formulas */
              next
                case PQAttacker
                by contradiction /* cyclic */
              qed
            qed
          next
            case SessionStartAsASender
            solve( !KU( ~kemSS ) @ #t2 )
              case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
              solve( !KU( ~kemPreKey ) @ #vk.1 )
                case KemPreKeyLeak
                by contradiction
              qed
            next
              case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
              solve( !KU( ~kemPreKey ) @ #vk.1 )
                case KemPreKeyLeak
                by contradiction
              qed
            next
              case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
              solve( !KU( ~kemPreKey ) @ #vk.1 )
                case KemPreKeyLeak
                by contradiction
              qed
            next
              case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
              solve( !KU( ~kemPreKey ) @ #vk.1 )
                case KemPreKeyLeak
                by contradiction
              qed
            next
              case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
              solve( !KU( ~kemPreKey ) @ #vk.1 )
                case KemPreKeyLeak
                by contradiction
              qed
            next
              case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
              solve( !KU( ~kemPreKey ) @ #vk.1 )
                case KemPreKeyLeak
                by contradiction
              qed
            next
              case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
              solve( !KU( ~kemPreKey ) @ #vk )
                case KemPreKeyLeak
                by contradiction
              qed
            next
              case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
              solve( !KU( ~kemPreKey ) @ #vk )
                case KemPreKeyLeak
                by contradiction
              qed
            next
              case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
              solve( !KU( ~kemPreKey ) @ #vk )
                case KemPreKeyLeak
                by contradiction
              qed
            next
              case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
              solve( !KU( ~kemPreKey ) @ #vk )
                case KemPreKeyLeak
                by contradiction
              qed
            next
              case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
              solve( !KU( ~kemPreKey ) @ #vk )
                case KemPreKeyLeak
                by contradiction
              qed
            next
              case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
              solve( !KU( ~kemPreKey ) @ #vk )
                case KemPreKeyLeak
                by contradiction
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case ReceiveSymmetricRatchet
  solve( SessionInfo( id.1, i.1, me, them ) @ #t1 )
    case ReceiveSymmetricRatchet
    solve( SessionInfo( ~id, %1, $Me, $Them ) @ #x.2 )
      case ReceiverStart
      solve( IDSQuery( $Them, pk(x.2), sprePk, skemPrePk, preKeySig ) ▶₅ #x.1 )
        case QueryIDS
        solve( SessionStart( pk(x) ) @ #x.1 )
          case ReceiverStart
          solve( (∃ #x.
                   (NewKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x) ∧ #x < #t1)  ∥
                 (∃ #x. (DecapKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x) ∧ #x < #t1) )
            case case_1
            solve( NewKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x.2 )
              case PublicKeyRatchetNewSenderSomeNewKemSS
              solve( NewKemPublicKey( ~id, $Me, $Them, Just(encapPk) ) @ #x.3 )
                case PublicKeyRatchetNewReceiverNoNewKemSS
                solve( !KU( sign(<'msg_sig', ciphertext.2, $AD.3, 
                                  hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.7, rootKey.1), '0'),
                                                        <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>)),
                                            'msg_key'),
                                       'msg_key_ind'), 
                                  theirEcdhPk.2, (%i.2%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>, 
                                  Just(encapPk), None, None>,
                                 ~idKey.1)
                       ) @ #vk.37 )
                  case PublicKeyRatchetNewSenderNoNewKemSS_case_1
                  solve( !KU( sign(<'msg_sig', ciphertext.1, $AD.1, 
                                    hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.1, '0'), z.2),
                                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>)),
                                              'msg_key'),
                                         'msg_key_ind'), 
                                    theirEcdhPk, %1, <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>, None, 
                                    Just(kemEncap), 
                                    Just(h(<'g'^~ecdhSk.1, pqpk(~kemSk.1), 
                                            sign(<'nf_reg', pqpk(~kemSk.1), 'g'^~ecdhSk.1>, ~idKey.2)>))
                                   >,
                                   ~idKey.1)
                         ) @ #vk.28 )
                    case SessionStartAsASender
                    solve( !KU( ~kemSS ) @ #t2 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.63 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.63 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                      solve( !KU( ~newKemSk ) @ #vk.62 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                      solve( !KU( ~newKemSk ) @ #vk.62 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.64 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.64 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.62 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.62 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                      solve( !KU( ~newKemSk ) @ #vk.61 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                      solve( !KU( ~newKemSk ) @ #vk.61 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.63 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.63 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~idKey.1 ) @ #vk.67 )
                      case IdentityKeyLeak
                      by contradiction /* from formulas */
                    next
                      case PQAttacker
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderNoNewKemSS_case_2
                  solve( !KU( sign(<'msg_sig', ciphertext.1, $AD.1, 
                                    hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.1, '0'), z.2),
                                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>)),
                                              'msg_key'),
                                         'msg_key_ind'), 
                                    theirEcdhPk, %1, <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>, None, 
                                    Just(kemEncap), 
                                    Just(h(<'g'^~ecdhSk.1, pqpk(~kemSk.1), 
                                            sign(<'nf_reg', pqpk(~kemSk.1), 'g'^~ecdhSk.1>, ~idKey.2)>))
                                   >,
                                   ~idKey.1)
                         ) @ #vk.28 )
                    case SessionStartAsASender
                    solve( !KU( ~kemSS ) @ #t2 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.60 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.60 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                      solve( !KU( ~newKemSk ) @ #vk.59 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                      solve( !KU( ~newKemSk ) @ #vk.59 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.61 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.61 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.59 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.59 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                      solve( !KU( ~newKemSk ) @ #vk.58 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                      solve( !KU( ~newKemSk ) @ #vk.58 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.60 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.60 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~idKey.1 ) @ #vk.64 )
                      case IdentityKeyLeak
                      by contradiction /* from formulas */
                    next
                      case PQAttacker
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderNoNewKemSS_case_3
                  solve( !KU( sign(<'msg_sig', ciphertext.1, $AD.1, 
                                    hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.1, '0'), z.2),
                                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>)),
                                              'msg_key'),
                                         'msg_key_ind'), 
                                    theirEcdhPk, %1, <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>, None, 
                                    Just(kemEncap), 
                                    Just(h(<'g'^~ecdhSk.1, pqpk(~kemSk.1), 
                                            sign(<'nf_reg', pqpk(~kemSk.1), 'g'^~ecdhSk.1>, ~idKey.2)>))
                                   >,
                                   ~idKey.1)
                         ) @ #vk.28 )
                    case SessionStartAsASender
                    solve( !KU( ~kemSS ) @ #t2 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.60 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.60 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                      solve( !KU( ~newKemSk ) @ #vk.59 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                      solve( !KU( ~newKemSk ) @ #vk.59 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.61 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.61 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.59 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.59 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                      solve( !KU( ~newKemSk ) @ #vk.58 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                      solve( !KU( ~newKemSk ) @ #vk.58 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.60 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.60 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~idKey.1 ) @ #vk.64 )
                      case IdentityKeyLeak
                      by contradiction /* from formulas */
                    next
                      case PQAttacker
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderNoNewKemSS_case_4
                  solve( !KU( sign(<'msg_sig', ciphertext.1, $AD.1, 
                                    hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.1, '0'), z.2),
                                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>)),
                                              'msg_key'),
                                         'msg_key_ind'), 
                                    theirEcdhPk, %1, <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>, None, 
                                    Just(kemEncap), 
                                    Just(h(<'g'^~ecdhSk.1, pqpk(~kemSk.1), 
                                            sign(<'nf_reg', pqpk(~kemSk.1), 'g'^~ecdhSk.1>, ~idKey.2)>))
                                   >,
                                   ~idKey.1)
                         ) @ #vk.29 )
                    case SessionStartAsASender
                    solve( !KU( ~kemSS ) @ #t2 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.63 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.63 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                      solve( !KU( ~newKemSk ) @ #vk.62 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                      solve( !KU( ~newKemSk ) @ #vk.62 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.64 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.64 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.62 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.62 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                      solve( !KU( ~newKemSk ) @ #vk.61 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                      solve( !KU( ~newKemSk ) @ #vk.61 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.63 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.63 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~idKey.1 ) @ #vk.67 )
                      case IdentityKeyLeak
                      by contradiction /* from formulas */
                    next
                      case PQAttacker
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~idKey.1 ) @ #vk.52 )
                    case IdentityKeyLeak
                    by contradiction /* from formulas */
                  next
                    case PQAttacker
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case PublicKeyRatchetNewReceiverWithSomeNewKemSS
                solve( !KU( sign(<'msg_sig', ciphertext.2, $AD.3, 
                                  hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.7, rootKey.1), z.8),
                                                        <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>)),
                                            'msg_key'),
                                       'msg_key_ind'), 
                                  theirEcdhPk.2, (%i.2%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>, 
                                  Just(encapPk), Just(kemEncap.1), None>,
                                 ~idKey.1)
                       ) @ #vk.37 )
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.62 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.62 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.62 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.62 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    solve( !KU( ~newKemSk ) @ #vk.62 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    solve( !KU( ~newKemSk ) @ #vk.62 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.61 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.61 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.61 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.61 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    solve( !KU( ~newKemSk ) @ #vk.61 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    solve( !KU( ~newKemSk ) @ #vk.61 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.64 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.64 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.64 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.64 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    solve( !KU( ~newKemSk ) @ #vk.64 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    solve( !KU( ~newKemSk ) @ #vk.64 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.63 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.63 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.63 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.63 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    solve( !KU( ~newKemSk ) @ #vk.63 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    solve( !KU( ~newKemSk ) @ #vk.63 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.66 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.66 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.66 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.66 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    solve( !KU( ~newKemSk ) @ #vk.66 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    solve( !KU( ~newKemSk ) @ #vk.66 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.65 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.65 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.65 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.65 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    solve( !KU( ~newKemSk ) @ #vk.65 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    solve( !KU( ~newKemSk ) @ #vk.65 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~idKey.1 ) @ #vk.54 )
                    case IdentityKeyLeak
                    by contradiction /* from formulas */
                  next
                    case PQAttacker
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case case_2
            solve( (∃ #x.1.
                     (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.1)
                    ∧
                     #x.1 < #x)  ∥
                   (∃ #x.1. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.1) ∧ #x.1 < #x) )
              case case_1
              solve( DecapKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x.2 )
                case PublicKeyRatchetNewReceiverWithSomeNewKemSS
                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.2)) ) @ #x.3 )
                  case PublicKeyRatchetNewSenderNoNewKemSS
                  by contradiction
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS
                  by contradiction
                qed
              next
                case ReceiverStart
                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.2 )
                  case PublicKeyRatchetNewSenderNoNewKemSS
                  by contradiction
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS
                  by contradiction
                qed
              qed
            next
              case case_2
              solve( DecapKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x.3 )
                case PublicKeyRatchetNewReceiverWithSomeNewKemSS
                solve( (∃ #x.3.
                         (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                        ∧
                         #x.3 < #x.2)  ∥
                       (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                  case case_1
                  solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.4 )
                    case PublicKeyRatchetNewSenderNoNewKemSS
                    solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                           ) ▶₄ #x.3 )
                      case SomeFreshKemSk
                      solve( !KU( sign(<'msg_sig', ciphertext.2, $AD.2, 
                                        hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.4, rootKey), kemSS),
                                                              <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>)),
                                                  'msg_key'),
                                             'msg_key_ind'), 
                                        theirEcdhPk.1, (%i.1%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>, 
                                        maybeTheirNewKemPk, Just(kemEncap.1), None>,
                                       ~idKey.1)
                             ) @ #vk.40 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk.1 ) @ #vk.60 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk.1 ) @ #vk.59 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk.1 ) @ #vk.59 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk.1 ) @ #vk.58 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk.1 ) @ #vk.62 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk.1 ) @ #vk.61 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_4
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk.1 ) @ #vk.61 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk.1 ) @ #vk.60 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_5
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk.1 ) @ #vk.64 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk.1 ) @ #vk.63 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_6
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk.1 ) @ #vk.63 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk.1 ) @ #vk.62 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~idKey.1 ) @ #vk.54 )
                          case IdentityKeyLeak
                          by contradiction /* from formulas */
                        next
                          case PQAttacker
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS
                    solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                           ) ▶₅ #x.3 )
                      case SomeFreshKemSk
                      solve( !KU( sign(<'msg_sig', ciphertext.2, $AD.2, 
                                        hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.4, rootKey), kemSS),
                                                              <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>)),
                                                  'msg_key'),
                                             'msg_key_ind'), 
                                        theirEcdhPk.1, (%i.1%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>, 
                                        maybeTheirNewKemPk, Just(kemEncap.1), None>,
                                       ~idKey.1)
                             ) @ #vk.40 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk.1 ) @ #vk.60 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk.1 ) @ #vk.59 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk.1 ) @ #vk.59 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk.1 ) @ #vk.58 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk.1 ) @ #vk.62 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk.1 ) @ #vk.61 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_4
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk.1 ) @ #vk.61 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk.1 ) @ #vk.60 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_5
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk.1 ) @ #vk.64 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk.1 ) @ #vk.63 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_6
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk.1 ) @ #vk.63 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk.1 ) @ #vk.62 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~idKey.1 ) @ #vk.54 )
                          case IdentityKeyLeak
                          by contradiction /* from formulas */
                        next
                          case PQAttacker
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !KU( sign(<'msg_sig', ciphertext.2, $AD.2, 
                                    hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.4, rootKey), kemSS),
                                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>)),
                                              'msg_key'),
                                         'msg_key_ind'), 
                                    theirEcdhPk.1, (%i.1%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>, 
                                    maybeTheirNewKemPk, Just(kemEncap.1), None>,
                                   ~idKey.1)
                         ) @ #vk.38 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSS ) @ #t2 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                      solve( !KU( ~kemSk.1 ) @ #vk.60 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                      solve( !KU( ~kemSk.1 ) @ #vk.59 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSS ) @ #t2 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                      solve( !KU( ~kemSk.1 ) @ #vk.59 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                      solve( !KU( ~kemSk.1 ) @ #vk.58 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
                    solve( !KU( ~kemSS ) @ #t2 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                      solve( !KU( ~kemSk.1 ) @ #vk.62 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                      solve( !KU( ~kemSk.1 ) @ #vk.61 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_4
                    solve( !KU( ~kemSS ) @ #t2 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                      solve( !KU( ~kemSk.1 ) @ #vk.61 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                      solve( !KU( ~kemSk.1 ) @ #vk.60 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_5
                    solve( !KU( ~kemSS ) @ #t2 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                      solve( !KU( ~kemSk.1 ) @ #vk.64 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                      solve( !KU( ~kemSk.1 ) @ #vk.63 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_6
                    solve( !KU( ~kemSS ) @ #t2 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                      solve( !KU( ~kemSk.1 ) @ #vk.63 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                      solve( !KU( ~kemSk.1 ) @ #vk.62 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~idKey.1 ) @ #vk.54 )
                      case IdentityKeyLeak
                      by contradiction /* from formulas */
                    next
                      case PQAttacker
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              next
                case ReceiverStart
                solve( !KU( sign(<'msg_sig', ciphertext.1, $AD.1, 
                                  hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.1, '0'), kemSS),
                                                        <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>)),
                                            'msg_key'),
                                       'msg_key_ind'), 
                                  theirEcdhPk, %1, <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>, None, 
                                  Just(kemEncap), 
                                  Just(h(<'g'^~ecdhSk.1, pqpk(~kemSk.1), 
                                          sign(<'nf_reg', pqpk(~kemSk.1), 'g'^~ecdhSk.1>, ~idKey.2)>))
                                 >,
                                 ~idKey.1)
                       ) @ #vk.24 )
                  case SessionStartAsASender
                  solve( !KU( ~kemSS ) @ #t2 )
                    case SessionStartAsASender_case_1
                    solve( !KU( ~kemSk.1 ) @ #vk.32 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case SessionStartAsASender_case_2
                    solve( !KU( ~kemSk.1 ) @ #vk.31 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~idKey.1 ) @ #vk.38 )
                    case IdentityKeyLeak
                    by contradiction /* from formulas */
                  next
                    case PQAttacker
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case SessionStartAsASender
      solve( IDSQuery( $Them, theirIdPk, theirEcdhPk, theirKemPk, preKeySig
             ) ▶₃ #x.1 )
        case QueryIDS
        solve( SessionStart( pk(x) ) @ #x.1 )
          case SessionStartAsASender
          solve( (∃ #x.
                   (NewKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x) ∧ #x < #t1)  ∥
                 (∃ #x. (DecapKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x) ∧ #x < #t1) )
            case case_1
            solve( NewKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x.2 )
              case PublicKeyRatchetNewSenderSomeNewKemSS
              solve( NewKemPublicKey( ~id, $Me, $Them, Just(encapPk) ) @ #x.3 )
                case PublicKeyRatchetNewReceiverNoNewKemSS
                solve( !KU( sign(<'msg_sig', ciphertext.1, $AD.3, 
                                  hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.4, rootKey.1), '0'),
                                                        <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>)),
                                            'msg_key'),
                                       'msg_key_ind'), 
                                  theirEcdhPk.1, (%i.2%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>, 
                                  Just(encapPk), None, None>,
                                 ~idKey.1)
                       ) @ #vk.21 )
                  case PublicKeyRatchetNewSenderNoNewKemSS_case_1
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    solve( !KU( ~newKemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    solve( !KU( ~newKemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    solve( !KU( ~newKemSk ) @ #vk.46 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    solve( !KU( ~newKemSk ) @ #vk.46 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderNoNewKemSS_case_2
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.44 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.44 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    solve( !KU( ~newKemSk ) @ #vk.43 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    solve( !KU( ~newKemSk ) @ #vk.43 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.45 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.45 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.43 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.43 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    solve( !KU( ~newKemSk ) @ #vk.42 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    solve( !KU( ~newKemSk ) @ #vk.42 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.44 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.44 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderNoNewKemSS_case_3
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.44 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.44 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    solve( !KU( ~newKemSk ) @ #vk.43 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    solve( !KU( ~newKemSk ) @ #vk.43 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.45 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.45 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.43 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.43 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    solve( !KU( ~newKemSk ) @ #vk.42 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    solve( !KU( ~newKemSk ) @ #vk.42 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.44 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.44 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderNoNewKemSS_case_4
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    solve( !KU( ~newKemSk ) @ #vk.46 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    solve( !KU( ~newKemSk ) @ #vk.46 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.46 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.46 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    solve( !KU( ~newKemSk ) @ #vk.45 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    solve( !KU( ~newKemSk ) @ #vk.45 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~idKey.1 ) @ #vk.36 )
                    case IdentityKeyLeak
                    by contradiction /* from formulas */
                  next
                    case PQAttacker
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case PublicKeyRatchetNewReceiverWithSomeNewKemSS
                solve( !KU( sign(<'msg_sig', ciphertext.1, $AD.3, 
                                  hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.4, rootKey.1), z.5),
                                                        <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>)),
                                            'msg_key'),
                                       'msg_key_ind'), 
                                  theirEcdhPk.1, (%i.2%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>, 
                                  Just(encapPk), Just(kemEncap), None>,
                                 ~idKey.1)
                       ) @ #vk.21 )
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.46 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.46 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.46 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.46 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    solve( !KU( ~newKemSk ) @ #vk.46 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    solve( !KU( ~newKemSk ) @ #vk.46 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.45 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.45 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.45 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.45 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    solve( !KU( ~newKemSk ) @ #vk.45 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    solve( !KU( ~newKemSk ) @ #vk.45 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    solve( !KU( ~newKemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    solve( !KU( ~newKemSk ) @ #vk.48 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    solve( !KU( ~newKemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    solve( !KU( ~newKemSk ) @ #vk.47 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    solve( !KU( ~newKemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    solve( !KU( ~newKemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~idKey.1 ) @ #vk.38 )
                    case IdentityKeyLeak
                    by contradiction /* from formulas */
                  next
                    case PQAttacker
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case SessionStartAsASender
                solve( !KU( ~kemSS ) @ #t2 )
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                  solve( !KU( ~kemPreKey ) @ #vk.17 )
                    case KemPreKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                  solve( !KU( ~kemPreKey ) @ #vk.17 )
                    case KemPreKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                  solve( !KU( ~kemPreKey ) @ #vk.17 )
                    case KemPreKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                  solve( !KU( ~kemPreKey ) @ #vk.17 )
                    case KemPreKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                  solve( !KU( ~kemPreKey ) @ #vk.17 )
                    case KemPreKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                  solve( !KU( ~kemPreKey ) @ #vk.17 )
                    case KemPreKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                  solve( !KU( ~kemPreKey ) @ #vk.16 )
                    case KemPreKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                  solve( !KU( ~kemPreKey ) @ #vk.16 )
                    case KemPreKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                  solve( !KU( ~kemPreKey ) @ #vk.16 )
                    case KemPreKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                  solve( !KU( ~kemPreKey ) @ #vk.16 )
                    case KemPreKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                  solve( !KU( ~kemPreKey ) @ #vk.16 )
                    case KemPreKeyLeak
                    by contradiction /* from formulas */
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                  solve( !KU( ~kemPreKey ) @ #vk.16 )
                    case KemPreKeyLeak
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case SessionStartAsASender
              solve( !KU( ~kemSS ) @ #t2 )
                case SessionStartAsASender_case_1
                solve( !KU( ~kemPreKey ) @ #vk.16 )
                  case KemPreKeyLeak
                  by contradiction /* from formulas */
                qed
              next
                case SessionStartAsASender_case_2
                solve( !KU( ~kemPreKey ) @ #vk.15 )
                  case KemPreKeyLeak
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case case_2
            solve( DecapKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x.2 )
              case PublicKeyRatchetNewReceiverWithSomeNewKemSS
              solve( (∃ #x.2.
                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.2)
                      ∧
                       #x.2 < #x.1)  ∥
                     (∃ #x.2. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.2) ∧ #x.2 < #x.1) )
                case case_1
                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3 )
                  case PublicKeyRatchetNewSenderNoNewKemSS
                  solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                         ) ▶₄ #x.2 )
                    case SomeFreshKemSk
                    solve( !KU( sign(<'msg_sig', ciphertext.1, $AD.2, 
                                      hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.1, rootKey), kemSS),
                                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)),
                                                'msg_key'),
                                           'msg_key_ind'), 
                                      theirEcdhPk, (%i.1%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>, 
                                      maybeTheirNewKemPk, Just(kemEncap), None>,
                                     ~idKey.1)
                           ) @ #vk.24 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.44 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.43 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.43 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.42 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.46 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.45 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_4
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.45 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.44 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_5
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.48 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.47 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_6
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.47 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.46 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_sign
                      solve( !KU( ~idKey.1 ) @ #vk.38 )
                        case IdentityKeyLeak
                        by contradiction /* from formulas */
                      next
                        case PQAttacker
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS
                  solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                         ) ▶₅ #x.2 )
                    case SomeFreshKemSk
                    solve( !KU( sign(<'msg_sig', ciphertext.1, $AD.2, 
                                      hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.1, rootKey), kemSS),
                                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)),
                                                'msg_key'),
                                           'msg_key_ind'), 
                                      theirEcdhPk, (%i.1%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>, 
                                      maybeTheirNewKemPk, Just(kemEncap), None>,
                                     ~idKey.1)
                           ) @ #vk.24 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.44 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.43 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.43 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.42 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.46 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.45 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_4
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.45 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.44 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_5
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.48 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.47 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_6
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.47 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.46 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_sign
                      solve( !KU( ~idKey.1 ) @ #vk.38 )
                        case IdentityKeyLeak
                        by contradiction /* from formulas */
                      next
                        case PQAttacker
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( !KU( sign(<'msg_sig', ciphertext.1, $AD.2, 
                                  hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.1, rootKey), kemSS),
                                                        <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)),
                                            'msg_key'),
                                       'msg_key_ind'), 
                                  theirEcdhPk, (%i.1%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>, 
                                  maybeTheirNewKemPk, Just(kemEncap), None>,
                                 ~idKey.1)
                       ) @ #vk.22 )
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk.1 ) @ #vk.44 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk.1 ) @ #vk.43 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk.1 ) @ #vk.43 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk.1 ) @ #vk.42 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk.1 ) @ #vk.46 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk.1 ) @ #vk.45 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_4
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk.1 ) @ #vk.45 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk.1 ) @ #vk.44 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_5
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk.1 ) @ #vk.48 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk.1 ) @ #vk.47 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_6
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk.1 ) @ #vk.47 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk.1 ) @ #vk.46 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~idKey.1 ) @ #vk.38 )
                    case IdentityKeyLeak
                    by contradiction /* from formulas */
                  next
                    case PQAttacker
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case ReceiverStart
  solve( SessionInfo( id.1, i, me, them ) @ #t1 )
    case ReceiverStart
    solve( IDSQuery( $Them, pk(x), sprePk, skemPrePk, preKeySig ) ▶₅ #t1 )
      case QueryIDS
      solve( (∃ #x.
               (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk)) ) @ #x) ∧ #x < #t1)  ∥
             (∃ #x. (KemPreKeyGen( $Me, pqpk(~kemSk) ) @ #x) ∧ #x < #t1) )
        case case_1
        solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk)) ) @ #x )
          case PublicKeyRatchetNewSenderNoNewKemSS
          by contradiction
        next
          case PublicKeyRatchetNewSenderSomeNewKemSS
          by contradiction
        qed
      next
        case case_2
        solve( !IdentityKey( $Me, ~idKey.1 ) ▶₂ #t1 )
          case UserKeyGen
          solve( !ECDHPreKey( $Me, ~ecdhSk ) ▶₃ #t1 )
            case UserKeyGen
            solve( !KemPreKey( $Me, ~kemSk ) ▶₄ #t1 )
              case UserKeyGen
              solve( SessionStart( pk(~idKey) ) @ #t1 )
                case ReceiverStart
                solve( !KU( sign(<'msg_sig', ciphertext, $AD, 
                                  hkdf(hkdf(suffix(hkdf(hkdf(hkdf(ecdhSS, '0'), kemSS),
                                                        <$Them, pk(~idKey), $Me, pk(~idKey.1)>)),
                                            'msg_key'),
                                       'msg_key_ind'), 
                                  theirPk, %1, <$Them, pk(~idKey), $Me, pk(~idKey.1)>, None, 
                                  Just(kemEncap), 
                                  Just(h(<'g'^~ecdhSk, pqpk(~kemSk), 
                                          sign(<'nf_reg', pqpk(~kemSk), 'g'^~ecdhSk>, ~idKey.1)>))
                                 >,
                                 ~idKey)
                       ) @ #vk.5 )
                  case SessionStartAsASender
                  solve( !KU( ~kemSS ) @ #t2 )
                    case SessionStartAsASender_case_1
                    solve( !KU( ~kemSk ) @ #vk.18 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case SessionStartAsASender_case_2
                    solve( !KU( ~kemSk ) @ #vk.17 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~idKey ) @ #vk.24 )
                    case IdentityKeyLeak
                    by contradiction /* from formulas */
                  next
                    case PQAttacker
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case SendSymmetricRatchet
  solve( SessionInfo( id.1, i.1, me, them ) @ #t1 )
    case SendSymmetricRatchet
    solve( SessionInfo( ~id, %1, $Me, $Them ) @ #x.1 )
      case ReceiverStart
      solve( IDSQuery( $Them, pk(x.1), sprePk, skemPrePk, preKeySig ) ▶₅ #x )
        case QueryIDS
        solve( SessionStart( theirIdPk ) @ #x )
          case ReceiverStart
          solve( (∃ #x.
                   (NewKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x) ∧ #x < #t1)  ∥
                 (∃ #x. (DecapKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x) ∧ #x < #t1) )
            case case_1
            solve( NewKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x.2 )
              case PublicKeyRatchetNewSenderSomeNewKemSS
              solve( NewKemPublicKey( ~id, $Me, $Them, Just(encapPk) ) @ #x.3 )
                case PublicKeyRatchetNewReceiverNoNewKemSS
                solve( !KU( sign(<'msg_sig', ciphertext.1, $AD.3, 
                                  hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.6, rootKey.1), '0'),
                                                        <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>)),
                                            'msg_key'),
                                       'msg_key_ind'), 
                                  theirEcdhPk.2, (%i.2%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>, 
                                  Just(encapPk), None, None>,
                                 ~idKey.1)
                       ) @ #vk.23 )
                  case PublicKeyRatchetNewSenderNoNewKemSS_case_1
                  solve( !KU( sign(<'msg_sig', ciphertext, $AD.1, 
                                    hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z, '0'), z.1),
                                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>)),
                                              'msg_key'),
                                         'msg_key_ind'), 
                                    theirEcdhPk, %1, <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>, None, 
                                    Just(kemEncap), 
                                    Just(h(<'g'^~ecdhSk.1, pqpk(~kemSk.1), 
                                            sign(<'nf_reg', pqpk(~kemSk.1), 'g'^~ecdhSk.1>, ~idKey.2)>))
                                   >,
                                   ~idKey.1)
                         ) @ #vk.6 )
                    case SessionStartAsASender
                    solve( !KU( ~kemSS ) @ #t2 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.50 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.50 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                      solve( !KU( ~newKemSk ) @ #vk.49 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                      solve( !KU( ~newKemSk ) @ #vk.49 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.51 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.51 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.49 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.49 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                      solve( !KU( ~newKemSk ) @ #vk.48 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                      solve( !KU( ~newKemSk ) @ #vk.48 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.50 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.50 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~idKey.1 ) @ #vk.54 )
                      case IdentityKeyLeak
                      by contradiction /* from formulas */
                    next
                      case PQAttacker
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderNoNewKemSS_case_2
                  solve( !KU( sign(<'msg_sig', ciphertext, $AD.1, 
                                    hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z, '0'), z.1),
                                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>)),
                                              'msg_key'),
                                         'msg_key_ind'), 
                                    theirEcdhPk, %1, <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>, None, 
                                    Just(kemEncap), 
                                    Just(h(<'g'^~ecdhSk.1, pqpk(~kemSk.1), 
                                            sign(<'nf_reg', pqpk(~kemSk.1), 'g'^~ecdhSk.1>, ~idKey.2)>))
                                   >,
                                   ~idKey.1)
                         ) @ #vk.6 )
                    case SessionStartAsASender
                    solve( !KU( ~kemSS ) @ #t2 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.48 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.48 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                      solve( !KU( ~newKemSk ) @ #vk.47 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                      solve( !KU( ~newKemSk ) @ #vk.47 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.49 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.49 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.47 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.47 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                      solve( !KU( ~newKemSk ) @ #vk.46 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                      solve( !KU( ~newKemSk ) @ #vk.46 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.48 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.48 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~idKey.1 ) @ #vk.52 )
                      case IdentityKeyLeak
                      by contradiction /* from formulas */
                    next
                      case PQAttacker
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderNoNewKemSS_case_3
                  solve( !KU( sign(<'msg_sig', ciphertext, $AD.1, 
                                    hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z, '0'), z.1),
                                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>)),
                                              'msg_key'),
                                         'msg_key_ind'), 
                                    theirEcdhPk, %1, <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>, None, 
                                    Just(kemEncap), 
                                    Just(h(<'g'^~ecdhSk.1, pqpk(~kemSk.1), 
                                            sign(<'nf_reg', pqpk(~kemSk.1), 'g'^~ecdhSk.1>, ~idKey.2)>))
                                   >,
                                   ~idKey.1)
                         ) @ #vk.6 )
                    case SessionStartAsASender
                    solve( !KU( ~kemSS ) @ #t2 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.48 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.48 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                      solve( !KU( ~newKemSk ) @ #vk.47 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                      solve( !KU( ~newKemSk ) @ #vk.47 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.49 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.49 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.47 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.47 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                      solve( !KU( ~newKemSk ) @ #vk.46 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                      solve( !KU( ~newKemSk ) @ #vk.46 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.48 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.48 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~idKey.1 ) @ #vk.52 )
                      case IdentityKeyLeak
                      by contradiction /* from formulas */
                    next
                      case PQAttacker
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderNoNewKemSS_case_4
                  solve( !KU( sign(<'msg_sig', ciphertext, $AD.1, 
                                    hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z, '0'), z.1),
                                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>)),
                                              'msg_key'),
                                         'msg_key_ind'), 
                                    theirEcdhPk, %1, <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>, None, 
                                    Just(kemEncap), 
                                    Just(h(<'g'^~ecdhSk.1, pqpk(~kemSk.1), 
                                            sign(<'nf_reg', pqpk(~kemSk.1), 'g'^~ecdhSk.1>, ~idKey.2)>))
                                   >,
                                   ~idKey.1)
                         ) @ #vk.6 )
                    case SessionStartAsASender
                    solve( !KU( ~kemSS ) @ #t2 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.50 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.50 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                      solve( !KU( ~newKemSk ) @ #vk.49 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                      solve( !KU( ~newKemSk ) @ #vk.49 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.51 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.51 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.49 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.49 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                      solve( !KU( ~newKemSk ) @ #vk.48 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                      solve( !KU( ~newKemSk ) @ #vk.48 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.50 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                      simplify
                      solve( !KU( ~newKemSk ) @ #vk.50 )
                        case KemKeyLeak
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~idKey.1 ) @ #vk.54 )
                      case IdentityKeyLeak
                      by contradiction /* from formulas */
                    next
                      case PQAttacker
                      by contradiction /* cyclic */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~idKey.1 ) @ #vk.39 )
                    case IdentityKeyLeak
                    by contradiction /* from formulas */
                  next
                    case PQAttacker
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case PublicKeyRatchetNewReceiverWithSomeNewKemSS
                solve( !KU( sign(<'msg_sig', ciphertext.1, $AD.3, 
                                  hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.6, rootKey.1), z.7),
                                                        <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>)),
                                            'msg_key'),
                                       'msg_key_ind'), 
                                  theirEcdhPk.2, (%i.2%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>, 
                                  Just(encapPk), Just(kemEncap.1), None>,
                                 ~idKey.1)
                       ) @ #vk.23 )
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    solve( !KU( ~newKemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    solve( !KU( ~newKemSk ) @ #vk.49 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.51 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.51 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.51 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.51 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    solve( !KU( ~newKemSk ) @ #vk.51 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    solve( !KU( ~newKemSk ) @ #vk.51 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    solve( !KU( ~newKemSk ) @ #vk.50 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.53 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.53 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.53 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.53 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    solve( !KU( ~newKemSk ) @ #vk.52 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    solve( !KU( ~newKemSk ) @ #vk.52 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.52 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.52 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.52 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.52 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    solve( !KU( ~newKemSk ) @ #vk.51 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    solve( !KU( ~newKemSk ) @ #vk.51 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~idKey.1 ) @ #vk.40 )
                    case IdentityKeyLeak
                    by contradiction /* from formulas */
                  next
                    case PQAttacker
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          next
            case case_2
            solve( (∃ #x.1.
                     (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.1)
                    ∧
                     #x.1 < #x)  ∥
                   (∃ #x.1. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.1) ∧ #x.1 < #x) )
              case case_1
              solve( DecapKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x.2 )
                case PublicKeyRatchetNewReceiverWithSomeNewKemSS
                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.2)) ) @ #x.3 )
                  case PublicKeyRatchetNewSenderNoNewKemSS
                  by contradiction
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS
                  by contradiction
                qed
              next
                case ReceiverStart
                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.2 )
                  case PublicKeyRatchetNewSenderNoNewKemSS
                  by contradiction
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS
                  by contradiction
                qed
              qed
            next
              case case_2
              solve( DecapKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x.3 )
                case PublicKeyRatchetNewReceiverWithSomeNewKemSS
                solve( (∃ #x.3.
                         (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3)
                        ∧
                         #x.3 < #x.2)  ∥
                       (∃ #x.3. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.3) ∧ #x.3 < #x.2) )
                  case case_1
                  solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.4 )
                    case PublicKeyRatchetNewSenderNoNewKemSS
                    solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                           ) ▶₄ #x.3 )
                      case SomeFreshKemSk
                      solve( !KU( sign(<'msg_sig', ciphertext.1, $AD.2, 
                                        hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.3, rootKey), kemSS),
                                                              <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>)),
                                                  'msg_key'),
                                             'msg_key_ind'), 
                                        theirEcdhPk.1, (%i.1%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>, 
                                        maybeTheirNewKemPk, Just(kemEncap.1), None>,
                                       ~idKey.1)
                             ) @ #vk.26 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk.1 ) @ #vk.48 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk.1 ) @ #vk.47 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk.1 ) @ #vk.47 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk.1 ) @ #vk.46 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk.1 ) @ #vk.49 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk.1 ) @ #vk.48 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_4
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk.1 ) @ #vk.48 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk.1 ) @ #vk.47 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_5
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk.1 ) @ #vk.50 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk.1 ) @ #vk.49 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_6
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk.1 ) @ #vk.49 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk.1 ) @ #vk.48 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~idKey.1 ) @ #vk.40 )
                          case IdentityKeyLeak
                          by contradiction /* from formulas */
                        next
                          case PQAttacker
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS
                    solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                           ) ▶₅ #x.3 )
                      case SomeFreshKemSk
                      solve( !KU( sign(<'msg_sig', ciphertext.1, $AD.2, 
                                        hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.3, rootKey), kemSS),
                                                              <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>)),
                                                  'msg_key'),
                                             'msg_key_ind'), 
                                        theirEcdhPk.1, (%i.1%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>, 
                                        maybeTheirNewKemPk, Just(kemEncap.1), None>,
                                       ~idKey.1)
                             ) @ #vk.26 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk.1 ) @ #vk.48 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk.1 ) @ #vk.47 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk.1 ) @ #vk.47 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk.1 ) @ #vk.46 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk.1 ) @ #vk.49 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk.1 ) @ #vk.48 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_4
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk.1 ) @ #vk.48 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk.1 ) @ #vk.47 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_5
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk.1 ) @ #vk.50 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk.1 ) @ #vk.49 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_6
                        solve( !KU( ~kemSS ) @ #t2 )
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                          solve( !KU( ~kemSk.1 ) @ #vk.49 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        next
                          case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                          solve( !KU( ~kemSk.1 ) @ #vk.48 )
                            case KemKeyLeak
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case c_sign
                        solve( !KU( ~idKey.1 ) @ #vk.40 )
                          case IdentityKeyLeak
                          by contradiction /* from formulas */
                        next
                          case PQAttacker
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( !KU( sign(<'msg_sig', ciphertext.1, $AD.2, 
                                    hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.3, rootKey), kemSS),
                                                          <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>)),
                                              'msg_key'),
                                         'msg_key_ind'), 
                                    theirEcdhPk.1, (%i.1%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>, 
                                    maybeTheirNewKemPk, Just(kemEncap.1), None>,
                                   ~idKey.1)
                         ) @ #vk.24 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSS ) @ #t2 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                      solve( !KU( ~kemSk.1 ) @ #vk.48 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                      solve( !KU( ~kemSk.1 ) @ #vk.47 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSS ) @ #t2 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                      solve( !KU( ~kemSk.1 ) @ #vk.47 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                      solve( !KU( ~kemSk.1 ) @ #vk.46 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
                    solve( !KU( ~kemSS ) @ #t2 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                      solve( !KU( ~kemSk.1 ) @ #vk.49 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                      solve( !KU( ~kemSk.1 ) @ #vk.48 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_4
                    solve( !KU( ~kemSS ) @ #t2 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                      solve( !KU( ~kemSk.1 ) @ #vk.48 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                      solve( !KU( ~kemSk.1 ) @ #vk.47 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_5
                    solve( !KU( ~kemSS ) @ #t2 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                      solve( !KU( ~kemSk.1 ) @ #vk.50 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                      solve( !KU( ~kemSk.1 ) @ #vk.49 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_6
                    solve( !KU( ~kemSS ) @ #t2 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                      solve( !KU( ~kemSk.1 ) @ #vk.49 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                      solve( !KU( ~kemSk.1 ) @ #vk.48 )
                        case KemPreKeyLeak
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case c_sign
                    solve( !KU( ~idKey.1 ) @ #vk.40 )
                      case IdentityKeyLeak
                      by contradiction /* from formulas */
                    next
                      case PQAttacker
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              next
                case ReceiverStart
                solve( !KU( sign(<'msg_sig', ciphertext, $AD.1, 
                                  hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z, '0'), kemSS),
                                                        <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>)),
                                            'msg_key'),
                                       'msg_key_ind'), 
                                  theirEcdhPk, %1, <$Them, pk(~idKey.1), $Me, pk(~idKey.2)>, None, 
                                  Just(kemEncap), 
                                  Just(h(<'g'^~ecdhSk.1, pqpk(~kemSk.1), 
                                          sign(<'nf_reg', pqpk(~kemSk.1), 'g'^~ecdhSk.1>, ~idKey.2)>))
                                 >,
                                 ~idKey.1)
                       ) @ #vk.5 )
                  case SessionStartAsASender
                  solve( !KU( ~kemSS ) @ #t2 )
                    case SessionStartAsASender_case_1
                    solve( !KU( ~kemSk.1 ) @ #vk.18 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case SessionStartAsASender_case_2
                    solve( !KU( ~kemSk.1 ) @ #vk.17 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~idKey.1 ) @ #vk.24 )
                    case IdentityKeyLeak
                    by contradiction /* from formulas */
                  next
                    case PQAttacker
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case SessionStartAsASender
      solve( IDSQuery( $Them, theirIdPk.1, theirEcdhPk, theirKemPk, preKeySig
             ) ▶₃ #x )
        case QueryIDS
        solve( SessionStart( theirIdPk ) @ #x )
          case SessionStartAsASender
          solve( (∃ #x.
                   (NewKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x) ∧ #x < #t1)  ∥
                 (∃ #x. (DecapKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x) ∧ #x < #t1) )
            case case_1
            solve( NewKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x.2 )
              case PublicKeyRatchetNewSenderSomeNewKemSS
              solve( NewKemPublicKey( ~id, $Me, $Them, Just(encapPk) ) @ #x.3 )
                case PublicKeyRatchetNewReceiverNoNewKemSS
                solve( !KU( sign(<'msg_sig', ciphertext, $AD.3, 
                                  hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.3, rootKey.1), '0'),
                                                        <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>)),
                                            'msg_key'),
                                       'msg_key_ind'), 
                                  theirEcdhPk.1, (%i.2%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>, 
                                  Just(encapPk), None, None>,
                                 ~idKey.1)
                       ) @ #vk.5 )
                  case PublicKeyRatchetNewSenderNoNewKemSS_case_1
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.35 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.35 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.36 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.36 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    solve( !KU( ~newKemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    solve( !KU( ~newKemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.35 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.35 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderNoNewKemSS_case_2
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.32 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.32 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    solve( !KU( ~newKemSk ) @ #vk.31 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    solve( !KU( ~newKemSk ) @ #vk.31 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.31 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.31 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    solve( !KU( ~newKemSk ) @ #vk.30 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    solve( !KU( ~newKemSk ) @ #vk.30 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.32 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.32 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderNoNewKemSS_case_3
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.32 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.32 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    solve( !KU( ~newKemSk ) @ #vk.31 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    solve( !KU( ~newKemSk ) @ #vk.31 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.31 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.31 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    solve( !KU( ~newKemSk ) @ #vk.30 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    solve( !KU( ~newKemSk ) @ #vk.30 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.32 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.32 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderNoNewKemSS_case_4
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    solve( !KU( ~newKemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    solve( !KU( ~newKemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.35 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.35 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    solve( !KU( ~newKemSk ) @ #vk.32 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    solve( !KU( ~newKemSk ) @ #vk.32 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~idKey.1 ) @ #vk.23 )
                    case IdentityKeyLeak
                    by contradiction /* from formulas */
                  next
                    case PQAttacker
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case PublicKeyRatchetNewReceiverWithSomeNewKemSS
                solve( !KU( sign(<'msg_sig', ciphertext, $AD.3, 
                                  hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z.3, rootKey.1), z.4),
                                                        <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>)),
                                            'msg_key'),
                                       'msg_key_ind'), 
                                  theirEcdhPk.1, (%i.2%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.4)>, 
                                  Just(encapPk), Just(kemEncap), None>,
                                 ~idKey.1)
                       ) @ #vk.5 )
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    solve( !KU( ~newKemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    solve( !KU( ~newKemSk ) @ #vk.33 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.35 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.35 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.35 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.35 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    solve( !KU( ~newKemSk ) @ #vk.35 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    solve( !KU( ~newKemSk ) @ #vk.35 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    solve( !KU( ~newKemSk ) @ #vk.34 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.37 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.37 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.37 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.37 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                    solve( !KU( ~newKemSk ) @ #vk.36 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                    solve( !KU( ~newKemSk ) @ #vk.36 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.36 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.36 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.36 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                    simplify
                    solve( !KU( ~newKemSk ) @ #vk.36 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                    solve( !KU( ~newKemSk ) @ #vk.35 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                    solve( !KU( ~newKemSk ) @ #vk.35 )
                      case KemKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~idKey.1 ) @ #vk.24 )
                    case IdentityKeyLeak
                    by contradiction /* from formulas */
                  next
                    case PQAttacker
                    by contradiction /* cyclic */
                  qed
                qed
              next
                case SessionStartAsASender
                solve( !KU( ~kemSS ) @ #t2 )
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_01
                  solve( !KU( ~kemPreKey ) @ #vk.1 )
                    case KemPreKeyLeak
                    by contradiction
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_02
                  solve( !KU( ~kemPreKey ) @ #vk.1 )
                    case KemPreKeyLeak
                    by contradiction
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_03
                  solve( !KU( ~kemPreKey ) @ #vk.1 )
                    case KemPreKeyLeak
                    by contradiction
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_04
                  solve( !KU( ~kemPreKey ) @ #vk.1 )
                    case KemPreKeyLeak
                    by contradiction
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_05
                  solve( !KU( ~kemPreKey ) @ #vk.1 )
                    case KemPreKeyLeak
                    by contradiction
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_06
                  solve( !KU( ~kemPreKey ) @ #vk.1 )
                    case KemPreKeyLeak
                    by contradiction
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_07
                  solve( !KU( ~kemPreKey ) @ #vk )
                    case KemPreKeyLeak
                    by contradiction
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_08
                  solve( !KU( ~kemPreKey ) @ #vk )
                    case KemPreKeyLeak
                    by contradiction
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_09
                  solve( !KU( ~kemPreKey ) @ #vk )
                    case KemPreKeyLeak
                    by contradiction
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_10
                  solve( !KU( ~kemPreKey ) @ #vk )
                    case KemPreKeyLeak
                    by contradiction
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_11
                  solve( !KU( ~kemPreKey ) @ #vk )
                    case KemPreKeyLeak
                    by contradiction
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_12
                  solve( !KU( ~kemPreKey ) @ #vk )
                    case KemPreKeyLeak
                    by contradiction
                  qed
                qed
              qed
            next
              case SessionStartAsASender
              solve( !KU( ~kemSS ) @ #t2 )
                case SessionStartAsASender_case_1
                solve( !KU( ~kemPreKey ) @ #vk.1 )
                  case KemPreKeyLeak
                  by contradiction
                qed
              next
                case SessionStartAsASender_case_2
                solve( !KU( ~kemPreKey ) @ #vk )
                  case KemPreKeyLeak
                  by contradiction
                qed
              qed
            qed
          next
            case case_2
            solve( DecapKemSS( ~id, $Me, $Them, kemSS, encapPk ) @ #x.2 )
              case PublicKeyRatchetNewReceiverWithSomeNewKemSS
              solve( (∃ #x.2.
                       (KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.2)
                      ∧
                       #x.2 < #x.1)  ∥
                     (∃ #x.2. (KemPreKeyGen( $Me, pqpk(~kemSk.1) ) @ #x.2) ∧ #x.2 < #x.1) )
                case case_1
                solve( KemKeyGen( ~id, $Me, $Them, Just(pqpk(~kemSk.1)) ) @ #x.3 )
                  case PublicKeyRatchetNewSenderNoNewKemSS
                  solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                         ) ▶₄ #x.2 )
                    case SomeFreshKemSk
                    solve( !KU( sign(<'msg_sig', ciphertext, $AD.2, 
                                      hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z, rootKey), kemSS),
                                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)),
                                                'msg_key'),
                                           'msg_key_ind'), 
                                      theirEcdhPk, (%i.1%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>, 
                                      maybeTheirNewKemPk, Just(kemEncap), None>,
                                     ~idKey.1)
                           ) @ #vk.5 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.32 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.31 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.31 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.30 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.33 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.32 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_4
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.32 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.31 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_5
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.34 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.33 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_6
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.33 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.32 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_sign
                      solve( !KU( ~idKey.1 ) @ #vk.24 )
                        case IdentityKeyLeak
                        by contradiction /* from formulas */
                      next
                        case PQAttacker
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS
                  solve( NewKemKey( $Me, $Them, maybeNewKemSk, Just(pqpk(~kemSk.1))
                         ) ▶₅ #x.2 )
                    case SomeFreshKemSk
                    solve( !KU( sign(<'msg_sig', ciphertext, $AD.2, 
                                      hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z, rootKey), kemSS),
                                                            <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)),
                                                'msg_key'),
                                           'msg_key_ind'), 
                                      theirEcdhPk, (%i.1%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>, 
                                      maybeTheirNewKemPk, Just(kemEncap), None>,
                                     ~idKey.1)
                           ) @ #vk.5 )
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.32 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.31 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.31 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.30 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.33 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.32 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_4
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.32 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.31 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_5
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.34 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.33 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case PublicKeyRatchetNewSenderSomeNewKemSS_case_6
                      solve( !KU( ~kemSS ) @ #t2 )
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                        solve( !KU( ~kemSk.1 ) @ #vk.33 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      next
                        case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                        solve( !KU( ~kemSk.1 ) @ #vk.32 )
                          case KemKeyLeak
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_sign
                      solve( !KU( ~idKey.1 ) @ #vk.24 )
                        case IdentityKeyLeak
                        by contradiction /* from formulas */
                      next
                        case PQAttacker
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( !KU( sign(<'msg_sig', ciphertext, $AD.2, 
                                  hkdf(hkdf(suffix(hkdf(hkdf(hkdf(z, rootKey), kemSS),
                                                        <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>)),
                                            'msg_key'),
                                       'msg_key_ind'), 
                                  theirEcdhPk, (%i.1%+%1), <$Them, pk(~idKey.1), $Me, pk(~idKey.3)>, 
                                  maybeTheirNewKemPk, Just(kemEncap), None>,
                                 ~idKey.1)
                       ) @ #vk.5 )
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk.1 ) @ #vk.32 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk.1 ) @ #vk.31 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk.1 ) @ #vk.31 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk.1 ) @ #vk.30 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_3
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk.1 ) @ #vk.33 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk.1 ) @ #vk.32 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_4
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk.1 ) @ #vk.32 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk.1 ) @ #vk.31 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_5
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk.1 ) @ #vk.34 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk.1 ) @ #vk.33 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case PublicKeyRatchetNewSenderSomeNewKemSS_case_6
                  solve( !KU( ~kemSS ) @ #t2 )
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_1
                    solve( !KU( ~kemSk.1 ) @ #vk.33 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  next
                    case PublicKeyRatchetNewSenderSomeNewKemSS_case_2
                    solve( !KU( ~kemSk.1 ) @ #vk.32 )
                      case KemPreKeyLeak
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case c_sign
                  solve( !KU( ~idKey.1 ) @ #vk.24 )
                    case IdentityKeyLeak
                    by contradiction /* from formulas */
                  next
                    case PQAttacker
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case SessionStartAsASender
  solve( SessionInfo( id.1, i, me, them ) @ #t1 )
    case SessionStartAsASender
    solve( IDSQuery( $Them, theirIdPk, theirPk, encapPk, preKeySig ) ▶₃ #t1 )
      case QueryIDS
      solve( !KU( ~kemSS ) @ #t2 )
        case SessionStartAsASender_case_1
        solve( !KU( ~kemPreKey ) @ #vk.1 )
          case KemPreKeyLeak
          by contradiction
        qed
      next
        case SessionStartAsASender_case_2
        solve( !KU( ~kemPreKey ) @ #vk )
          case KemPreKeyLeak
          by contradiction
        qed
      qed
    qed
  qed
qed

lemma CkCompromise [reuse, use_induction, hide_lemma=Auto_ECDHSkOrigin,
                    hide_lemma=Auto_MyKemKeyOrigin, hide_lemma=Auto_MaybeNewKemKeyOrigin,
                    hide_lemma=Auto_TheirKemKeyOrigin, hide_lemma=KemKeyOrigin,
                    hide_lemma=Auto_KemSSOrigin, hide_lemma=ECDHSSCompromise]:
  all-traces
  "∀ id li me them theirIdPk myPk theirPk ecdhSS myKemPk maybeTheirKemPk
     maybeNewKemPk kemSS encapPk rk ck mk #t1 #t2.
    (((SessionInfo( id, li, me, them ) @ #t1) ∧
      (KeysUsed( theirIdPk, myPk, theirPk, ecdhSS, myKemPk, maybeTheirKemPk,
                 maybeNewKemPk, kemSS, encapPk, rk, ck, mk
       ) @ #t1)) ∧
     (!KU( ck ) @ #t2)) ⇒
    (((∃ ckC #x.
        (RevealChainKey( me, ckC ) @ #x) ∧ ((ckC ⊏ ck) ∨ (ckC = ck))) ∨
      (∃ ckC #x.
        (RevealChainKey( them, ckC ) @ #x) ∧ ((ckC ⊏ ck) ∨ (ckC = ck)))) ∨
     (∃ rkCK #x. (rk = prefix(rkCK)) ∧ (!KU( rkCK ) @ #x)))"
/*
guarded formula characterizing all counter-examples:
"∃ id li me them theirIdPk myPk theirPk ecdhSS myKemPk maybeTheirKemPk
   maybeNewKemPk kemSS encapPk rk ck mk #t1 #t2.
  (SessionInfo( id, li, me, them ) @ #t1) ∧
  (KeysUsed( theirIdPk, myPk, theirPk, ecdhSS, myKemPk, maybeTheirKemPk,
             maybeNewKemPk, kemSS, encapPk, rk, ck, mk
   ) @ #t1) ∧
  (!KU( ck ) @ #t2)
 ∧
  (∀ ckC #x.
    (RevealChainKey( me, ckC ) @ #x) ⇒ (¬(ckC ⊏ ck)) ∧ (¬(ckC = ck))) ∧
  (∀ ckC #x.
    (RevealChainKey( them, ckC ) @ #x) ⇒ (¬(ckC ⊏ ck)) ∧ (¬(ckC = ck))) ∧
  (∀ rkCK #x. (rk = prefix(rkCK)) ∧ (!KU( rkCK ) @ #x) ⇒ ⊥)"
*/
by sorry

lemma Auto_RkFormat [reuse, use_induction]:
  all-traces
  "∀ rk a b c d e f g h i k l #t.
    (KeysUsed( a, b, c, d, e, f, g, h, i, rk, k, l ) @ #t) ⇒
    (∃ t.1. rk = prefix(t.1))"
/*
guarded formula characterizing all counter-examples:
"∃ rk a b c d e f g h i k l #t.
  (KeysUsed( a, b, c, d, e, f, g, h, i, rk, k, l ) @ #t)
 ∧
  ∀ t.1. (rk = prefix(t.1)) ⇒ ⊥"
*/
by sorry

lemma Auto_RkSecretCompromiseECDH [reuse, hide_lemma=CkCompromise,
                                   hide_lemma=Auto_SessionStart, hide_lemma=Auto_ECDHSkOrigin,
                                   hide_lemma=Auto_MyKemKeyOrigin, hide_lemma=Auto_MaybeNewKemKeyOrigin,
                                   hide_lemma=Auto_TheirKemKeyOrigin, hide_lemma=Auto_KemSSOrigin,
                                   hide_lemma=Auto_KemKeyOriginEncap, hide_lemma=Auto_KemKeyOriginDecap,
                                   hide_lemma=KemSSCompromise, hide_lemma=ECDHSSCompromise]:
  all-traces
  "∀ id li me them theirIdPk myEcdhPk theirEcdhPk ecdhSS myKemPk
     maybeTheirKemPk maybeNewKemPk kemSS encapPk rkCK ck mk #t1 #t2.
    (((SessionInfo( id, li, me, them ) @ #t1) ∧
      (KeysUsed( theirIdPk, myEcdhPk, theirEcdhPk, ecdhSS, myKemPk,
                 maybeTheirKemPk, maybeNewKemPk, kemSS, encapPk, prefix(rkCK), ck, mk
       ) @ #t1)) ∧
     (!KU( rkCK ) @ #t2)) ⇒
    (((∃ #x. RevealChainKey( me, suffix(rkCK) ) @ #x) ∨
      (∃ #x. RevealChainKey( them, suffix(rkCK) ) @ #x)) ∨
     (∃ #x. !KU( ecdhSS ) @ #x))"
/*
guarded formula characterizing all counter-examples:
"∃ id li me them theirIdPk myEcdhPk theirEcdhPk ecdhSS myKemPk
   maybeTheirKemPk maybeNewKemPk kemSS encapPk rkCK ck mk #t1 #t2.
  (SessionInfo( id, li, me, them ) @ #t1) ∧
  (KeysUsed( theirIdPk, myEcdhPk, theirEcdhPk, ecdhSS, myKemPk,
             maybeTheirKemPk, maybeNewKemPk, kemSS, encapPk, prefix(rkCK), ck, mk
   ) @ #t1) ∧
  (!KU( rkCK ) @ #t2)
 ∧
  (∀ #x. (RevealChainKey( me, suffix(rkCK) ) @ #x) ⇒ ⊥) ∧
  (∀ #x. (RevealChainKey( them, suffix(rkCK) ) @ #x) ⇒ ⊥) ∧
  (∀ #x. (!KU( ecdhSS ) @ #x) ⇒ ⊥)"
*/
by sorry

lemma Expensive_Auto_RkSecretCompromiseKemSS [reuse, use_induction,
                                              hide_lemma=Auto_SessionStart,
                                              hide_lemma=Auto_SessionStartUnique,
                                              hide_lemma=Auto_ECDHSkOrigin, hide_lemma=ECDHSSCompromise,
                                              hide_lemma=Auto_MyKemKeyOrigin,
                                              hide_lemma=Auto_MaybeNewKemKeyOrigin,
                                              hide_lemma=Auto_TheirKemKeyOrigin, hide_lemma=Auto_KemSSOrigin,
                                              hide_lemma=Auto_KemKeyOriginEncap,
                                              hide_lemma=Auto_KemKeyOriginDecap,
                                              hide_lemma=Auto_RkFixesEcdhSS, hide_lemma=CkCompromise,
                                              hide_lemma=Auto_RkSecretCompromiseECDH]:
  all-traces
  "∀ id li me them theirIdPk myEcdhPk theirEcdhPk ecdhSS myKemPk
     maybeTheirKemPk maybeNewKemPk kemSS encapPk rkCK ck mk #t1 #t2.
    (((SessionInfo( id, li, me, them ) @ #t1) ∧
      (KeysUsed( theirIdPk, myEcdhPk, theirEcdhPk, ecdhSS, myKemPk,
                 maybeTheirKemPk, maybeNewKemPk, kemSS, encapPk, prefix(rkCK), ck, mk
       ) @ #t1)) ∧
     (!KU( rkCK ) @ #t2)) ⇒
    (((((∃ #x. !KU( kemSS ) @ #x) ∨
        (∃ rk #x. (RevealRootKey( me, kemSS, rk ) @ #x) ∧ (rk ⊏ prefix(rkCK)))) ∨
       (∃ rk #x.
         (RevealRootKey( them, kemSS, rk ) @ #x) ∧ (rk ⊏ prefix(rkCK)))) ∨
      ((∃ ckC #x. (RevealChainKey( me, ckC ) @ #x) ∧ (ckC = suffix(rkCK))) ∧
       ((∃ rk #x. (RevealRootKey( me, kemSS, rk ) @ #x) ∧ (rk = prefix(rkCK))) ∨
        (∃ rk #x.
          (RevealRootKey( them, kemSS, rk ) @ #x) ∧ (rk = prefix(rkCK)))))) ∨
     ((∃ ckC #x. (RevealChainKey( them, ckC ) @ #x) ∧ (ckC = suffix(rkCK))) ∧
      ((∃ rk #x. (RevealRootKey( me, kemSS, rk ) @ #x) ∧ (rk = prefix(rkCK))) ∨
       (∃ rk #x.
         (RevealRootKey( them, kemSS, rk ) @ #x) ∧ (rk = prefix(rkCK))))))"
/*
guarded formula characterizing all counter-examples:
"∃ id li me them theirIdPk myEcdhPk theirEcdhPk ecdhSS myKemPk
   maybeTheirKemPk maybeNewKemPk kemSS encapPk rkCK ck mk #t1 #t2.
  (SessionInfo( id, li, me, them ) @ #t1) ∧
  (KeysUsed( theirIdPk, myEcdhPk, theirEcdhPk, ecdhSS, myKemPk,
             maybeTheirKemPk, maybeNewKemPk, kemSS, encapPk, prefix(rkCK), ck, mk
   ) @ #t1) ∧
  (!KU( rkCK ) @ #t2)
 ∧
  (∀ #x. (!KU( kemSS ) @ #x) ⇒ ⊥) ∧
  (∀ rk #x. (RevealRootKey( me, kemSS, rk ) @ #x) ⇒ ¬(rk ⊏ prefix(rkCK))) ∧
  (∀ rk #x.
    (RevealRootKey( them, kemSS, rk ) @ #x) ⇒ ¬(rk ⊏ prefix(rkCK))) ∧
  (((∀ ckC #x.
      (RevealChainKey( me, ckC ) @ #x) ∧ (ckC = suffix(rkCK)) ⇒ ⊥) ∨
    ((∀ rk #x.
       (RevealRootKey( me, kemSS, rk ) @ #x) ∧ (rk = prefix(rkCK)) ⇒ ⊥) ∧
     (∀ rk #x.
       (RevealRootKey( them, kemSS, rk ) @ #x) ∧ (rk = prefix(rkCK)) ⇒ ⊥)))) ∧
  (((∀ ckC #x.
      (RevealChainKey( them, ckC ) @ #x) ∧ (ckC = suffix(rkCK)) ⇒ ⊥) ∨
    ((∀ rk #x.
       (RevealRootKey( me, kemSS, rk ) @ #x) ∧ (rk = prefix(rkCK)) ⇒ ⊥) ∧
     (∀ rk #x.
       (RevealRootKey( them, kemSS, rk ) @ #x) ∧ (rk = prefix(rkCK)) ⇒ ⊥))))"
*/
by sorry

lemma Auto_ChainKeyMonotonicity2 [reuse, use_induction,
                                  hide_lemma=Auto_SessionStart, hide_lemma=Auto_SessionStartUnique,
                                  hide_lemma=Auto_RootKeyConnectionSend, hide_lemma=Auto_ECDHSkOrigin,
                                  hide_lemma=Auto_RootKeyConnectionReceive,
                                  hide_lemma=Auto_RootKeyMonotonicity, hide_lemma=ECDHSSCompromise]:
  all-traces
  "∀ rkCK ck a b c d e f g h i j #t.
    (KeysUsed( a, b, c, d, e, f, g, h, i, prefix(rkCK), ck, j ) @ #t) ⇒
    ((suffix(rkCK) ⊏ ck) ∨ (suffix(rkCK) = ck))"
/*
guarded formula characterizing all counter-examples:
"∃ rkCK ck a b c d e f g h i j #t.
  (KeysUsed( a, b, c, d, e, f, g, h, i, prefix(rkCK), ck, j ) @ #t)
 ∧
  (¬(suffix(rkCK) ⊏ ck)) ∧ (¬(suffix(rkCK) = ck))"
*/
by sorry

lemma Auto_MkCompromise [reuse, use_induction,
                         hide_lemma=Auto_SessionStart, hide_lemma=Auto_SessionStartUnique,
                         hide_lemma=Auto_ECDHSkOrigin, hide_lemma=ECDHSSCompromise,
                         hide_lemma=Auto_MyKemKeyOrigin, hide_lemma=Auto_MaybeNewKemKeyOrigin,
                         hide_lemma=Auto_TheirKemKeyOrigin, hide_lemma=Auto_KemSSOrigin,
                         hide_lemma=Auto_KemKeyOriginEncap, hide_lemma=Auto_KemKeyOriginDecap,
                         hide_lemma=KemSSCompromise, hide_lemma=CkCompromise,
                         hide_lemma=Auto_RkSecretCompromiseECDH,
                         hide_lemma=Expensive_Auto_RkSecretCompromiseKemSS]:
  all-traces
  "∀ id sentI me them myEcdhPk theirEcdhPk kemSS encapPk rk chainKey msgKey
     #t1 #t2.
    (((SessionInfo( id, sentI, me, them ) @ #t1) ∧
      (SessionSecrets( myEcdhPk, theirEcdhPk, kemSS, encapPk, rk, chainKey,
                       msgKey
       ) @ #t1)) ∧
     (!KU( msgKey ) @ #t2)) ⇒
    (((∃ #x. !KU( chainKey ) @ #x) ∨
      (∃ #x. RevealMessageKey( me, msgKey ) @ #x)) ∨
     (∃ #x. RevealMessageKey( them, msgKey ) @ #x))"
/*
guarded formula characterizing all counter-examples:
"∃ id sentI me them myEcdhPk theirEcdhPk kemSS encapPk rk chainKey msgKey
   #t1 #t2.
  (SessionInfo( id, sentI, me, them ) @ #t1) ∧
  (SessionSecrets( myEcdhPk, theirEcdhPk, kemSS, encapPk, rk, chainKey,
                   msgKey
   ) @ #t1) ∧
  (!KU( msgKey ) @ #t2)
 ∧
  (∀ #x. (!KU( chainKey ) @ #x) ⇒ ⊥) ∧
  (∀ #x. (RevealMessageKey( me, msgKey ) @ #x) ⇒ ⊥) ∧
  (∀ #x. (RevealMessageKey( them, msgKey ) @ #x) ⇒ ⊥)"
*/
by sorry

lemma Auto_Secrecy [hide_lemma=Auto_SessionStart,
                    hide_lemma=Auto_SessionStartUnique, hide_lemma=Auto_ECDHSkOrigin,
                    hide_lemma=Auto_RootKeyConnectionSend,
                    hide_lemma=Auto_RootKeyConnectionReceive, hide_lemma=Auto_MyKemKeyOrigin,
                    hide_lemma=Auto_MaybeNewKemKeyOrigin, hide_lemma=Auto_TheirKemKeyOrigin,
                    hide_lemma=Auto_KemSSOrigin, hide_lemma=Auto_KemKeyOriginEncap,
                    hide_lemma=Auto_KemKeyOriginDecap]:
  all-traces
  "∀ id sentI me them msg ad myEcdhPk theirEcdhPk kemSS encapPk rk chainKey
     msgKey #t.
    ((MessageSent( id, sentI, me, them, msg, ad ) @ #t) ∧
     (SessionSecrets( myEcdhPk, theirEcdhPk, kemSS, encapPk, rk, chainKey,
                      msgKey
      ) @ #t)) ⇒
    (((((((¬(∃ #x. K( msg ) @ #x)) ∨
          (∃ #x. RevealMessageKey( me, msgKey ) @ #x)) ∨
         (∃ #x. RevealMessageKey( them, msgKey ) @ #x)) ∨
        (∃ ckC #x.
          (RevealChainKey( me, ckC ) @ #x) ∧
          ((ckC ⊏ chainKey) ∨ (ckC = chainKey)))) ∨
       (∃ ckC #x.
         (RevealChainKey( them, ckC ) @ #x) ∧
         ((ckC ⊏ chainKey) ∨ (ckC = chainKey)))) ∨
      (∃ #x. (RevealIdentityKey( them ) @ #x) ∧ (#x < #t))) ∨
     (((((∃ #x. PQAttack( ) @ #x) ∨
         (∃ #x. RevealECDHPreKey( them, theirEcdhPk ) @ #x)) ∨
        (∃ #x. RevealECDHKey( id, me, myEcdhPk ) @ #x)) ∨
       (∃ id2 #x. RevealECDHKey( id2, them, theirEcdhPk ) @ #x)) ∧
      ((((((∃ #x. RevealKemKey( me, encapPk ) @ #x) ∨
           (∃ #x. RevealKemKey( them, encapPk ) @ #x)) ∨
          (∃ #x. RevealKemPreKey( me, encapPk ) @ #x)) ∨
         (∃ #x. RevealKemPreKey( them, encapPk ) @ #x)) ∨
        (∃ rkC #x. (RevealRootKey( me, kemSS, rkC ) @ #x) ∧ (rkC ⊏ rk))) ∨
       (∃ rkC #x. (RevealRootKey( them, kemSS, rkC ) @ #x) ∧ (rkC ⊏ rk)))))"
/*
guarded formula characterizing all counter-examples:
"∃ id sentI me them msg ad myEcdhPk theirEcdhPk kemSS encapPk rk chainKey
   msgKey #t.
  (MessageSent( id, sentI, me, them, msg, ad ) @ #t) ∧
  (SessionSecrets( myEcdhPk, theirEcdhPk, kemSS, encapPk, rk, chainKey,
                   msgKey
   ) @ #t)
 ∧
  (∃ #x. (K( msg ) @ #x)) ∧
  (∀ #x. (RevealMessageKey( me, msgKey ) @ #x) ⇒ ⊥) ∧
  (∀ #x. (RevealMessageKey( them, msgKey ) @ #x) ⇒ ⊥) ∧
  (∀ ckC #x.
    (RevealChainKey( me, ckC ) @ #x)
   ⇒
    (¬(ckC ⊏ chainKey)) ∧ (¬(ckC = chainKey))) ∧
  (∀ ckC #x.
    (RevealChainKey( them, ckC ) @ #x)
   ⇒
    (¬(ckC ⊏ chainKey)) ∧ (¬(ckC = chainKey))) ∧
  (∀ #x. (RevealIdentityKey( them ) @ #x) ⇒ ¬(#x < #t)) ∧
  ((((∀ #x. (PQAttack( ) @ #x) ⇒ ⊥) ∧
     (∀ #x. (RevealECDHPreKey( them, theirEcdhPk ) @ #x) ⇒ ⊥) ∧
     (∀ #x. (RevealECDHKey( id, me, myEcdhPk ) @ #x) ⇒ ⊥) ∧
     (∀ id2 #x. (RevealECDHKey( id2, them, theirEcdhPk ) @ #x) ⇒ ⊥)) ∨
    ((∀ #x. (RevealKemKey( me, encapPk ) @ #x) ⇒ ⊥) ∧
     (∀ #x. (RevealKemKey( them, encapPk ) @ #x) ⇒ ⊥) ∧
     (∀ #x. (RevealKemPreKey( me, encapPk ) @ #x) ⇒ ⊥) ∧
     (∀ #x. (RevealKemPreKey( them, encapPk ) @ #x) ⇒ ⊥) ∧
     (∀ rkC #x. (RevealRootKey( me, kemSS, rkC ) @ #x) ⇒ ¬(rkC ⊏ rk)) ∧
     (∀ rkC #x. (RevealRootKey( them, kemSS, rkC ) @ #x) ⇒ ¬(rkC ⊏ rk)))))"
*/
by sorry

lemma Auto_NoninjectiveAgreement [hide_lemma=Auto_SessionStartUnique,
                                  hide_lemma=Auto_ECDHSkOrigin, hide_lemma=Auto_RootKeyConnectionSend,
                                  hide_lemma=Auto_RootKeyConnectionReceive,
                                  hide_lemma=Auto_RootKeyMonotonicity,
                                  hide_lemma=Auto_ChainKeyMonotonicity,
                                  hide_lemma=Auto_RootKeyConnectionInjectivity,
                                  hide_lemma=Auto_MkCkRelation, hide_lemma=Auto_CkRkRelation,
                                  hide_lemma=ECDHSSCompromise, hide_lemma=Auto_MyKemKeyOrigin,
                                  hide_lemma=Auto_MaybeNewKemKeyOrigin, hide_lemma=Auto_TheirKemKeyOrigin,
                                  hide_lemma=Auto_KemSSOrigin, hide_lemma=Auto_KemKeyOriginEncap,
                                  hide_lemma=Auto_KemKeyOriginDecap, hide_lemma=KemSSCompromise,
                                  hide_lemma=CkCompromise, hide_lemma=Auto_Secrecy,
                                  hide_lemma=RkFixesKEMSS, hide_lemma=Auto_RkFixesEcdhSS,
                                  hide_lemma=Auto_RkFormat, hide_lemma=Auto_RkSecretCompromiseECDH,
                                  hide_lemma=Expensive_Auto_RkSecretCompromiseKemSS,
                                  hide_lemma=Auto_ChainKeyMonotonicity2, hide_lemma=Auto_MkCompromise]:
  all-traces
  "∀ id i s r m ad #t.
    (MessageReceived( id, i, s, r, m, ad ) @ #t) ⇒
    ((∃ id_ #x. (MessageSent( id_, i, s, r, m, ad ) @ #x) ∧ (#x < #t)) ∨
     (∃ #x. (RevealIdentityKey( s ) @ #x) ∧ (#x < #t)))"
/*
guarded formula characterizing all counter-examples:
"∃ id i s r m ad #t.
  (MessageReceived( id, i, s, r, m, ad ) @ #t)
 ∧
  (∀ id_ #x. (MessageSent( id_, i, s, r, m, ad ) @ #x) ⇒ ¬(#x < #t)) ∧
  (∀ #x. (RevealIdentityKey( s ) @ #x) ⇒ ¬(#x < #t))"
*/
by sorry

lemma Auto_InjectiveMessageReceived [hide_lemma=ECDHSSCompromise,
                                     hide_lemma=Auto_MyKemKeyOrigin, hide_lemma=Auto_MaybeNewKemKeyOrigin,
                                     hide_lemma=Auto_TheirKemKeyOrigin, hide_lemma=Auto_KemSSOrigin,
                                     hide_lemma=Auto_KemKeyOriginEncap, hide_lemma=Auto_KemKeyOriginDecap,
                                     hide_lemma=KemSSCompromise, hide_lemma=CkCompromise,
                                     hide_lemma=Auto_Secrecy, hide_lemma=RkFixesKEMSS,
                                     hide_lemma=Auto_RkFixesEcdhSS, hide_lemma=Auto_RkFormat,
                                     hide_lemma=Auto_RkSecretCompromiseECDH,
                                     hide_lemma=Expensive_Auto_RkSecretCompromiseKemSS,
                                     hide_lemma=Auto_ChainKeyMonotonicity2, hide_lemma=Auto_MkCompromise]:
  all-traces
  "∀ id1 id2 i1 i2 s1 s2 r1 r2 m ad rEcdhPk1 sEcdhPk1 kemSS1 encapPk1 rk1
     chainKey1 msgKey1 rEcdhPk2 sEcdhPk2 kemSS2 encapPk2 rk2 chainKey2 msgKey2
     #t1 #t2.
    ((((MessageReceived( id1, i1, s1, r1, m, ad ) @ #t1) ∧
       (SessionSecrets( rEcdhPk1, sEcdhPk1, kemSS1, encapPk1, rk1, chainKey1,
                        msgKey1
        ) @ #t1)) ∧
      (MessageReceived( id2, i2, s2, r2, m, ad ) @ #t2)) ∧
     (SessionSecrets( rEcdhPk2, sEcdhPk2, kemSS2, encapPk2, rk2, chainKey2,
                      msgKey2
      ) @ #t2)) ⇒
    ((((#t1 = #t2) ∨
       (((((rEcdhPk1 = rEcdhPk2) ∧ (msgKey1 = msgKey2)) ∧ (s1 = s2)) ∧
         (r1 = r2)) ∧
        (∃ #x. ECDHPreKeyGen( r1, rEcdhPk1 ) @ #x))) ∨
      (∃ #x. (RevealIdentityKey( s1 ) @ #x) ∧ (#x < #t1))) ∨
     (∃ #x. (RevealIdentityKey( s2 ) @ #x) ∧ (#x < #t2)))"
/*
guarded formula characterizing all counter-examples:
"∃ id1 id2 i1 i2 s1 s2 r1 r2 m ad rEcdhPk1 sEcdhPk1 kemSS1 encapPk1 rk1
   chainKey1 msgKey1 rEcdhPk2 sEcdhPk2 kemSS2 encapPk2 rk2 chainKey2 msgKey2
   #t1 #t2.
  (MessageReceived( id1, i1, s1, r1, m, ad ) @ #t1) ∧
  (SessionSecrets( rEcdhPk1, sEcdhPk1, kemSS1, encapPk1, rk1, chainKey1,
                   msgKey1
   ) @ #t1) ∧
  (MessageReceived( id2, i2, s2, r2, m, ad ) @ #t2) ∧
  (SessionSecrets( rEcdhPk2, sEcdhPk2, kemSS2, encapPk2, rk2, chainKey2,
                   msgKey2
   ) @ #t2)
 ∧
  (¬(#t1 = #t2)) ∧
  (((¬(rEcdhPk1 = rEcdhPk2)) ∨
    (¬(msgKey1 = msgKey2)) ∨
    (¬(s1 = s2)) ∨
    (¬(r1 = r2)) ∨
    (∀ #x. (ECDHPreKeyGen( r1, rEcdhPk1 ) @ #x) ⇒ ⊥))) ∧
  (∀ #x. (RevealIdentityKey( s1 ) @ #x) ⇒ ¬(#x < #t1)) ∧
  (∀ #x. (RevealIdentityKey( s2 ) @ #x) ⇒ ¬(#x < #t2))"
*/
by sorry











































/* All wellformedness checks were successful. */

/*
Generated from:
Tamarin version 1.8.0
Maude version 3.2.1
Git revision: f172d7f00b1485446a1e7a42dc14623c2189cc42, branch: master
Compiled at: 2023-09-01 08:49:23.916032222 UTC
*/

end
